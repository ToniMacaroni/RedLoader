{
  "api/index.html": {
    "href": "api/index.html",
    "title": "Redloader API | RedLoader Docs",
    "keywords": "Redloader API Here you can find the API refeference for RedLoader as well as the SonsSDK."
  },
  "articles/bundles.html": {
    "href": "articles/bundles.html",
    "title": "Asset Bundles | RedLoader Docs",
    "keywords": "Asset Bundles Asset bundles and Addressables allow you to load your own assets into the game. For more info see here. Redloader can load and map asset bundles automatically. For it to work do the following: Put your asset bundle into the Mods/<ModName>/ folder Add a static class like the following to your mod: [AssetBundle(\"Bundle\")] public static class AssetBundleTest { [AssetReference(\"Asset\")] public static GameObject Asset { get; set; } } The [AssetBundle] attribute is the name of your asset bundle. In this example the bundle is at this location Mods/<ModName>/Bundle. The [AssetReference] attribute is the name of the asset in the bundle. Make sure the attribute is on a property that has a getter and a setter. Addressables Addressables also allow you to load your own assets into the game. See here. To load in your addressables put the catalog and the bundle into the Mods/<ModName>/ folder. RedLoader will automatically register the catalog. After that you can load your asset like this: AssetLoaders.LoadAsset<Sprite>(\"MyAsset\"); AssetLoaders.LoadPrefab(\"MyAsset\"); // same as AssetLoaders.LoadAsset<GameObject>(\"\"); AssetLoaders.InstantiatePrefab(\"MyAsset\"); // same as Object.Instantiate(AssetLoaders.LoadAsset<GameObject>(\"\")); Important: Make sure to use a relative path for the bundle load path in the catalog. This will load the bundle relative to the Sons of the Forest executable. So the path should be something like Mods/<ModName>/. More info on addressables will follow soon"
  },
  "articles/configuration.html": {
    "href": "articles/configuration.html",
    "title": "Configuration | RedLoader Docs",
    "keywords": "Configuration To allow users to configure parameters of your mod you can add config entries to your mod. To do so take a look at the following example: public static class Config { public static ConfigCategory Category { get; private set; } public static ConfigEntry<float> SomeValue { get; private set; } public static void Init() { Category = ConfigSystem.CreateFileCategory(\"Zippy\", \"Zippy\", \"Zippy.cfg\"); SomeValue = Category.CreateEntry( \"display_depth\", 0.0692f, \"Display Depth\", \"Position of the display on the barrel axis.\"); DisplayDepth.SetRange(-0.03f,0.2f); } } First you need to create a category for your config. You can do so with ConfigSystem.CreateFileCategory(id, displayName, fileName);. Once you have a category you can add entries to it. To do so use Category.CreateEntry(id, defaultValue, displayName, description);. Optionally you can set a range for numeric entries and options for enum entries. You would then call Init() in the OnSdkInitialized() method of your mod. Input config entries Redloader comes with a custom configuration system for the new input system. The configuration class will look almost the same. public static class Config { public static ConfigCategory Category { get; private set; } public static KeybindConfigEntry SomeKey { get; private set; } public static void Init() { Category = ConfigSystem.CreateFileCategory(\"Zippy\", \"Zippy\", \"Zippy.cfg\"); SomeKey = Category.CreateKeybindEntry(\"key\", \"g\", \"Key\", \"Some key\"); } } You can then register action for your key anywhere with Config.SomeKey.Notify(MyAction, MyOptionalReleaseAction);"
  },
  "articles/creating-mods.html": {
    "href": "articles/creating-mods.html",
    "title": "Creating Mods | RedLoader Docs",
    "keywords": "Creating Mods This article will cover how to setup a mod project using the RedManager as it's the easiest way. If you want to use the template directory you can see it here. Creating the project (RedManager) Start up the RedManager If you path isn't correctly set, adjust it Head over to the Modders tab Click on Install template if you haven't installed the template yet Put in your mod name and click Create Project Select the target folder for your mod (a subfolder with your mod name will be created in the target folder) Creating the project (CLI) If you want to use the command line to create your project look at the readme here. IMPORTANT The RedManager can't update the template once a new one comes out. If you want to update the template open up the console and execute dotnet new install RedLoader.Templates. Project description The project includes several features out of the box: The mod will automatically be copied to the game on build If you use Rider you can press Ctrl+F5 to automatically copy the mod and run the game If you set the mode to release it will: Automatically create a folder with the correct mod structure Automatically create a zip with the created folder The template also sets up a basic mod for you. You should be able to just build the mod and see the mod being loaded. Adjusting the mod info The first thing you should do is adjust your mod info (like author, mod name etc.) in the manifest.json file. The file is linked to a valid json schema, so if you are ever unsure what you can write in there just press Ctrl+Space to open autocomplete. Tips If you want to automatically apply harmony patches for your assembly add HarmonyPatchAll = true; to your constructor (or uncomment it). If you want to subscribe to unity's OnUpdate, OnFixedUpdate, OnGUI and OnLateUpdate message queue you can register it in the constructor by for example using OnUpdateCallback = MyMethod. To reference additional assemblies, add them from the _RedLoader/Game folder. Non game assemblies like harmony can be referenced from the _RedLoader/net6 folder."
  },
  "articles/custom-save-data.html": {
    "href": "articles/custom-save-data.html",
    "title": "Adding custom data to a save file | RedLoader Docs",
    "keywords": "Adding custom data to a save file Red Loader has utilities if you want your mod to persist data in save games. This is useful if you want to save settings or other data that you want to persist between game sessions for a particular save. Serializer class Your mod needs some kind of class to serialize and deserialize your data. A common way is to have some kind of \"manager\" class that holds all the data you want to save. public class MyModManager : ICustomSaveable<MyModManager.MyModSaveData> { public string Name => \"MyModManager\"; // Used to determine if the data should also be saved in multiplayer saves public bool IncludeInPlayerSave => true; public MyModSaveData Save() { // Serialize your data from game state here return new MyModSaveData(); } public void Load(MyModSaveData obj) { // Apply game state from your data here } public class MyModSaveData { public Color SomeColor; public Vector3 SomeVector; } } The important parts here are the ICustomSaveable interface that MyModManager implements, and the MyModSaveData class that is used to serialize and deserialize the data. The Save and Load methods from the ICustomSaveable interface are used to serialize and deserialize the data. Red Loader will call them when a save game gets loaded or the user requests a save. Registering your serializer Registering the serializer is as easy as calling the following in OnSdkInitialized: var manager = new MyModManager(); SonsSaveTools.Register(manager);"
  },
  "articles/freecam.html": {
    "href": "articles/freecam.html",
    "title": "Freecam | RedLoader Docs",
    "keywords": "Freecam RedLoader ships with it's own configurable freecam mode that also adds smoothing. How to enable it Press F1 to open the console and type xfreecam. To exit the freecam mode, press F1 and type xfreecam again. Configuration You can configure various parameters of the freecam mode in the UserData/_RedLoader.cfg file. Parameter Default Value Description look_sensitivity 0.2 The mouse sensitivity multiplier when looking around positional_smoothing 0.5 The amount of smoothing applied to the camera's position rotational_smoothing 0.01 The amount of smoothing applied to the camera's rotation mouse_y_ratio 0.7 The ratio of the mouse's Y speed to the X axis Controls WASD to move around Space to move up Right mouse to move down Mouse to look around Mouse Wheel to change positional speed Ctrl + Mouse Wheel to change rotational speed"
  },
  "articles/installing-mods.html": {
    "href": "articles/installing-mods.html",
    "title": "Installing Mods | RedLoader Docs",
    "keywords": "Installing Mods To install mods you can use the Mod Manager found here. If you instead want to manually install mods do the following: Download the mod zip. Extract the the contents of the zip into your Sons Of The Forest folder. After that you should have a .dll file and a folder with the same name inside your Mods directory."
  },
  "articles/loader-features.html": {
    "href": "articles/loader-features.html",
    "title": "Misc Loader Features | RedLoader Docs",
    "keywords": "Misc Loader Features Quick Loading LoadIntoMain Load straight into a world for testing purposes by adding --sdk.loadintomain to your launch options. You can configure what gets loaded in the UserData/_RedLoader.cfg file. LoadSave You can directly load into a save game with the --savegame <id> launch option. You can find the ids of your save games in the C:\\Users\\<user>\\AppData\\LocalLow\\Endnight\\SonsOfTheForest\\Saves\\<userid>\\SinglePlayer directory. Boot.txt You can create a boot.txt in your game directory with a command on each line to be executed on game start. Debug commands Dump info There are several things the loader allows you to dump from the game. To do so you can use the dump console command. The dump will be written to the game folder in a file called <type>.txt (do for dump items it will be items.txt). The following thing can be dumped currently: dump items: Lists all items dump characters: Lists all characters and their variations dump prefabs Lists all prefabs"
  },
  "articles/sounds.html": {
    "href": "articles/sounds.html",
    "title": "Custom Sounds | RedLoader Docs",
    "keywords": "Custom Sounds Loading directly via mp3/wav files To load a sound from a file: SoundTools.RegisterSound(\"mysound\", path); SoundTools.PlaySound(\"mysound\"); mysound is the id of the sound by which you can play it later. It needs to be unique. You can also pass in the volume and pitch to the PlaySound method. 3D Sounds To play a sound in 3D space you need to set the is3d parameter of the RegisterSound method to true. Then you can use the PlaySound method with the pos parameter to play the sound at a specific position. SoundTools.RegisterSound(\"mysound\", path, true); SoundTools.PlaySound(\"mysound\", new Vector3(0, 0, 0)); 3D Sound attached to a gameobject Manually setting the position might not really be what you want. If you rather want to attach a sound to a gameobject and have it follow the object automatically, there is a better way. var go = new GameObject(\"Sound Player\"); var player = go.AddComponent<SoundPlayer>(); player.Sound = SoundTools.GetSound(\"mysound\"); player.Play(); player.ChannelDistance = 10; // You can set the distance like this. Loading FMOD Banks RedLoader can also load events from FMOD Banks. It's important to note that the banks have to be made in the provided FMOD project. Once you have your master bank and optional other bank, you can load them in like this: SoundTools.LoadBank(@\"Absolute\\Path\\To\\My\\Banks\\master.bank\"); Keep in mind the .strings.bank file is automatically loaded if it's in the same folder as the master bank. To load banks from a buffer you can use the same method but with a byte array instead of a path. After that the events are available to use like any other game event. Replacing game sounds RedLoader can also replace sounds in the game with your own (or another sound from the game). SoundTools.SetupRedirect(\"event:/GameEvent\", \"event:/MyEvent\");"
  },
  "index.html": {
    "href": "index.html",
    "title": "Welcome to the RedLoader wiki! | RedLoader Docs",
    "keywords": "Welcome to the RedLoader wiki! Useful links RedLoader: https://github.com/ToniMacaroni/RedLoader RedManager: https://github.com/ToniMacaroni/RedManager RedLoader mod templates: https://github.com/ToniMacaroni/RedLoader.Templates Start by reading the articles"
  }
}