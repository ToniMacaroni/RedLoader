{
  "api/ForestNanosuit.html": {
    "href": "api/ForestNanosuit.html",
    "title": "Namespace ForestNanosuit | RedLoader Docs",
    "keywords": "Namespace ForestNanosuit Classes UFileWriter"
  },
  "api/ForestNanosuit.UFileWriter.html": {
    "href": "api/ForestNanosuit.UFileWriter.html",
    "title": "Class UFileWriter | RedLoader Docs",
    "keywords": "Class UFileWriter Inheritance object UFileWriter Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: ForestNanosuit Assembly: SonsSdk.dll Syntax public class UFileWriter Constructors UFileWriter(string) Declaration public UFileWriter(string path) Parameters Type Name Description string path Properties Content Declaration public string Content { get; } Property Value Type Description string Methods Add(string) Declaration public UFileWriter Add(string text) Parameters Type Name Description string text Returns Type Description UFileWriter Line() Declaration public UFileWriter Line() Returns Type Description UFileWriter Line(string) Declaration public UFileWriter Line(string text) Parameters Type Name Description string text Returns Type Description UFileWriter Save() Declaration public void Save() Tab() Declaration public UFileWriter Tab() Returns Type Description UFileWriter"
  },
  "api/Harmony.ConfiguredPatcher-1.html": {
    "href": "api/Harmony.ConfiguredPatcher-1.html",
    "title": "Class ConfiguredPatcher<T> | RedLoader Docs",
    "keywords": "Class ConfiguredPatcher<T> Inheritance object ConfiguredPatcher ConfiguredPatcher<T> Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: Harmony Assembly: RedLoader.dll Syntax public class ConfiguredPatcher<T> : ConfiguredPatcher Type Parameters Name Description T Constructors ConfiguredPatcher(Harmony) Declaration public ConfiguredPatcher(Harmony harmony) Parameters Type Name Description Harmony harmony Methods Postfix<T2>(string, string) Declaration public void Postfix<T2>(string sourceMethodName, string targetMethodName) Parameters Type Name Description string sourceMethodName string targetMethodName Type Parameters Name Description T2 Prefix<T2>(string, string, params Type[]) Declaration public void Prefix<T2>(string sourceMethodName, string targetMethodName, params Type[] parameters) Parameters Type Name Description string sourceMethodName string targetMethodName Type[] parameters Type Parameters Name Description T2"
  },
  "api/Harmony.ConfiguredPatcher.EMethodType.html": {
    "href": "api/Harmony.ConfiguredPatcher.EMethodType.html",
    "title": "Enum ConfiguredPatcher.EMethodType | RedLoader Docs",
    "keywords": "Enum ConfiguredPatcher.EMethodType Namespace: Harmony Assembly: RedLoader.dll Syntax public enum ConfiguredPatcher.EMethodType Fields Name Description PrivateInstance PrivateStatic PublicInstance PublicStatic Extension Methods EnumExtensions.HasFlag(Enum, Enum)"
  },
  "api/Harmony.ConfiguredPatcher.html": {
    "href": "api/Harmony.ConfiguredPatcher.html",
    "title": "Class ConfiguredPatcher | RedLoader Docs",
    "keywords": "Class ConfiguredPatcher Inheritance object ConfiguredPatcher ConfiguredPatcher<T> Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: Harmony Assembly: RedLoader.dll Syntax public class ConfiguredPatcher Constructors ConfiguredPatcher() Declaration public ConfiguredPatcher()"
  },
  "api/Harmony.html": {
    "href": "api/Harmony.html",
    "title": "Namespace Harmony | RedLoader Docs",
    "keywords": "Namespace Harmony Classes ConfiguredPatcher ConfiguredPatcher<T> Enums ConfiguredPatcher.EMethodType"
  },
  "api/index.html": {
    "href": "api/index.html",
    "title": "Redloader API | RedLoader Docs",
    "keywords": "Redloader API Here you can find the API refeference for RedLoader as well as the SonsSDK."
  },
  "api/RedLoader.Assertions.html": {
    "href": "api/RedLoader.Assertions.html",
    "title": "Namespace RedLoader.Assertions | RedLoader Docs",
    "keywords": "Namespace RedLoader.Assertions Classes LemonAssert LemonAssertException LemonAssertMapping"
  },
  "api/RedLoader.Assertions.LemonAssert.html": {
    "href": "api/RedLoader.Assertions.LemonAssert.html",
    "title": "Class LemonAssert | RedLoader Docs",
    "keywords": "Class LemonAssert Inheritance object LemonAssert Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: RedLoader.Assertions Assembly: RedLoader.dll Syntax public static class LemonAssert Methods IsEqual<T>(T, T) Declaration public static void IsEqual<T>(T obj, T obj2) Parameters Type Name Description T obj T obj2 Type Parameters Name Description T IsEqual<T>(T, T, string) Declaration public static void IsEqual<T>(T obj, T obj2, string userMessage) Parameters Type Name Description T obj T obj2 string userMessage Type Parameters Name Description T IsEqual<T>(T, T, string, bool) Declaration public static void IsEqual<T>(T obj, T obj2, string userMessage, bool shouldThrowException) Parameters Type Name Description T obj T obj2 string userMessage bool shouldThrowException Type Parameters Name Description T IsFalse(bool) Declaration public static void IsFalse(bool obj) Parameters Type Name Description bool obj IsFalse(bool, string) Declaration public static void IsFalse(bool obj, string userMessage) Parameters Type Name Description bool obj string userMessage IsFalse(bool, string, bool) Declaration public static void IsFalse(bool obj, string userMessage, bool shouldThrowException) Parameters Type Name Description bool obj string userMessage bool shouldThrowException IsNotEqual<T>(T, T) Declaration public static void IsNotEqual<T>(T obj, T obj2) Parameters Type Name Description T obj T obj2 Type Parameters Name Description T IsNotEqual<T>(T, T, string) Declaration public static void IsNotEqual<T>(T obj, T obj2, string userMessage) Parameters Type Name Description T obj T obj2 string userMessage Type Parameters Name Description T IsNotEqual<T>(T, T, string, bool) Declaration public static void IsNotEqual<T>(T obj, T obj2, string userMessage, bool shouldThrowException) Parameters Type Name Description T obj T obj2 string userMessage bool shouldThrowException Type Parameters Name Description T IsNotNull<T>(T) Declaration public static void IsNotNull<T>(T obj) Parameters Type Name Description T obj Type Parameters Name Description T IsNotNull<T>(T, string) Declaration public static void IsNotNull<T>(T obj, string userMessage) Parameters Type Name Description T obj string userMessage Type Parameters Name Description T IsNotNull<T>(T, string, bool) Declaration public static void IsNotNull<T>(T obj, string userMessage, bool shouldThrowException) Parameters Type Name Description T obj string userMessage bool shouldThrowException Type Parameters Name Description T IsNull<T>(T) Declaration public static void IsNull<T>(T obj) Parameters Type Name Description T obj Type Parameters Name Description T IsNull<T>(T, string) Declaration public static void IsNull<T>(T obj, string userMessage) Parameters Type Name Description T obj string userMessage Type Parameters Name Description T IsNull<T>(T, string, bool) Declaration public static void IsNull<T>(T obj, string userMessage, bool shouldThrowException) Parameters Type Name Description T obj string userMessage bool shouldThrowException Type Parameters Name Description T IsTrue(bool) Declaration public static void IsTrue(bool obj) Parameters Type Name Description bool obj IsTrue(bool, string) Declaration public static void IsTrue(bool obj, string userMessage) Parameters Type Name Description bool obj string userMessage IsTrue(bool, string, bool) Declaration public static void IsTrue(bool obj, string userMessage, bool shouldThrowException) Parameters Type Name Description bool obj string userMessage bool shouldThrowException"
  },
  "api/RedLoader.Assertions.LemonAssertException.html": {
    "href": "api/RedLoader.Assertions.LemonAssertException.html",
    "title": "Class LemonAssertException | RedLoader Docs",
    "keywords": "Class LemonAssertException Inheritance object Exception LemonAssertException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.ToString() Exception.GetType() Exception.TargetSite Exception.Data Exception.InnerException Exception.HelpLink Exception.Source Exception.HResult Exception.StackTrace Exception.SerializeObjectState object.MemberwiseClone() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: RedLoader.Assertions Assembly: RedLoader.dll Syntax public class LemonAssertException : Exception, ISerializable Constructors LemonAssertException(string, string) Declaration public LemonAssertException(string exceptionMsg, string userMessage) Parameters Type Name Description string exceptionMsg string userMessage Properties Message Declaration public override string Message { get; } Property Value Type Description string Overrides Exception.Message Implements ISerializable"
  },
  "api/RedLoader.Assertions.LemonAssertMapping.html": {
    "href": "api/RedLoader.Assertions.LemonAssertMapping.html",
    "title": "Class LemonAssertMapping | RedLoader Docs",
    "keywords": "Class LemonAssertMapping Inheritance object LemonAssertMapping Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: RedLoader.Assertions Assembly: RedLoader.dll Syntax public static class LemonAssertMapping Methods Register_IsEqual<T>(Func<T, T, bool>) Declaration public static void Register_IsEqual<T>(Func<T, T, bool> method) Parameters Type Name Description Func<T, T, bool> method Type Parameters Name Description T Register_IsNull<T>(Func<T, bool>) Declaration public static void Register_IsNull<T>(Func<T, bool> method) Parameters Type Name Description Func<T, bool> method Type Parameters Name Description T"
  },
  "api/RedLoader.BieModWrapper.html": {
    "href": "api/RedLoader.BieModWrapper.html",
    "title": "Class BieModWrapper | RedLoader Docs",
    "keywords": "Class BieModWrapper Inheritance object ModBase ModTypeBase<MelonMod> MelonMod BieModWrapper Inherited Members MelonMod.OnSceneWasLoaded(int, string) MelonMod.OnSceneWasInitialized(int, string) MelonMod.OnSceneWasUnloaded(int, string) ModTypeBase<MelonMod>.ExecuteAll(LemonAction<MelonMod>, bool, string) ModTypeBase<MelonMod>.RegisteredMods ModTypeBase<MelonMod>.TypeName ModTypeBase<MelonMod>.MelonTypeName ModBase.OnMelonRegistered ModBase.OnMelonUnregistered ModBase.OnMelonInitializing ModBase.OnRegister ModBase.OnUnregister ModBase.CreateWrapper<T>(string, string, string, MelonGameAttribute[], MelonProcessAttribute[], int, Color?, Color?, string) ModBase.RegisterSorted<T>(IEnumerable<T>) ModBase.OnPreSupportModule() ModBase.OnUpdate() ModBase.OnFixedUpdate() ModBase.OnLateUpdate() ModBase.OnGUI() ModBase.OnApplicationQuit() ModBase.OnPreferencesSaved() ModBase.OnPreferencesSaved(string) ModBase.OnPreferencesLoaded() ModBase.OnPreferencesLoaded(string) ModBase.OnEarlyInitializeMelon() ModBase.OnLateInitializeMod() ModBase.OnDeinitializeMod() ModBase.FindIncompatiblities(MelonGameAttribute, string, string, string, string, MelonPlatformAttribute.CompatiblePlatforms, MelonPlatformDomainAttribute.CompatibleDomains) ModBase.FindIncompatiblitiesFromContext() ModBase.PrintIncompatibilities(ModBase.Incompatibility[], ModBase) ModBase.Register() ModBase.FindMelon(string, string) ModBase.Unregister(string, bool) ModBase.ExecuteAll(LemonAction<ModBase>, bool, string) ModBase.ExecuteList<T>(LemonAction<T>, List<T>, bool, string) ModBase.SendMessageAll(string, params object[]) ModBase.SendMessage(string, params object[]) ModBase.RegisteredMelons ModBase.MelonAssembly ModBase.Priority ModBase.ConsoleColor ModBase.AuthorConsoleColor ModBase.AdditionalCredits ModBase.SupportedGameVersion ModBase.OptionalDependencies ModBase.HarmonyInstance ModBase.LoggerInstance ModBase.ID ModBase.Description ModBase.Registered object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: RedLoader Assembly: RedLoader.dll Syntax public class BieModWrapper : MelonMod Constructors BieModWrapper(BasePlugin) Declaration public BieModWrapper(BasePlugin plugin) Parameters Type Name Description BasePlugin plugin Methods OnInitializeMod() Runs after the Mod has registered. This callback waits until the loader has fully initialized (OnApplicationStart). Declaration protected override void OnInitializeMod() Overrides ModBase.OnInitializeMod()"
  },
  "api/RedLoader.BuildInfo.html": {
    "href": "api/RedLoader.BuildInfo.html",
    "title": "Class BuildInfo | RedLoader Docs",
    "keywords": "Class BuildInfo Inheritance object BuildInfo Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: RedLoader Assembly: RedLoader.dll Syntax public static class BuildInfo Fields Author Declaration public const string Author = \"Lava Gang & Toni Macaroni\" Field Value Type Description string Description Declaration public const string Description = \"RedLoader based on RedLoader\" Field Value Type Description string Name Declaration public const string Name = \"RedLoader\" Field Value Type Description string Version Declaration public static readonly string Version Field Value Type Description string"
  },
  "api/RedLoader.CollectionExtensions.html": {
    "href": "api/RedLoader.CollectionExtensions.html",
    "title": "Class CollectionExtensions | RedLoader Docs",
    "keywords": "Class CollectionExtensions Inheritance object CollectionExtensions Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: RedLoader Assembly: RedLoader.dll Syntax public static class CollectionExtensions Methods WrapToIl2Cpp(IEnumerable) Declaration public static IEnumerable WrapToIl2Cpp(this IEnumerable self) Parameters Type Name Description IEnumerable self Returns Type Description IEnumerable WrapToIl2Cpp(IEnumerator) Declaration public static IEnumerator WrapToIl2Cpp(this IEnumerator self) Parameters Type Name Description IEnumerator self Returns Type Description IEnumerator WrapToManaged(IEnumerable) Declaration public static IEnumerable WrapToManaged(this IEnumerable self) Parameters Type Name Description IEnumerable self Returns Type Description IEnumerable WrapToManaged(IEnumerator) Declaration public static IEnumerator WrapToManaged(this IEnumerator self) Parameters Type Name Description IEnumerator self Returns Type Description IEnumerator"
  },
  "api/RedLoader.ConfigCategory.html": {
    "href": "api/RedLoader.ConfigCategory.html",
    "title": "Class ConfigCategory | RedLoader Docs",
    "keywords": "Class ConfigCategory Inheritance object ConfigCategory Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: RedLoader Assembly: RedLoader.dll Syntax public class ConfigCategory Fields Entries Declaration public readonly List<ConfigEntry> Entries Field Value Type Description List<ConfigEntry> Properties DisplayName Declaration public string DisplayName { get; set; } Property Value Type Description string Identifier Declaration public string Identifier { get; } Property Value Type Description string IsHidden Declaration public bool IsHidden { get; set; } Property Value Type Description bool IsInlined Declaration public bool IsInlined { get; set; } Property Value Type Description bool Methods CreateEntry<T>(string, T, string, bool) Declaration public ConfigEntry CreateEntry<T>(string identifier, T default_value, string display_name, bool is_hidden) Parameters Type Name Description string identifier T default_value string display_name bool is_hidden Returns Type Description ConfigEntry Type Parameters Name Description T CreateEntry<T>(string, T, string, string, bool, bool, ValueValidator) Declaration public ConfigEntry<T> CreateEntry<T>(string identifier, T default_value, string display_name, string description, bool is_hidden, bool dont_save_default, ValueValidator validator) Parameters Type Name Description string identifier T default_value string display_name string description bool is_hidden bool dont_save_default ValueValidator validator Returns Type Description ConfigEntry<T> Type Parameters Name Description T CreateEntry<T>(string, T, string, string, bool, bool, ValueValidator, string) Declaration public ConfigEntry<T> CreateEntry<T>(string identifier, T default_value, string display_name = null, string description = null, bool is_hidden = false, bool dont_save_default = false, ValueValidator validator = null, string oldIdentifier = null) Parameters Type Name Description string identifier T default_value string display_name string description bool is_hidden bool dont_save_default ValueValidator validator string oldIdentifier Returns Type Description ConfigEntry<T> Type Parameters Name Description T DeleteEntry(string) Declaration public bool DeleteEntry(string identifier) Parameters Type Name Description string identifier Returns Type Description bool DestroyFileWatcher() Declaration public void DestroyFileWatcher() GetEntry(string) Declaration public ConfigEntry GetEntry(string identifier) Parameters Type Name Description string identifier Returns Type Description ConfigEntry GetEntry<T>(string) Declaration public ConfigEntry<T> GetEntry<T>(string identifier) Parameters Type Name Description string identifier Returns Type Description ConfigEntry<T> Type Parameters Name Description T HasEntry(string) Declaration public bool HasEntry(string identifier) Parameters Type Name Description string identifier Returns Type Description bool LoadFromFile(bool) Declaration public void LoadFromFile(bool printmsg = true) Parameters Type Name Description bool printmsg RenameEntry(string, string) Declaration public bool RenameEntry(string identifier, string newIdentifier) Parameters Type Name Description string identifier string newIdentifier Returns Type Description bool ResetFilePath() Declaration public void ResetFilePath() SaveToFile(bool) Declaration public void SaveToFile(bool printmsg = true) Parameters Type Name Description bool printmsg SetFilePath(string) Declaration public void SetFilePath(string filepath) Parameters Type Name Description string filepath SetFilePath(string, bool) Declaration public void SetFilePath(string filepath, bool autoload) Parameters Type Name Description string filepath bool autoload SetFilePath(string, bool, bool) Declaration public void SetFilePath(string filepath, bool autoload, bool printmsg) Parameters Type Name Description string filepath bool autoload bool printmsg"
  },
  "api/RedLoader.ConfigEntry-1.html": {
    "href": "api/RedLoader.ConfigEntry-1.html",
    "title": "Class ConfigEntry<T> | RedLoader Docs",
    "keywords": "Class ConfigEntry<T> Inheritance object ConfigEntry ConfigEntry<T> Inherited Members ConfigEntry.OnEntryValueChangedUntyped ConfigEntry.GetExceptionMessage(string) ConfigEntry.FireUntypedValueChanged(object, object) ConfigEntry.Identifier ConfigEntry.DisplayName ConfigEntry.Description ConfigEntry.Comment ConfigEntry.IsHidden ConfigEntry.DontSaveDefault ConfigEntry.Category ConfigEntry.Validator ConfigEntry.OnValueChangedUntyped object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: RedLoader Assembly: RedLoader.dll Syntax public class ConfigEntry<T> : ConfigEntry Type Parameters Name Description T Constructors ConfigEntry() Declaration public ConfigEntry() Fields OnEntryValueChanged Declaration public readonly MelonEvent<T, T> OnEntryValueChanged Field Value Type Description MelonEvent<T, T> Properties BoxedEditedValue Declaration public override object BoxedEditedValue { get; set; } Property Value Type Description object Overrides ConfigEntry.BoxedEditedValue BoxedValue Declaration public override object BoxedValue { get; set; } Property Value Type Description object Overrides ConfigEntry.BoxedValue DefaultValue Declaration public T DefaultValue { get; set; } Property Value Type Description T EditedValue Declaration public T EditedValue { get; set; } Property Value Type Description T Value Declaration public T Value { get; set; } Property Value Type Description T Methods GetDefaultValueAsString() Declaration public override string GetDefaultValueAsString() Returns Type Description string Overrides ConfigEntry.GetDefaultValueAsString() GetEditedValueAsString() Declaration public override string GetEditedValueAsString() Returns Type Description string Overrides ConfigEntry.GetEditedValueAsString() GetReflectedType() Declaration public override Type GetReflectedType() Returns Type Description Type Overrides ConfigEntry.GetReflectedType() GetValueAsString() Declaration public override string GetValueAsString() Returns Type Description string Overrides ConfigEntry.GetValueAsString() Load(TomlValue) Declaration public override void Load(TomlValue obj) Parameters Type Name Description TomlValue obj Overrides ConfigEntry.Load(TomlValue) ResetToDefault() Declaration public override void ResetToDefault() Overrides ConfigEntry.ResetToDefault() Save() Declaration public override TomlValue Save() Returns Type Description TomlValue Overrides ConfigEntry.Save() Events OnValueChanged Declaration [Obsolete(\"Please use the OnEntryValueChanged MelonEvent instead.\")] public event Action<T, T> OnValueChanged Event Type Type Description Action<T, T>"
  },
  "api/RedLoader.ConfigEntry.html": {
    "href": "api/RedLoader.ConfigEntry.html",
    "title": "Class ConfigEntry | RedLoader Docs",
    "keywords": "Class ConfigEntry Inheritance object ConfigEntry ConfigEntry<T> Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: RedLoader Assembly: RedLoader.dll Syntax public abstract class ConfigEntry Constructors ConfigEntry() Declaration protected ConfigEntry() Fields OnEntryValueChangedUntyped Declaration public readonly MelonEvent<object, object> OnEntryValueChangedUntyped Field Value Type Description MelonEvent<object, object> Properties BoxedEditedValue Declaration public abstract object BoxedEditedValue { get; set; } Property Value Type Description object BoxedValue Declaration public abstract object BoxedValue { get; set; } Property Value Type Description object Category Declaration public ConfigCategory Category { get; } Property Value Type Description ConfigCategory Comment Declaration public string Comment { get; set; } Property Value Type Description string Description Declaration public string Description { get; set; } Property Value Type Description string DisplayName Declaration public string DisplayName { get; set; } Property Value Type Description string DontSaveDefault Declaration public bool DontSaveDefault { get; set; } Property Value Type Description bool Identifier Declaration public string Identifier { get; } Property Value Type Description string IsHidden Declaration public bool IsHidden { get; set; } Property Value Type Description bool Validator Declaration public ValueValidator Validator { get; } Property Value Type Description ValueValidator Methods FireUntypedValueChanged(object, object) Declaration protected void FireUntypedValueChanged(object old, object neew) Parameters Type Name Description object old object neew GetDefaultValueAsString() Declaration public abstract string GetDefaultValueAsString() Returns Type Description string GetEditedValueAsString() Declaration public abstract string GetEditedValueAsString() Returns Type Description string GetExceptionMessage(string) Declaration public string GetExceptionMessage(string submsg) Parameters Type Name Description string submsg Returns Type Description string GetReflectedType() Declaration public abstract Type GetReflectedType() Returns Type Description Type GetValueAsString() Declaration public abstract string GetValueAsString() Returns Type Description string Load(TomlValue) Declaration public abstract void Load(TomlValue obj) Parameters Type Name Description TomlValue obj ResetToDefault() Declaration public abstract void ResetToDefault() Save() Declaration public abstract TomlValue Save() Returns Type Description TomlValue Events OnValueChangedUntyped Declaration [Obsolete(\"Please use the OnEntryValueChangedUntyped MelonEvent instead.\")] public event Action OnValueChangedUntyped Event Type Type Description Action"
  },
  "api/RedLoader.ConfigSystem.html": {
    "href": "api/RedLoader.ConfigSystem.html",
    "title": "Class ConfigSystem | RedLoader Docs",
    "keywords": "Class ConfigSystem Inheritance object ConfigSystem Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: RedLoader Assembly: RedLoader.dll Syntax public static class ConfigSystem Fields Categories Declaration public static readonly List<ConfigCategory> Categories Field Value Type Description List<ConfigCategory> Mapper Declaration public static readonly TomlMapper Mapper Field Value Type Description TomlMapper OnPreferencesLoaded Occurs when a Preferences File has been loaded. string: Path of the Preferences File. Declaration public static readonly MelonEvent<string> OnPreferencesLoaded Field Value Type Description MelonEvent<string> OnPreferencesSaved Occurs when a Preferences File has been saved. string: Path of the Preferences File. Declaration public static readonly MelonEvent<string> OnPreferencesSaved Field Value Type Description MelonEvent<string> ReflectiveCategories Declaration public static readonly List<ReflectiveConfigCategory> ReflectiveCategories Field Value Type Description List<ReflectiveConfigCategory> Methods CreateCategory(string) Declaration public static ConfigCategory CreateCategory(string identifier) Parameters Type Name Description string identifier Returns Type Description ConfigCategory CreateCategory(string, string) Declaration public static ConfigCategory CreateCategory(string identifier, string display_name = null) Parameters Type Name Description string identifier string display_name Returns Type Description ConfigCategory CreateCategory(string, string, bool, bool) Declaration public static ConfigCategory CreateCategory(string identifier, string display_name = null, bool is_hidden = false, bool should_save = true) Parameters Type Name Description string identifier string display_name bool is_hidden bool should_save Returns Type Description ConfigCategory CreateCategory<T>(string, string) Declaration public static ReflectiveConfigCategory CreateCategory<T>(string identifier, string display_name = null) where T : new() Parameters Type Name Description string identifier string display_name Returns Type Description ReflectiveConfigCategory Type Parameters Name Description T CreateEntry<T>(string, string, T, string, bool) Declaration [Obsolete] public static ConfigEntry CreateEntry<T>(string category_identifier, string entry_identifier, T default_value, string display_name, bool is_hidden) Parameters Type Name Description string category_identifier string entry_identifier T default_value string display_name bool is_hidden Returns Type Description ConfigEntry Type Parameters Name Description T CreateEntry<T>(string, string, T, string, string, bool, bool, ValueValidator) Declaration public static ConfigEntry<T> CreateEntry<T>(string category_identifier, string entry_identifier, T default_value, string display_name = null, string description = null, bool is_hidden = false, bool dont_save_default = false, ValueValidator validator = null) Parameters Type Name Description string category_identifier string entry_identifier T default_value string display_name string description bool is_hidden bool dont_save_default ValueValidator validator Returns Type Description ConfigEntry<T> Type Parameters Name Description T CreateFileCategory(string, string, string) Create a new category which will be saved to a custom file. Declaration public static ConfigCategory CreateFileCategory(string identifier, string display_name, string file_name) Parameters Type Name Description string identifier string display_name string file_name The relative filepath Returns Type Description ConfigCategory GetCategory(string) Declaration public static ConfigCategory GetCategory(string identifier) Parameters Type Name Description string identifier Returns Type Description ConfigCategory GetCategory<T>(string) Declaration public static T GetCategory<T>(string identifier) where T : new() Parameters Type Name Description string identifier Returns Type Description T Type Parameters Name Description T GetEntry(string, string) Declaration public static ConfigEntry GetEntry(string category_identifier, string entry_identifier) Parameters Type Name Description string category_identifier string entry_identifier Returns Type Description ConfigEntry GetEntryValue<T>(string, string) Declaration public static T GetEntryValue<T>(string category_identifier, string entry_identifier) Parameters Type Name Description string category_identifier string entry_identifier Returns Type Description T Type Parameters Name Description T GetEntry<T>(string, string) Declaration public static ConfigEntry<T> GetEntry<T>(string category_identifier, string entry_identifier) Parameters Type Name Description string category_identifier string entry_identifier Returns Type Description ConfigEntry<T> Type Parameters Name Description T GetFilePath(string) Gets the absulute path of a Preferences File. Declaration public static string GetFilePath(string fileName) Parameters Type Name Description string fileName Filename relative to the userdata path Returns Type Description string The absolute filepath HasEntry(string, string) Declaration public static bool HasEntry(string category_identifier, string entry_identifier) Parameters Type Name Description string category_identifier string entry_identifier Returns Type Description bool Load() Declaration public static void Load() RemoveCategoryFromFile(string, string) Declaration public static void RemoveCategoryFromFile(string filePath, string categoryName) Parameters Type Name Description string filePath string categoryName Save() Declaration public static void Save() SaveCategory<T>(string, bool) Declaration public static void SaveCategory<T>(string identifier, bool printmsg = true) Parameters Type Name Description string identifier bool printmsg Type Parameters Name Description T SetEntryValue<T>(string, string, T) Declaration public static void SetEntryValue<T>(string category_identifier, string entry_identifier, T value) Parameters Type Name Description string category_identifier string entry_identifier T value Type Parameters Name Description T"
  },
  "api/RedLoader.CoreClrUtils.html": {
    "href": "api/RedLoader.CoreClrUtils.html",
    "title": "Namespace RedLoader.CoreClrUtils | RedLoader Docs",
    "keywords": "Namespace RedLoader.CoreClrUtils Classes NativeStackWalk NativeStackWalk.NativeStackFrame"
  },
  "api/RedLoader.CoreClrUtils.NativeStackWalk.html": {
    "href": "api/RedLoader.CoreClrUtils.NativeStackWalk.html",
    "title": "Class NativeStackWalk | RedLoader Docs",
    "keywords": "Class NativeStackWalk Inheritance object NativeStackWalk Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: RedLoader.CoreClrUtils Assembly: RedLoader.dll Syntax public static class NativeStackWalk Properties NativeStackTrace Declaration public static string NativeStackTrace { get; } Property Value Type Description string Methods GetNativeStackFrames() Declaration public static List<NativeStackWalk.NativeStackFrame> GetNativeStackFrames() Returns Type Description List<NativeStackWalk.NativeStackFrame> LogNativeStackTrace() Declaration public static void LogNativeStackTrace()"
  },
  "api/RedLoader.CoreClrUtils.NativeStackWalk.NativeStackFrame.html": {
    "href": "api/RedLoader.CoreClrUtils.NativeStackWalk.NativeStackFrame.html",
    "title": "Class NativeStackWalk.NativeStackFrame | RedLoader Docs",
    "keywords": "Class NativeStackWalk.NativeStackFrame Inheritance object NativeStackWalk.NativeStackFrame Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: RedLoader.CoreClrUtils Assembly: RedLoader.dll Syntax public class NativeStackWalk.NativeStackFrame Constructors NativeStackFrame() Declaration public NativeStackFrame() Fields Function Declaration public string? Function Field Value Type Description string ModulePath Declaration public string? ModulePath Field Value Type Description string Offset Declaration public ulong Offset Field Value Type Description ulong Pointer Declaration public ulong Pointer Field Value Type Description ulong Properties ModuleName Declaration public string? ModuleName { get; } Property Value Type Description string"
  },
  "api/RedLoader.CorePreferences.FConsoleRect.html": {
    "href": "api/RedLoader.CorePreferences.FConsoleRect.html",
    "title": "Struct CorePreferences.FConsoleRect | RedLoader Docs",
    "keywords": "Struct CorePreferences.FConsoleRect Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) Namespace: RedLoader Assembly: RedLoader.dll Syntax public struct CorePreferences.FConsoleRect Constructors FConsoleRect(int, int, int, int) Declaration public FConsoleRect(int x, int y, int width, int height) Parameters Type Name Description int x int y int width int height Fields Height Declaration public int Height Field Value Type Description int Width Declaration public int Width Field Value Type Description int X Declaration public int X Field Value Type Description int Y Declaration public int Y Field Value Type Description int"
  },
  "api/RedLoader.CorePreferences.html": {
    "href": "api/RedLoader.CorePreferences.html",
    "title": "Class CorePreferences | RedLoader Docs",
    "keywords": "Class CorePreferences Inheritance object CorePreferences Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: RedLoader Assembly: RedLoader.dll Syntax public class CorePreferences Properties ConsoleRect Declaration public static ConfigEntry<CorePreferences.FConsoleRect> ConsoleRect { get; } Property Value Type Description ConfigEntry<CorePreferences.FConsoleRect> CoreCategory Declaration public static ConfigCategory CoreCategory { get; } Property Value Type Description ConfigCategory HideStatusWindow Declaration public static ConfigEntry<bool> HideStatusWindow { get; } Property Value Type Description ConfigEntry<bool> Instance Declaration public static CorePreferences Instance { get; } Property Value Type Description CorePreferences SaveConsoleRect Declaration public static ConfigEntry<bool> SaveConsoleRect { get; } Property Value Type Description ConfigEntry<bool> ShowConsole Declaration public static ConfigEntry<bool> ShowConsole { get; } Property Value Type Description ConfigEntry<bool> Methods Load() Declaration public static void Load()"
  },
  "api/RedLoader.CoroutineExtensions.html": {
    "href": "api/RedLoader.CoroutineExtensions.html",
    "title": "Class CoroutineExtensions | RedLoader Docs",
    "keywords": "Class CoroutineExtensions Inheritance object CoroutineExtensions Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: RedLoader Assembly: RedLoader.dll Syntax public static class CoroutineExtensions Methods RunCoro(IEnumerator) Declaration public static Coroutines.CoroutineToken RunCoro(this IEnumerator coro) Parameters Type Name Description IEnumerator coro Returns Type Description Coroutines.CoroutineToken"
  },
  "api/RedLoader.Coroutines.CoroutineToken.html": {
    "href": "api/RedLoader.Coroutines.CoroutineToken.html",
    "title": "Class Coroutines.CoroutineToken | RedLoader Docs",
    "keywords": "Class Coroutines.CoroutineToken Inheritance object Coroutines.CoroutineToken Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: RedLoader Assembly: RedLoader.dll Syntax public class Coroutines.CoroutineToken Constructors CoroutineToken(object) Declaration public CoroutineToken(object token) Parameters Type Name Description object token Properties IsValid Declaration public bool IsValid { get; } Property Value Type Description bool Methods Stop() Declaration public void Stop() Operators implicit operator bool(CoroutineToken) Declaration public static implicit operator bool(Coroutines.CoroutineToken token) Parameters Type Name Description Coroutines.CoroutineToken token Returns Type Description bool"
  },
  "api/RedLoader.Coroutines.html": {
    "href": "api/RedLoader.Coroutines.html",
    "title": "Class Coroutines | RedLoader Docs",
    "keywords": "Class Coroutines Inheritance object Coroutines Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: RedLoader Assembly: RedLoader.dll Syntax public class Coroutines Constructors Coroutines() Declaration public Coroutines() Methods Start(IEnumerator) Start a new coroutine. Coroutines are called at the end of the game Update loops. Declaration public static object Start(IEnumerator routine) Parameters Type Name Description IEnumerator routine The target routine Returns Type Description object An object that can be passed to Stop to stop this coroutine Stop(object) Stop a currently running coroutine Declaration public static void Stop(object coroutineToken) Parameters Type Name Description object coroutineToken The coroutine to stop"
  },
  "api/RedLoader.EnumExtensions.html": {
    "href": "api/RedLoader.EnumExtensions.html",
    "title": "Class EnumExtensions | RedLoader Docs",
    "keywords": "Class EnumExtensions Extentions for enums. Inheritance object EnumExtensions Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: RedLoader Assembly: RedLoader.dll Syntax public static class EnumExtensions Methods HasFlag(Enum, Enum) From: http://www.sambeauvois.be/blog/2011/08/enum-hasflag-method-extension-for-4-0-framework/ A FX 3.5 way to mimic the FX4 \"HasFlag\" method. Declaration public static bool HasFlag(this Enum variable, Enum value) Parameters Type Name Description Enum variable The tested enum. Enum value The value to test. Returns Type Description bool True if the flag is set. Otherwise false."
  },
  "api/RedLoader.GlobalEvents.html": {
    "href": "api/RedLoader.GlobalEvents.html",
    "title": "Class GlobalEvents | RedLoader Docs",
    "keywords": "Class GlobalEvents Inheritance object GlobalEvents Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: RedLoader Assembly: RedLoader.dll Syntax public static class GlobalEvents Fields OnApplicationDefiniteQuit Called before the Application is closed. It is not possible to prevent the game from closing at this point. Declaration public static readonly MelonEvent OnApplicationDefiniteQuit Field Value Type Description MelonEvent OnApplicationEarlyStart Called after Game Initialization, before OnApplicationStart and before Assembly Generation on Il2Cpp games. Declaration public static readonly MelonEvent OnApplicationEarlyStart Field Value Type Description MelonEvent OnApplicationLateStart Called when the first 'Start' Unity Messages are invoked. Declaration public static readonly MelonEvent OnApplicationLateStart Field Value Type Description MelonEvent OnApplicationQuit Called on a quit request. It is possible to abort the request in this callback. Declaration public static readonly MelonEvent OnApplicationQuit Field Value Type Description MelonEvent OnApplicationStart Called after all RedLoader components are fully initialized (including all MelonMods). Don't use this event to initialize your Melons anymore! Instead, override OnInitializeMod(). Declaration public static readonly MelonEvent OnApplicationStart Field Value Type Description MelonEvent OnFixedUpdate Called every 0.02 seconds, unless Time.fixedDeltaTime has a different Value. It is recommended to do all important Physics calculations inside this Callback. Declaration public static readonly MelonEvent OnFixedUpdate Field Value Type Description MelonEvent OnGUI Called at every IMGUI event. Only use this for drawing IMGUI Elements. Declaration public static readonly MelonEvent OnGUI Field Value Type Description MelonEvent OnLateUpdate Called once per frame, after OnUpdate. Declaration public static readonly MelonEvent OnLateUpdate Field Value Type Description MelonEvent OnPreInitialization Called after all MelonPlugins are initialized. Declaration public static readonly MelonEvent OnPreInitialization Field Value Type Description MelonEvent OnPreModsLoaded Called before MelonMods are loaded from the Mods folder. Declaration public static readonly MelonEvent OnPreModsLoaded Field Value Type Description MelonEvent OnPreSupportModule Called after all MelonMods are initialized and before the right Support Module is loaded. Declaration public static readonly MelonEvent OnPreSupportModule Field Value Type Description MelonEvent OnSceneWasInitialized Called once a Scene is initialized. Arguments: int: Build Index of the Scene. string: Name of the Scene. Declaration public static readonly MelonEvent<int, string> OnSceneWasInitialized Field Value Type Description MelonEvent<int, string> OnSceneWasLoaded Called when a new Scene is loaded. Arguments: int: Build Index of the Scene. string: Name of the Scene. Declaration public static readonly MelonEvent<int, string> OnSceneWasLoaded Field Value Type Description MelonEvent<int, string> OnSceneWasUnloaded Called once a Scene unloads. Arguments: int: Build Index of the Scene. string: Name of the Scene. Declaration public static readonly MelonEvent<int, string> OnSceneWasUnloaded Field Value Type Description MelonEvent<int, string> OnUpdate Called once per frame. Declaration public static readonly MelonEvent OnUpdate Field Value Type Description MelonEvent"
  },
  "api/RedLoader.HarmonyDontPatchAllAttribute.html": {
    "href": "api/RedLoader.HarmonyDontPatchAllAttribute.html",
    "title": "Class HarmonyDontPatchAllAttribute | RedLoader Docs",
    "keywords": "Class HarmonyDontPatchAllAttribute Inheritance object Attribute HarmonyDontPatchAllAttribute Inherited Members Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.Equals(object) Attribute.GetHashCode() Attribute.Match(object) Attribute.IsDefaultAttribute() Attribute.TypeId object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) Namespace: RedLoader Assembly: RedLoader.dll Syntax [AttributeUsage(AttributeTargets.Assembly)] public class HarmonyDontPatchAllAttribute : Attribute Constructors HarmonyDontPatchAllAttribute() Declaration public HarmonyDontPatchAllAttribute()"
  },
  "api/RedLoader.html": {
    "href": "api/RedLoader.html",
    "title": "Namespace RedLoader | RedLoader Docs",
    "keywords": "Namespace RedLoader Namespaces RedLoader.Assertions RedLoader.CoreClrUtils RedLoader.Pastel RedLoader.Preferences RedLoader.TinyJSON RedLoader.Utils Classes BieModWrapper BuildInfo CollectionExtensions ConfigCategory ConfigEntry ConfigEntry<T> ConfigSystem CorePreferences CoroutineExtensions Coroutines Coroutines.CoroutineToken EnumExtensions Extentions for enums. GlobalEvents HarmonyDontPatchAllAttribute Il2CppManagedEnumerable Il2CppManagedEnumerator IniFile InteropSupport LaunchOptions LaunchOptions.AnalyticsBlocker LaunchOptions.Console LaunchOptions.Core LaunchOptions.Il2CppAssemblyGenerator LaunchOptions.Logger LaunchOptions.SonsSdk LemonArraySegment<T> LemonEnumerator<T> LemonTuple<T1> LemonTuple<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> LemonTuple<T1, T2> LemonTuple<T1, T2, T3> LemonTuple<T1, T2, T3, T4> LemonTuple<T1, T2, T3, T4, T5> LemonTuple<T1, T2, T3, T4, T5, T6> LemonTuple<T1, T2, T3, T4, T5, T6, T7> LemonTuple<T1, T2, T3, T4, T5, T6, T7, T8> LemonTuple<T1, T2, T3, T4, T5, T6, T7, T8, T9> LoaderUtils ManagedIl2CppEnumerable ManagedIl2CppEnumerator MelonAdditionalCreditsAttribute MelonAdditionalDependenciesAttribute MelonAssembly MelonAuthorColorAttribute MelonColorAttribute MelonCompatibilityLayer MelonDebug MelonEvent MelonEventBase<T> MelonEventBase<T>.MelonEventSubscriber MelonEvent<T1> MelonEvent<T1, T2> MelonEvent<T1, T2, T3> MelonEvent<T1, T2, T3, T4> MelonEvent<T1, T2, T3, T4, T5> MelonEvent<T1, T2, T3, T4, T5, T6> MelonEvent<T1, T2, T3, T4, T5, T6, T7> MelonEvent<T1, T2, T3, T4, T5, T6, T7, T8> MelonGameAttribute MelonGameVersionAttribute MelonHandler MelonIDAttribute MelonIncompatibleAssembliesAttribute MelonInfoAttribute MelonMod MelonOptionalDependenciesAttribute MelonPlatformAttribute MelonPlatformDomainAttribute MelonPlugin MelonPriorityAttribute MelonProcessAttribute Melon<T> ModBase ModTypeBase<T> NativeLibrary NativeLibrary<T> PatchShield RLog RLog.Instance RegisterTypeInIl2Cpp ResolvedMelons RottenMelon An info class for broken Melons. TomlMapper VerifyLoaderBuildAttribute VerifyLoaderVersionAttribute Structs CorePreferences.FConsoleRect Interfaces ISupportModule_From ISupportModule_To InteropSupport.Interface Enums LaunchOptions.Console.DisplayMode LaunchOptions.Core.LoadModeEnum MelonPlatformAttribute.CompatiblePlatforms MelonPlatformDomainAttribute.CompatibleDomains ModBase.Incompatibility Delegates LemonAction LemonAction<T1> LemonAction<T1, T2> LemonAction<T1, T2, T3> LemonAction<T1, T2, T3, T4> LemonAction<T1, T2, T3, T4, T5> LemonAction<T1, T2, T3, T4, T5, T6> LemonAction<T1, T2, T3, T4, T5, T6, T7> LemonAction<T1, T2, T3, T4, T5, T6, T7, T8> LemonFunc<RT> LemonFunc<T1, RT> LemonFunc<T1, T2, RT> LemonFunc<T1, T2, T3, RT> LemonFunc<T1, T2, T3, T4, RT> LemonFunc<T1, T2, T3, T4, T5, RT> LemonFunc<T1, T2, T3, T4, T5, T6, RT> LemonFunc<T1, T2, T3, T4, T5, T6, T7, RT> LemonFunc<T1, T2, T3, T4, T5, T6, T7, T8, RT>"
  },
  "api/RedLoader.Il2CppManagedEnumerable.html": {
    "href": "api/RedLoader.Il2CppManagedEnumerable.html",
    "title": "Class Il2CppManagedEnumerable | RedLoader Docs",
    "keywords": "Class Il2CppManagedEnumerable Inheritance object Il2CppManagedEnumerable Namespace: RedLoader Assembly: RedLoader.dll Syntax public class Il2CppManagedEnumerable : Object Constructors Il2CppManagedEnumerable(IEnumerable) Declaration public Il2CppManagedEnumerable(IEnumerable enumerable) Parameters Type Name Description IEnumerable enumerable Il2CppManagedEnumerable(IntPtr) Declaration public Il2CppManagedEnumerable(IntPtr ptr) Parameters Type Name Description IntPtr ptr Methods GetEnumerator() Declaration public IEnumerator GetEnumerator() Returns Type Description IEnumerator"
  },
  "api/RedLoader.Il2CppManagedEnumerator.html": {
    "href": "api/RedLoader.Il2CppManagedEnumerator.html",
    "title": "Class Il2CppManagedEnumerator | RedLoader Docs",
    "keywords": "Class Il2CppManagedEnumerator Inheritance object Il2CppManagedEnumerator Namespace: RedLoader Assembly: RedLoader.dll Syntax public class Il2CppManagedEnumerator : Object Constructors Il2CppManagedEnumerator(IEnumerator) Declaration public Il2CppManagedEnumerator(IEnumerator enumerator) Parameters Type Name Description IEnumerator enumerator Il2CppManagedEnumerator(IntPtr) Declaration public Il2CppManagedEnumerator(IntPtr ptr) Parameters Type Name Description IntPtr ptr Properties Current Declaration public Object Current { get; } Property Value Type Description Object Methods MoveNext() Declaration public bool MoveNext() Returns Type Description bool Reset() Declaration public void Reset()"
  },
  "api/RedLoader.IniFile.html": {
    "href": "api/RedLoader.IniFile.html",
    "title": "Class IniFile | RedLoader Docs",
    "keywords": "Class IniFile Inheritance object IniFile Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: RedLoader Assembly: RedLoader.dll Syntax public class IniFile Constructors IniFile(string) Declaration public IniFile(string INIPath) Parameters Type Name Description string INIPath Properties Path Declaration public string Path { get; } Property Value Type Description string Methods GetBool(string, string, bool, bool) Declaration public bool GetBool(string section, string name, bool defaultValue = false, bool autoSave = false) Parameters Type Name Description string section string name bool defaultValue bool autoSave Returns Type Description bool GetFloat(string, string, float, bool) Declaration public float GetFloat(string section, string name, float defaultValue = 0, bool autoSave = false) Parameters Type Name Description string section string name float defaultValue bool autoSave Returns Type Description float GetInt(string, string, int, bool) Declaration public int GetInt(string section, string name, int defaultValue = 0, bool autoSave = false) Parameters Type Name Description string section string name int defaultValue bool autoSave Returns Type Description int GetString(string, string, string, bool) Declaration public string GetString(string section, string name, string defaultValue = \"\", bool autoSave = false) Parameters Type Name Description string section string name string defaultValue bool autoSave Returns Type Description string HasKey(string, string) Declaration public bool HasKey(string section, string name) Parameters Type Name Description string section string name Returns Type Description bool SetBool(string, string, bool) Declaration public void SetBool(string section, string name, bool value) Parameters Type Name Description string section string name bool value SetFloat(string, string, float) Declaration public void SetFloat(string section, string name, float value) Parameters Type Name Description string section string name float value SetInt(string, string, int) Declaration public void SetInt(string section, string name, int value) Parameters Type Name Description string section string name int value SetString(string, string, string) Declaration public void SetString(string section, string name, string value) Parameters Type Name Description string section string name string value"
  },
  "api/RedLoader.InteropSupport.html": {
    "href": "api/RedLoader.InteropSupport.html",
    "title": "Class InteropSupport | RedLoader Docs",
    "keywords": "Class InteropSupport Inheritance object InteropSupport Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: RedLoader Assembly: RedLoader.dll Syntax public static class InteropSupport Methods CopyMethodInfoStruct(IntPtr) Declaration public static IntPtr CopyMethodInfoStruct(IntPtr ptr) Parameters Type Name Description IntPtr ptr Returns Type Description IntPtr GetClassPointerForType(Type) Declaration public static IntPtr GetClassPointerForType(Type type) Parameters Type Name Description Type type Returns Type Description IntPtr GetIl2CppMethodCallerCount(MethodBase) Declaration public static int? GetIl2CppMethodCallerCount(MethodBase method) Parameters Type Name Description MethodBase method Returns Type Description int? Il2CppObjectPtrToIl2CppObject<T>(IntPtr) Declaration public static T Il2CppObjectPtrToIl2CppObject<T>(IntPtr ptr) Parameters Type Name Description IntPtr ptr Returns Type Description T Type Parameters Name Description T IsGeneratedAssemblyType(Type) Declaration public static bool IsGeneratedAssemblyType(Type type) Parameters Type Name Description Type type Returns Type Description bool IsInheritedFromIl2CppObjectBase(Type) Declaration public static bool IsInheritedFromIl2CppObjectBase(Type type) Parameters Type Name Description Type type Returns Type Description bool IsInjectedType(Type) Declaration public static bool IsInjectedType(Type type) Parameters Type Name Description Type type Returns Type Description bool MethodBaseToIl2CppFieldInfo(MethodBase) Declaration public static FieldInfo MethodBaseToIl2CppFieldInfo(MethodBase method) Parameters Type Name Description MethodBase method Returns Type Description FieldInfo MethodBaseToIl2CppMethodInfoPointer(MethodBase) Declaration public static IntPtr MethodBaseToIl2CppMethodInfoPointer(MethodBase method) Parameters Type Name Description MethodBase method Returns Type Description IntPtr RegisterTypeInIl2CppDomain(Type) Declaration public static void RegisterTypeInIl2CppDomain(Type type) Parameters Type Name Description Type type RegisterTypeInIl2CppDomain(Type, bool) Declaration public static void RegisterTypeInIl2CppDomain(Type type, bool logSuccess) Parameters Type Name Description Type type bool logSuccess"
  },
  "api/RedLoader.InteropSupport.Interface.html": {
    "href": "api/RedLoader.InteropSupport.Interface.html",
    "title": "Interface InteropSupport.Interface | RedLoader Docs",
    "keywords": "Interface InteropSupport.Interface Namespace: RedLoader Assembly: RedLoader.dll Syntax public interface InteropSupport.Interface Methods CopyMethodInfoStruct(IntPtr) Declaration IntPtr CopyMethodInfoStruct(IntPtr ptr) Parameters Type Name Description IntPtr ptr Returns Type Description IntPtr GetClassPointerForType(Type) Declaration IntPtr GetClassPointerForType(Type type) Parameters Type Name Description Type type Returns Type Description IntPtr GetIl2CppMethodCallerCount(MethodBase) Declaration int? GetIl2CppMethodCallerCount(MethodBase method) Parameters Type Name Description MethodBase method Returns Type Description int? IsInheritedFromIl2CppObjectBase(Type) Declaration bool IsInheritedFromIl2CppObjectBase(Type type) Parameters Type Name Description Type type Returns Type Description bool IsInjectedType(Type) Declaration bool IsInjectedType(Type type) Parameters Type Name Description Type type Returns Type Description bool MethodBaseToIl2CppFieldInfo(MethodBase) Declaration FieldInfo MethodBaseToIl2CppFieldInfo(MethodBase method) Parameters Type Name Description MethodBase method Returns Type Description FieldInfo RegisterTypeInIl2CppDomain(Type, bool) Declaration void RegisterTypeInIl2CppDomain(Type type, bool logSuccess) Parameters Type Name Description Type type bool logSuccess"
  },
  "api/RedLoader.ISupportModule_From.html": {
    "href": "api/RedLoader.ISupportModule_From.html",
    "title": "Interface ISupportModule_From | RedLoader Docs",
    "keywords": "Interface ISupportModule_From Namespace: RedLoader Assembly: RedLoader.dll Syntax public interface ISupportModule_From Methods DefiniteQuit() Declaration void DefiniteQuit() FixedUpdate() Declaration void FixedUpdate() LateUpdate() Declaration void LateUpdate() OnApplicationLateStart() Declaration void OnApplicationLateStart() OnGUI() Declaration void OnGUI() OnSceneWasInitialized(int, string) Declaration void OnSceneWasInitialized(int buildIndex, string sceneName) Parameters Type Name Description int buildIndex string sceneName OnSceneWasLoaded(int, string) Declaration void OnSceneWasLoaded(int buildIndex, string sceneName) Parameters Type Name Description int buildIndex string sceneName OnSceneWasUnloaded(int, string) Declaration void OnSceneWasUnloaded(int buildIndex, string sceneName) Parameters Type Name Description int buildIndex string sceneName Quit() Declaration void Quit() SetInteropSupportInterface(Interface) Declaration void SetInteropSupportInterface(InteropSupport.Interface interop) Parameters Type Name Description InteropSupport.Interface interop Update() Declaration void Update()"
  },
  "api/RedLoader.ISupportModule_To.html": {
    "href": "api/RedLoader.ISupportModule_To.html",
    "title": "Interface ISupportModule_To | RedLoader Docs",
    "keywords": "Interface ISupportModule_To Namespace: RedLoader Assembly: RedLoader.dll Syntax public interface ISupportModule_To Methods StartCoroutine(IEnumerator) Declaration object StartCoroutine(IEnumerator coroutine) Parameters Type Name Description IEnumerator coroutine Returns Type Description object StopCoroutine(object) Declaration void StopCoroutine(object coroutineToken) Parameters Type Name Description object coroutineToken UnityDebugLog(string) Declaration void UnityDebugLog(string msg) Parameters Type Name Description string msg"
  },
  "api/RedLoader.LaunchOptions.AnalyticsBlocker.html": {
    "href": "api/RedLoader.LaunchOptions.AnalyticsBlocker.html",
    "title": "Class LaunchOptions.AnalyticsBlocker | RedLoader Docs",
    "keywords": "Class LaunchOptions.AnalyticsBlocker Inheritance object LaunchOptions.AnalyticsBlocker Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: RedLoader Assembly: RedLoader.dll Syntax public static class LaunchOptions.AnalyticsBlocker Properties ShouldDAB Declaration public static bool ShouldDAB { get; } Property Value Type Description bool"
  },
  "api/RedLoader.LaunchOptions.Console.DisplayMode.html": {
    "href": "api/RedLoader.LaunchOptions.Console.DisplayMode.html",
    "title": "Enum LaunchOptions.Console.DisplayMode | RedLoader Docs",
    "keywords": "Enum LaunchOptions.Console.DisplayMode Namespace: RedLoader Assembly: RedLoader.dll Syntax public enum LaunchOptions.Console.DisplayMode Fields Name Description LEMON MAGENTA NORMAL RAINBOW RANDOMRAINBOW Extension Methods EnumExtensions.HasFlag(Enum, Enum)"
  },
  "api/RedLoader.LaunchOptions.Console.html": {
    "href": "api/RedLoader.LaunchOptions.Console.html",
    "title": "Class LaunchOptions.Console | RedLoader Docs",
    "keywords": "Class LaunchOptions.Console Inheritance object LaunchOptions.Console Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: RedLoader Assembly: RedLoader.dll Syntax public static class LaunchOptions.Console Properties AlwaysOnTop Declaration public static bool AlwaysOnTop { get; } Property Value Type Description bool CleanUnityLogs Declaration public static bool CleanUnityLogs { get; } Property Value Type Description bool HideWarnings Declaration public static bool HideWarnings { get; } Property Value Type Description bool Mode Declaration public static LaunchOptions.Console.DisplayMode Mode { get; } Property Value Type Description LaunchOptions.Console.DisplayMode ShouldHide Declaration public static bool ShouldHide { get; } Property Value Type Description bool ShouldSetTitle Declaration public static bool ShouldSetTitle { get; } Property Value Type Description bool"
  },
  "api/RedLoader.LaunchOptions.Core.html": {
    "href": "api/RedLoader.LaunchOptions.Core.html",
    "title": "Class LaunchOptions.Core | RedLoader Docs",
    "keywords": "Class LaunchOptions.Core Inheritance object LaunchOptions.Core Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: RedLoader Assembly: RedLoader.dll Syntax public static class LaunchOptions.Core Properties IsDebug Declaration public static bool IsDebug { get; } Property Value Type Description bool LoadMode_Mods Declaration public static LaunchOptions.Core.LoadModeEnum LoadMode_Mods { get; } Property Value Type Description LaunchOptions.Core.LoadModeEnum LoadMode_Plugins Declaration public static LaunchOptions.Core.LoadModeEnum LoadMode_Plugins { get; } Property Value Type Description LaunchOptions.Core.LoadModeEnum QuitFix Declaration public static bool QuitFix { get; } Property Value Type Description bool ShouldDisplayAnalyticsBlocker Declaration public static bool ShouldDisplayAnalyticsBlocker { get; } Property Value Type Description bool StartScreen Declaration public static bool StartScreen { get; } Property Value Type Description bool UnityVersion Declaration public static string UnityVersion { get; } Property Value Type Description string UserWantsDebugger Declaration public static bool UserWantsDebugger { get; } Property Value Type Description bool"
  },
  "api/RedLoader.LaunchOptions.Core.LoadModeEnum.html": {
    "href": "api/RedLoader.LaunchOptions.Core.LoadModeEnum.html",
    "title": "Enum LaunchOptions.Core.LoadModeEnum | RedLoader Docs",
    "keywords": "Enum LaunchOptions.Core.LoadModeEnum Namespace: RedLoader Assembly: RedLoader.dll Syntax public enum LaunchOptions.Core.LoadModeEnum Fields Name Description BOTH DEV NORMAL Extension Methods EnumExtensions.HasFlag(Enum, Enum)"
  },
  "api/RedLoader.LaunchOptions.html": {
    "href": "api/RedLoader.LaunchOptions.html",
    "title": "Class LaunchOptions | RedLoader Docs",
    "keywords": "Class LaunchOptions Inheritance object LaunchOptions Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: RedLoader Assembly: RedLoader.dll Syntax public static class LaunchOptions"
  },
  "api/RedLoader.LaunchOptions.Il2CppAssemblyGenerator.html": {
    "href": "api/RedLoader.LaunchOptions.Il2CppAssemblyGenerator.html",
    "title": "Class LaunchOptions.Il2CppAssemblyGenerator | RedLoader Docs",
    "keywords": "Class LaunchOptions.Il2CppAssemblyGenerator Inheritance object LaunchOptions.Il2CppAssemblyGenerator Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: RedLoader Assembly: RedLoader.dll Syntax public static class LaunchOptions.Il2CppAssemblyGenerator Properties DisableDeobfMapIntegrityCheck Declaration public static bool DisableDeobfMapIntegrityCheck { get; } Property Value Type Description bool ForceRegeneration Declaration public static bool ForceRegeneration { get; } Property Value Type Description bool ForceRegex Declaration public static string ForceRegex { get; } Property Value Type Description string ForceVersion_Dumper Declaration public static string ForceVersion_Dumper { get; } Property Value Type Description string OfflineMode Declaration public static bool OfflineMode { get; } Property Value Type Description bool"
  },
  "api/RedLoader.LaunchOptions.Logger.html": {
    "href": "api/RedLoader.LaunchOptions.Logger.html",
    "title": "Class LaunchOptions.Logger | RedLoader Docs",
    "keywords": "Class LaunchOptions.Logger Inheritance object LaunchOptions.Logger Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: RedLoader Assembly: RedLoader.dll Syntax public static class LaunchOptions.Logger Properties MaxErrors Declaration public static int MaxErrors { get; } Property Value Type Description int MaxLogs Declaration public static int MaxLogs { get; } Property Value Type Description int MaxWarnings Declaration public static int MaxWarnings { get; } Property Value Type Description int"
  },
  "api/RedLoader.LaunchOptions.SonsSdk.html": {
    "href": "api/RedLoader.LaunchOptions.SonsSdk.html",
    "title": "Class LaunchOptions.SonsSdk | RedLoader Docs",
    "keywords": "Class LaunchOptions.SonsSdk Inheritance object LaunchOptions.SonsSdk Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: RedLoader Assembly: RedLoader.dll Syntax public static class LaunchOptions.SonsSdk Properties LoadIntoMain Immediately loads the game into a test environment world. Declaration public static bool LoadIntoMain { get; } Property Value Type Description bool LoadSaveGame Immediately loads the game into a savegame (specified by savegame id). Declaration public static string LoadSaveGame { get; } Property Value Type Description string Examples --savegame 1440719049"
  },
  "api/RedLoader.LemonAction-1.html": {
    "href": "api/RedLoader.LemonAction-1.html",
    "title": "Delegate LemonAction<T1> | RedLoader Docs",
    "keywords": "Delegate LemonAction<T1> Namespace: RedLoader Assembly: RedLoader.dll Syntax public delegate void LemonAction<in T1>(T1 arg1) Parameters Type Name Description T1 arg1 Type Parameters Name Description T1 Constructors LemonAction(object, IntPtr) Declaration public LemonAction(object @object, IntPtr method) Parameters Type Name Description object object IntPtr method Methods BeginInvoke(T1, AsyncCallback, object) Declaration public virtual IAsyncResult BeginInvoke(T1 arg1, AsyncCallback callback, object @object) Parameters Type Name Description T1 arg1 AsyncCallback callback object object Returns Type Description IAsyncResult EndInvoke(IAsyncResult) Declaration public virtual void EndInvoke(IAsyncResult result) Parameters Type Name Description IAsyncResult result Invoke(T1) Declaration public virtual void Invoke(T1 arg1) Parameters Type Name Description T1 arg1 Extension Methods LoaderUtils.GetFunctionPointer(Delegate)"
  },
  "api/RedLoader.LemonAction-2.html": {
    "href": "api/RedLoader.LemonAction-2.html",
    "title": "Delegate LemonAction<T1, T2> | RedLoader Docs",
    "keywords": "Delegate LemonAction<T1, T2> Namespace: RedLoader Assembly: RedLoader.dll Syntax public delegate void LemonAction<in T1, in T2>(T1 arg1, T2 arg2) Parameters Type Name Description T1 arg1 T2 arg2 Type Parameters Name Description T1 T2 Constructors LemonAction(object, IntPtr) Declaration public LemonAction(object @object, IntPtr method) Parameters Type Name Description object object IntPtr method Methods BeginInvoke(T1, T2, AsyncCallback, object) Declaration public virtual IAsyncResult BeginInvoke(T1 arg1, T2 arg2, AsyncCallback callback, object @object) Parameters Type Name Description T1 arg1 T2 arg2 AsyncCallback callback object object Returns Type Description IAsyncResult EndInvoke(IAsyncResult) Declaration public virtual void EndInvoke(IAsyncResult result) Parameters Type Name Description IAsyncResult result Invoke(T1, T2) Declaration public virtual void Invoke(T1 arg1, T2 arg2) Parameters Type Name Description T1 arg1 T2 arg2 Extension Methods LoaderUtils.GetFunctionPointer(Delegate)"
  },
  "api/RedLoader.LemonAction-3.html": {
    "href": "api/RedLoader.LemonAction-3.html",
    "title": "Delegate LemonAction<T1, T2, T3> | RedLoader Docs",
    "keywords": "Delegate LemonAction<T1, T2, T3> Namespace: RedLoader Assembly: RedLoader.dll Syntax public delegate void LemonAction<in T1, in T2, in T3>(T1 arg1, T2 arg2, T3 arg3) Parameters Type Name Description T1 arg1 T2 arg2 T3 arg3 Type Parameters Name Description T1 T2 T3 Constructors LemonAction(object, IntPtr) Declaration public LemonAction(object @object, IntPtr method) Parameters Type Name Description object object IntPtr method Methods BeginInvoke(T1, T2, T3, AsyncCallback, object) Declaration public virtual IAsyncResult BeginInvoke(T1 arg1, T2 arg2, T3 arg3, AsyncCallback callback, object @object) Parameters Type Name Description T1 arg1 T2 arg2 T3 arg3 AsyncCallback callback object object Returns Type Description IAsyncResult EndInvoke(IAsyncResult) Declaration public virtual void EndInvoke(IAsyncResult result) Parameters Type Name Description IAsyncResult result Invoke(T1, T2, T3) Declaration public virtual void Invoke(T1 arg1, T2 arg2, T3 arg3) Parameters Type Name Description T1 arg1 T2 arg2 T3 arg3 Extension Methods LoaderUtils.GetFunctionPointer(Delegate)"
  },
  "api/RedLoader.LemonAction-4.html": {
    "href": "api/RedLoader.LemonAction-4.html",
    "title": "Delegate LemonAction<T1, T2, T3, T4> | RedLoader Docs",
    "keywords": "Delegate LemonAction<T1, T2, T3, T4> Namespace: RedLoader Assembly: RedLoader.dll Syntax public delegate void LemonAction<in T1, in T2, in T3, in T4>(T1 arg1, T2 arg2, T3 arg3, T4 arg4) Parameters Type Name Description T1 arg1 T2 arg2 T3 arg3 T4 arg4 Type Parameters Name Description T1 T2 T3 T4 Constructors LemonAction(object, IntPtr) Declaration public LemonAction(object @object, IntPtr method) Parameters Type Name Description object object IntPtr method Methods BeginInvoke(T1, T2, T3, T4, AsyncCallback, object) Declaration public virtual IAsyncResult BeginInvoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, AsyncCallback callback, object @object) Parameters Type Name Description T1 arg1 T2 arg2 T3 arg3 T4 arg4 AsyncCallback callback object object Returns Type Description IAsyncResult EndInvoke(IAsyncResult) Declaration public virtual void EndInvoke(IAsyncResult result) Parameters Type Name Description IAsyncResult result Invoke(T1, T2, T3, T4) Declaration public virtual void Invoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4) Parameters Type Name Description T1 arg1 T2 arg2 T3 arg3 T4 arg4 Extension Methods LoaderUtils.GetFunctionPointer(Delegate)"
  },
  "api/RedLoader.LemonAction-5.html": {
    "href": "api/RedLoader.LemonAction-5.html",
    "title": "Delegate LemonAction<T1, T2, T3, T4, T5> | RedLoader Docs",
    "keywords": "Delegate LemonAction<T1, T2, T3, T4, T5> Namespace: RedLoader Assembly: RedLoader.dll Syntax public delegate void LemonAction<in T1, in T2, in T3, in T4, in T5>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5) Parameters Type Name Description T1 arg1 T2 arg2 T3 arg3 T4 arg4 T5 arg5 Type Parameters Name Description T1 T2 T3 T4 T5 Constructors LemonAction(object, IntPtr) Declaration public LemonAction(object @object, IntPtr method) Parameters Type Name Description object object IntPtr method Methods BeginInvoke(T1, T2, T3, T4, T5, AsyncCallback, object) Declaration public virtual IAsyncResult BeginInvoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, AsyncCallback callback, object @object) Parameters Type Name Description T1 arg1 T2 arg2 T3 arg3 T4 arg4 T5 arg5 AsyncCallback callback object object Returns Type Description IAsyncResult EndInvoke(IAsyncResult) Declaration public virtual void EndInvoke(IAsyncResult result) Parameters Type Name Description IAsyncResult result Invoke(T1, T2, T3, T4, T5) Declaration public virtual void Invoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5) Parameters Type Name Description T1 arg1 T2 arg2 T3 arg3 T4 arg4 T5 arg5 Extension Methods LoaderUtils.GetFunctionPointer(Delegate)"
  },
  "api/RedLoader.LemonAction-6.html": {
    "href": "api/RedLoader.LemonAction-6.html",
    "title": "Delegate LemonAction<T1, T2, T3, T4, T5, T6> | RedLoader Docs",
    "keywords": "Delegate LemonAction<T1, T2, T3, T4, T5, T6> Namespace: RedLoader Assembly: RedLoader.dll Syntax public delegate void LemonAction<in T1, in T2, in T3, in T4, in T5, in T6>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6) Parameters Type Name Description T1 arg1 T2 arg2 T3 arg3 T4 arg4 T5 arg5 T6 arg6 Type Parameters Name Description T1 T2 T3 T4 T5 T6 Constructors LemonAction(object, IntPtr) Declaration public LemonAction(object @object, IntPtr method) Parameters Type Name Description object object IntPtr method Methods BeginInvoke(T1, T2, T3, T4, T5, T6, AsyncCallback, object) Declaration public virtual IAsyncResult BeginInvoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, AsyncCallback callback, object @object) Parameters Type Name Description T1 arg1 T2 arg2 T3 arg3 T4 arg4 T5 arg5 T6 arg6 AsyncCallback callback object object Returns Type Description IAsyncResult EndInvoke(IAsyncResult) Declaration public virtual void EndInvoke(IAsyncResult result) Parameters Type Name Description IAsyncResult result Invoke(T1, T2, T3, T4, T5, T6) Declaration public virtual void Invoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6) Parameters Type Name Description T1 arg1 T2 arg2 T3 arg3 T4 arg4 T5 arg5 T6 arg6 Extension Methods LoaderUtils.GetFunctionPointer(Delegate)"
  },
  "api/RedLoader.LemonAction-7.html": {
    "href": "api/RedLoader.LemonAction-7.html",
    "title": "Delegate LemonAction<T1, T2, T3, T4, T5, T6, T7> | RedLoader Docs",
    "keywords": "Delegate LemonAction<T1, T2, T3, T4, T5, T6, T7> Namespace: RedLoader Assembly: RedLoader.dll Syntax public delegate void LemonAction<in T1, in T2, in T3, in T4, in T5, in T6, in T7>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7) Parameters Type Name Description T1 arg1 T2 arg2 T3 arg3 T4 arg4 T5 arg5 T6 arg6 T7 arg7 Type Parameters Name Description T1 T2 T3 T4 T5 T6 T7 Constructors LemonAction(object, IntPtr) Declaration public LemonAction(object @object, IntPtr method) Parameters Type Name Description object object IntPtr method Methods BeginInvoke(T1, T2, T3, T4, T5, T6, T7, AsyncCallback, object) Declaration public virtual IAsyncResult BeginInvoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, AsyncCallback callback, object @object) Parameters Type Name Description T1 arg1 T2 arg2 T3 arg3 T4 arg4 T5 arg5 T6 arg6 T7 arg7 AsyncCallback callback object object Returns Type Description IAsyncResult EndInvoke(IAsyncResult) Declaration public virtual void EndInvoke(IAsyncResult result) Parameters Type Name Description IAsyncResult result Invoke(T1, T2, T3, T4, T5, T6, T7) Declaration public virtual void Invoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7) Parameters Type Name Description T1 arg1 T2 arg2 T3 arg3 T4 arg4 T5 arg5 T6 arg6 T7 arg7 Extension Methods LoaderUtils.GetFunctionPointer(Delegate)"
  },
  "api/RedLoader.LemonAction-8.html": {
    "href": "api/RedLoader.LemonAction-8.html",
    "title": "Delegate LemonAction<T1, T2, T3, T4, T5, T6, T7, T8> | RedLoader Docs",
    "keywords": "Delegate LemonAction<T1, T2, T3, T4, T5, T6, T7, T8> Namespace: RedLoader Assembly: RedLoader.dll Syntax public delegate void LemonAction<in T1, in T2, in T3, in T4, in T5, in T6, in T7, in T8>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8) Parameters Type Name Description T1 arg1 T2 arg2 T3 arg3 T4 arg4 T5 arg5 T6 arg6 T7 arg7 T8 arg8 Type Parameters Name Description T1 T2 T3 T4 T5 T6 T7 T8 Constructors LemonAction(object, IntPtr) Declaration public LemonAction(object @object, IntPtr method) Parameters Type Name Description object object IntPtr method Methods BeginInvoke(T1, T2, T3, T4, T5, T6, T7, T8, AsyncCallback, object) Declaration public virtual IAsyncResult BeginInvoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, AsyncCallback callback, object @object) Parameters Type Name Description T1 arg1 T2 arg2 T3 arg3 T4 arg4 T5 arg5 T6 arg6 T7 arg7 T8 arg8 AsyncCallback callback object object Returns Type Description IAsyncResult EndInvoke(IAsyncResult) Declaration public virtual void EndInvoke(IAsyncResult result) Parameters Type Name Description IAsyncResult result Invoke(T1, T2, T3, T4, T5, T6, T7, T8) Declaration public virtual void Invoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8) Parameters Type Name Description T1 arg1 T2 arg2 T3 arg3 T4 arg4 T5 arg5 T6 arg6 T7 arg7 T8 arg8 Extension Methods LoaderUtils.GetFunctionPointer(Delegate)"
  },
  "api/RedLoader.LemonAction.html": {
    "href": "api/RedLoader.LemonAction.html",
    "title": "Delegate LemonAction | RedLoader Docs",
    "keywords": "Delegate LemonAction Namespace: RedLoader Assembly: RedLoader.dll Syntax public delegate void LemonAction() Constructors LemonAction(object, IntPtr) Declaration public LemonAction(object @object, IntPtr method) Parameters Type Name Description object object IntPtr method Methods BeginInvoke(AsyncCallback, object) Declaration public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object @object) Parameters Type Name Description AsyncCallback callback object object Returns Type Description IAsyncResult EndInvoke(IAsyncResult) Declaration public virtual void EndInvoke(IAsyncResult result) Parameters Type Name Description IAsyncResult result Invoke() Declaration public virtual void Invoke() Extension Methods LoaderUtils.GetFunctionPointer(Delegate)"
  },
  "api/RedLoader.LemonArraySegment-1.html": {
    "href": "api/RedLoader.LemonArraySegment-1.html",
    "title": "Class LemonArraySegment<T> | RedLoader Docs",
    "keywords": "Class LemonArraySegment<T> Inheritance object LemonArraySegment<T> Implements IList<T> ICollection<T> IEnumerable<T> IEnumerable Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) Namespace: RedLoader Assembly: RedLoader.dll Syntax public class LemonArraySegment<T> : IList<T>, ICollection<T>, IEnumerable<T>, IEnumerable Type Parameters Name Description T Constructors LemonArraySegment(T[]) Initializes a new instance of the LemonArraySegment<T> structure that delimits all the elements in the specified array. Declaration public LemonArraySegment(T[] array) Parameters Type Name Description T[] array The array to wrap. Exceptions Type Condition ArgumentNullException array is null. LemonArraySegment(T[], int, int) Initializes a new instance of the LemonArraySegment<T> structure that delimits the specified range of the elements in the specified array. Declaration public LemonArraySegment(T[] array, int offset, int count) Parameters Type Name Description T[] array The array containing the range of elements to delimit. int offset The zero-based index of the first element in the range. int count The number of elements in the range. Exceptions Type Condition ArgumentNullException array is null. ArgumentOutOfRangeException offset or count is less than 0. ArgumentException offset and count do not specify a valid range in array. Properties Array Gets the original array containing the range of elements that the array segment delimits. Declaration public T[] Array { get; } Property Value Type Description T[] The original array that was passed to the constructor, and that contains the range delimited by the LemonArraySegment<T>. Count Gets the number of elements in the range delimited by the array segment. Declaration public int Count { get; } Property Value Type Description int The number of elements in the range delimited by the LemonArraySegment<T>. Offset Gets the position of the first element in the range delimited by the array segment, relative to the start of the original array. Declaration public int Offset { get; } Property Value Type Description int The position of the first element in the range delimited by the LemonArraySegment<T>, relative to the start of the original array. Methods Equals(LemonArraySegment<T>) Determines whether the specified LemonArraySegment<T> structure is equal to the current instance. Declaration public bool Equals(LemonArraySegment<T> obj) Parameters Type Name Description LemonArraySegment<T> obj The structure to compare with the current instance. Returns Type Description bool true if the specified LemonArraySegment<T> structure is equal to the current instance; otherwise, false. Equals(object) Determines whether the specified object is equal to the current instance. Declaration public override bool Equals(object obj) Parameters Type Name Description object obj The object to be compared with the current instance. Returns Type Description bool true if the specified object is a LemonArraySegment<T> structure and is equal to the current instance; otherwise, false. Overrides object.Equals(object) GetHashCode() Returns the hash code for the current instance. Declaration public override int GetHashCode() Returns Type Description int A 32-bit signed integer hash code. Overrides object.GetHashCode() Operators operator ==(LemonArraySegment<T>, LemonArraySegment<T>) Indicates whether two LemonArraySegment<T> structures are equal. Declaration public static bool operator ==(LemonArraySegment<T> a, LemonArraySegment<T> b) Parameters Type Name Description LemonArraySegment<T> a The structure on the left side of the equality operator. LemonArraySegment<T> b The structure on the right side of the equality operator. Returns Type Description bool true if a is equal to b; otherwise, false. operator !=(LemonArraySegment<T>, LemonArraySegment<T>) Indicates whether two LemonArraySegment<T> structures are unequal. Declaration public static bool operator !=(LemonArraySegment<T> a, LemonArraySegment<T> b) Parameters Type Name Description LemonArraySegment<T> a The structure on the left side of the inequality operator. LemonArraySegment<T> b The structure on the right side of the inequality operator. Returns Type Description bool true if a is not equal to b; otherwise, false. Implements IList<T> ICollection<T> IEnumerable<T> IEnumerable Extension Methods Extensions.AnyOfType<TSource>(IEnumerable<TSource>, Type) CollectionExtensions.WrapToIl2Cpp(IEnumerable)"
  },
  "api/RedLoader.LemonEnumerator-1.html": {
    "href": "api/RedLoader.LemonEnumerator-1.html",
    "title": "Class LemonEnumerator<T> | RedLoader Docs",
    "keywords": "Class LemonEnumerator<T> Inheritance object LemonEnumerator<T> Implements IEnumerator<T> IEnumerator IDisposable IEnumerable<T> IEnumerable Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: RedLoader Assembly: RedLoader.dll Syntax public class LemonEnumerator<T> : IEnumerator<T>, IEnumerator, IDisposable, IEnumerable<T>, IEnumerable Type Parameters Name Description T Constructors LemonEnumerator(IList<T>) Creates a new instance of LemonEnumerator<T> with a new copy of 'lemons'. Declaration public LemonEnumerator(IList<T> lemons) Parameters Type Name Description IList<T> lemons LemonEnumerator(T[]) Creates a new instance of LemonEnumerator<T> with a new copy of 'lemons'. Declaration public LemonEnumerator(T[] lemons) Parameters Type Name Description T[] lemons Properties Current Declaration public T Current { get; } Property Value Type Description T Methods Dispose() Declaration public void Dispose() GetEnumerator() Declaration public IEnumerator<T> GetEnumerator() Returns Type Description IEnumerator<T> MoveNext() Declaration public bool MoveNext() Returns Type Description bool Reset() Declaration public void Reset() Implements IEnumerator<T> IEnumerator IDisposable IEnumerable<T> IEnumerable Extension Methods Extensions.AnyOfType<TSource>(IEnumerable<TSource>, Type) CollectionExtensions.WrapToIl2Cpp(IEnumerable) CollectionExtensions.WrapToIl2Cpp(IEnumerator) CoroutineExtensions.RunCoro(IEnumerator)"
  },
  "api/RedLoader.LemonFunc-1.html": {
    "href": "api/RedLoader.LemonFunc-1.html",
    "title": "Delegate LemonFunc<RT> | RedLoader Docs",
    "keywords": "Delegate LemonFunc<RT> Namespace: RedLoader Assembly: RedLoader.dll Syntax public delegate RT LemonFunc<RT>() Returns Type Description RT Type Parameters Name Description RT Constructors LemonFunc(object, IntPtr) Declaration public LemonFunc(object @object, IntPtr method) Parameters Type Name Description object object IntPtr method Methods BeginInvoke(AsyncCallback, object) Declaration public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object @object) Parameters Type Name Description AsyncCallback callback object object Returns Type Description IAsyncResult EndInvoke(IAsyncResult) Declaration public virtual RT EndInvoke(IAsyncResult result) Parameters Type Name Description IAsyncResult result Returns Type Description RT Invoke() Declaration public virtual RT Invoke() Returns Type Description RT Extension Methods LoaderUtils.GetFunctionPointer(Delegate)"
  },
  "api/RedLoader.LemonFunc-2.html": {
    "href": "api/RedLoader.LemonFunc-2.html",
    "title": "Delegate LemonFunc<T1, RT> | RedLoader Docs",
    "keywords": "Delegate LemonFunc<T1, RT> Namespace: RedLoader Assembly: RedLoader.dll Syntax public delegate RT LemonFunc<in T1, RT>(T1 arg1) Parameters Type Name Description T1 arg1 Returns Type Description RT Type Parameters Name Description T1 RT Constructors LemonFunc(object, IntPtr) Declaration public LemonFunc(object @object, IntPtr method) Parameters Type Name Description object object IntPtr method Methods BeginInvoke(T1, AsyncCallback, object) Declaration public virtual IAsyncResult BeginInvoke(T1 arg1, AsyncCallback callback, object @object) Parameters Type Name Description T1 arg1 AsyncCallback callback object object Returns Type Description IAsyncResult EndInvoke(IAsyncResult) Declaration public virtual RT EndInvoke(IAsyncResult result) Parameters Type Name Description IAsyncResult result Returns Type Description RT Invoke(T1) Declaration public virtual RT Invoke(T1 arg1) Parameters Type Name Description T1 arg1 Returns Type Description RT Extension Methods LoaderUtils.GetFunctionPointer(Delegate)"
  },
  "api/RedLoader.LemonFunc-3.html": {
    "href": "api/RedLoader.LemonFunc-3.html",
    "title": "Delegate LemonFunc<T1, T2, RT> | RedLoader Docs",
    "keywords": "Delegate LemonFunc<T1, T2, RT> Namespace: RedLoader Assembly: RedLoader.dll Syntax public delegate RT LemonFunc<in T1, in T2, RT>(T1 arg1, T2 arg2) Parameters Type Name Description T1 arg1 T2 arg2 Returns Type Description RT Type Parameters Name Description T1 T2 RT Constructors LemonFunc(object, IntPtr) Declaration public LemonFunc(object @object, IntPtr method) Parameters Type Name Description object object IntPtr method Methods BeginInvoke(T1, T2, AsyncCallback, object) Declaration public virtual IAsyncResult BeginInvoke(T1 arg1, T2 arg2, AsyncCallback callback, object @object) Parameters Type Name Description T1 arg1 T2 arg2 AsyncCallback callback object object Returns Type Description IAsyncResult EndInvoke(IAsyncResult) Declaration public virtual RT EndInvoke(IAsyncResult result) Parameters Type Name Description IAsyncResult result Returns Type Description RT Invoke(T1, T2) Declaration public virtual RT Invoke(T1 arg1, T2 arg2) Parameters Type Name Description T1 arg1 T2 arg2 Returns Type Description RT Extension Methods LoaderUtils.GetFunctionPointer(Delegate)"
  },
  "api/RedLoader.LemonFunc-4.html": {
    "href": "api/RedLoader.LemonFunc-4.html",
    "title": "Delegate LemonFunc<T1, T2, T3, RT> | RedLoader Docs",
    "keywords": "Delegate LemonFunc<T1, T2, T3, RT> Namespace: RedLoader Assembly: RedLoader.dll Syntax public delegate RT LemonFunc<in T1, in T2, in T3, RT>(T1 arg1, T2 arg2, T3 arg3) Parameters Type Name Description T1 arg1 T2 arg2 T3 arg3 Returns Type Description RT Type Parameters Name Description T1 T2 T3 RT Constructors LemonFunc(object, IntPtr) Declaration public LemonFunc(object @object, IntPtr method) Parameters Type Name Description object object IntPtr method Methods BeginInvoke(T1, T2, T3, AsyncCallback, object) Declaration public virtual IAsyncResult BeginInvoke(T1 arg1, T2 arg2, T3 arg3, AsyncCallback callback, object @object) Parameters Type Name Description T1 arg1 T2 arg2 T3 arg3 AsyncCallback callback object object Returns Type Description IAsyncResult EndInvoke(IAsyncResult) Declaration public virtual RT EndInvoke(IAsyncResult result) Parameters Type Name Description IAsyncResult result Returns Type Description RT Invoke(T1, T2, T3) Declaration public virtual RT Invoke(T1 arg1, T2 arg2, T3 arg3) Parameters Type Name Description T1 arg1 T2 arg2 T3 arg3 Returns Type Description RT Extension Methods LoaderUtils.GetFunctionPointer(Delegate)"
  },
  "api/RedLoader.LemonFunc-5.html": {
    "href": "api/RedLoader.LemonFunc-5.html",
    "title": "Delegate LemonFunc<T1, T2, T3, T4, RT> | RedLoader Docs",
    "keywords": "Delegate LemonFunc<T1, T2, T3, T4, RT> Namespace: RedLoader Assembly: RedLoader.dll Syntax public delegate RT LemonFunc<in T1, in T2, in T3, in T4, RT>(T1 arg1, T2 arg2, T3 arg3, T4 arg4) Parameters Type Name Description T1 arg1 T2 arg2 T3 arg3 T4 arg4 Returns Type Description RT Type Parameters Name Description T1 T2 T3 T4 RT Constructors LemonFunc(object, IntPtr) Declaration public LemonFunc(object @object, IntPtr method) Parameters Type Name Description object object IntPtr method Methods BeginInvoke(T1, T2, T3, T4, AsyncCallback, object) Declaration public virtual IAsyncResult BeginInvoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, AsyncCallback callback, object @object) Parameters Type Name Description T1 arg1 T2 arg2 T3 arg3 T4 arg4 AsyncCallback callback object object Returns Type Description IAsyncResult EndInvoke(IAsyncResult) Declaration public virtual RT EndInvoke(IAsyncResult result) Parameters Type Name Description IAsyncResult result Returns Type Description RT Invoke(T1, T2, T3, T4) Declaration public virtual RT Invoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4) Parameters Type Name Description T1 arg1 T2 arg2 T3 arg3 T4 arg4 Returns Type Description RT Extension Methods LoaderUtils.GetFunctionPointer(Delegate)"
  },
  "api/RedLoader.LemonFunc-6.html": {
    "href": "api/RedLoader.LemonFunc-6.html",
    "title": "Delegate LemonFunc<T1, T2, T3, T4, T5, RT> | RedLoader Docs",
    "keywords": "Delegate LemonFunc<T1, T2, T3, T4, T5, RT> Namespace: RedLoader Assembly: RedLoader.dll Syntax public delegate RT LemonFunc<in T1, in T2, in T3, in T4, in T5, RT>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5) Parameters Type Name Description T1 arg1 T2 arg2 T3 arg3 T4 arg4 T5 arg5 Returns Type Description RT Type Parameters Name Description T1 T2 T3 T4 T5 RT Constructors LemonFunc(object, IntPtr) Declaration public LemonFunc(object @object, IntPtr method) Parameters Type Name Description object object IntPtr method Methods BeginInvoke(T1, T2, T3, T4, T5, AsyncCallback, object) Declaration public virtual IAsyncResult BeginInvoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, AsyncCallback callback, object @object) Parameters Type Name Description T1 arg1 T2 arg2 T3 arg3 T4 arg4 T5 arg5 AsyncCallback callback object object Returns Type Description IAsyncResult EndInvoke(IAsyncResult) Declaration public virtual RT EndInvoke(IAsyncResult result) Parameters Type Name Description IAsyncResult result Returns Type Description RT Invoke(T1, T2, T3, T4, T5) Declaration public virtual RT Invoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5) Parameters Type Name Description T1 arg1 T2 arg2 T3 arg3 T4 arg4 T5 arg5 Returns Type Description RT Extension Methods LoaderUtils.GetFunctionPointer(Delegate)"
  },
  "api/RedLoader.LemonFunc-7.html": {
    "href": "api/RedLoader.LemonFunc-7.html",
    "title": "Delegate LemonFunc<T1, T2, T3, T4, T5, T6, RT> | RedLoader Docs",
    "keywords": "Delegate LemonFunc<T1, T2, T3, T4, T5, T6, RT> Namespace: RedLoader Assembly: RedLoader.dll Syntax public delegate RT LemonFunc<in T1, in T2, in T3, in T4, in T5, in T6, RT>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6) Parameters Type Name Description T1 arg1 T2 arg2 T3 arg3 T4 arg4 T5 arg5 T6 arg6 Returns Type Description RT Type Parameters Name Description T1 T2 T3 T4 T5 T6 RT Constructors LemonFunc(object, IntPtr) Declaration public LemonFunc(object @object, IntPtr method) Parameters Type Name Description object object IntPtr method Methods BeginInvoke(T1, T2, T3, T4, T5, T6, AsyncCallback, object) Declaration public virtual IAsyncResult BeginInvoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, AsyncCallback callback, object @object) Parameters Type Name Description T1 arg1 T2 arg2 T3 arg3 T4 arg4 T5 arg5 T6 arg6 AsyncCallback callback object object Returns Type Description IAsyncResult EndInvoke(IAsyncResult) Declaration public virtual RT EndInvoke(IAsyncResult result) Parameters Type Name Description IAsyncResult result Returns Type Description RT Invoke(T1, T2, T3, T4, T5, T6) Declaration public virtual RT Invoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6) Parameters Type Name Description T1 arg1 T2 arg2 T3 arg3 T4 arg4 T5 arg5 T6 arg6 Returns Type Description RT Extension Methods LoaderUtils.GetFunctionPointer(Delegate)"
  },
  "api/RedLoader.LemonFunc-8.html": {
    "href": "api/RedLoader.LemonFunc-8.html",
    "title": "Delegate LemonFunc<T1, T2, T3, T4, T5, T6, T7, RT> | RedLoader Docs",
    "keywords": "Delegate LemonFunc<T1, T2, T3, T4, T5, T6, T7, RT> Namespace: RedLoader Assembly: RedLoader.dll Syntax public delegate RT LemonFunc<in T1, in T2, in T3, in T4, in T5, in T6, in T7, RT>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7) Parameters Type Name Description T1 arg1 T2 arg2 T3 arg3 T4 arg4 T5 arg5 T6 arg6 T7 arg7 Returns Type Description RT Type Parameters Name Description T1 T2 T3 T4 T5 T6 T7 RT Constructors LemonFunc(object, IntPtr) Declaration public LemonFunc(object @object, IntPtr method) Parameters Type Name Description object object IntPtr method Methods BeginInvoke(T1, T2, T3, T4, T5, T6, T7, AsyncCallback, object) Declaration public virtual IAsyncResult BeginInvoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, AsyncCallback callback, object @object) Parameters Type Name Description T1 arg1 T2 arg2 T3 arg3 T4 arg4 T5 arg5 T6 arg6 T7 arg7 AsyncCallback callback object object Returns Type Description IAsyncResult EndInvoke(IAsyncResult) Declaration public virtual RT EndInvoke(IAsyncResult result) Parameters Type Name Description IAsyncResult result Returns Type Description RT Invoke(T1, T2, T3, T4, T5, T6, T7) Declaration public virtual RT Invoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7) Parameters Type Name Description T1 arg1 T2 arg2 T3 arg3 T4 arg4 T5 arg5 T6 arg6 T7 arg7 Returns Type Description RT Extension Methods LoaderUtils.GetFunctionPointer(Delegate)"
  },
  "api/RedLoader.LemonFunc-9.html": {
    "href": "api/RedLoader.LemonFunc-9.html",
    "title": "Delegate LemonFunc<T1, T2, T3, T4, T5, T6, T7, T8, RT> | RedLoader Docs",
    "keywords": "Delegate LemonFunc<T1, T2, T3, T4, T5, T6, T7, T8, RT> Namespace: RedLoader Assembly: RedLoader.dll Syntax public delegate RT LemonFunc<in T1, in T2, in T3, in T4, in T5, in T6, in T7, in T8, RT>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8) Parameters Type Name Description T1 arg1 T2 arg2 T3 arg3 T4 arg4 T5 arg5 T6 arg6 T7 arg7 T8 arg8 Returns Type Description RT Type Parameters Name Description T1 T2 T3 T4 T5 T6 T7 T8 RT Constructors LemonFunc(object, IntPtr) Declaration public LemonFunc(object @object, IntPtr method) Parameters Type Name Description object object IntPtr method Methods BeginInvoke(T1, T2, T3, T4, T5, T6, T7, T8, AsyncCallback, object) Declaration public virtual IAsyncResult BeginInvoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, AsyncCallback callback, object @object) Parameters Type Name Description T1 arg1 T2 arg2 T3 arg3 T4 arg4 T5 arg5 T6 arg6 T7 arg7 T8 arg8 AsyncCallback callback object object Returns Type Description IAsyncResult EndInvoke(IAsyncResult) Declaration public virtual RT EndInvoke(IAsyncResult result) Parameters Type Name Description IAsyncResult result Returns Type Description RT Invoke(T1, T2, T3, T4, T5, T6, T7, T8) Declaration public virtual RT Invoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8) Parameters Type Name Description T1 arg1 T2 arg2 T3 arg3 T4 arg4 T5 arg5 T6 arg6 T7 arg7 T8 arg8 Returns Type Description RT Extension Methods LoaderUtils.GetFunctionPointer(Delegate)"
  },
  "api/RedLoader.LemonTuple-1.html": {
    "href": "api/RedLoader.LemonTuple-1.html",
    "title": "Class LemonTuple<T1> | RedLoader Docs",
    "keywords": "Class LemonTuple<T1> Inheritance object LemonTuple<T1> LemonTuple<T1, T2> Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: RedLoader Assembly: RedLoader.dll Syntax public class LemonTuple<T1> Type Parameters Name Description T1 Constructors LemonTuple() Declaration public LemonTuple() LemonTuple(T1) Declaration public LemonTuple(T1 item1) Parameters Type Name Description T1 item1 Fields Item1 Declaration public T1 Item1 Field Value Type Description T1"
  },
  "api/RedLoader.LemonTuple-10.html": {
    "href": "api/RedLoader.LemonTuple-10.html",
    "title": "Class LemonTuple<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> | RedLoader Docs",
    "keywords": "Class LemonTuple<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> Inheritance object LemonTuple<T1> LemonTuple<T1, T2> LemonTuple<T1, T2, T3> LemonTuple<T1, T2, T3, T4> LemonTuple<T1, T2, T3, T4, T5> LemonTuple<T1, T2, T3, T4, T5, T6> LemonTuple<T1, T2, T3, T4, T5, T6, T7> LemonTuple<T1, T2, T3, T4, T5, T6, T7, T8> LemonTuple<T1, T2, T3, T4, T5, T6, T7, T8, T9> LemonTuple<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> Inherited Members LemonTuple<T1, T2, T3, T4, T5, T6, T7, T8, T9>.Item9 LemonTuple<T1, T2, T3, T4, T5, T6, T7, T8>.Item8 LemonTuple<T1, T2, T3, T4, T5, T6, T7>.Item7 LemonTuple<T1, T2, T3, T4, T5, T6>.Item6 LemonTuple<T1, T2, T3, T4, T5>.Item5 LemonTuple<T1, T2, T3, T4>.Item4 LemonTuple<T1, T2, T3>.Item3 LemonTuple<T1, T2>.Item2 LemonTuple<T1>.Item1 object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: RedLoader Assembly: RedLoader.dll Syntax public class LemonTuple<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> : LemonTuple<T1, T2, T3, T4, T5, T6, T7, T8, T9> Type Parameters Name Description T1 T2 T3 T4 T5 T6 T7 T8 T9 T10 Constructors LemonTuple() Declaration public LemonTuple() LemonTuple(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10) Declaration public LemonTuple(T1 item1, T2 item2, T3 item3, T4 item4, T5 item5, T6 item6, T7 item7, T8 item8, T9 item9, T10 item10) Parameters Type Name Description T1 item1 T2 item2 T3 item3 T4 item4 T5 item5 T6 item6 T7 item7 T8 item8 T9 item9 T10 item10 Fields Item10 Declaration public T10 Item10 Field Value Type Description T10"
  },
  "api/RedLoader.LemonTuple-2.html": {
    "href": "api/RedLoader.LemonTuple-2.html",
    "title": "Class LemonTuple<T1, T2> | RedLoader Docs",
    "keywords": "Class LemonTuple<T1, T2> Inheritance object LemonTuple<T1> LemonTuple<T1, T2> LemonTuple<T1, T2, T3> Inherited Members LemonTuple<T1>.Item1 object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: RedLoader Assembly: RedLoader.dll Syntax public class LemonTuple<T1, T2> : LemonTuple<T1> Type Parameters Name Description T1 T2 Constructors LemonTuple() Declaration public LemonTuple() LemonTuple(T1, T2) Declaration public LemonTuple(T1 item1, T2 item2) Parameters Type Name Description T1 item1 T2 item2 Fields Item2 Declaration public T2 Item2 Field Value Type Description T2"
  },
  "api/RedLoader.LemonTuple-3.html": {
    "href": "api/RedLoader.LemonTuple-3.html",
    "title": "Class LemonTuple<T1, T2, T3> | RedLoader Docs",
    "keywords": "Class LemonTuple<T1, T2, T3> Inheritance object LemonTuple<T1> LemonTuple<T1, T2> LemonTuple<T1, T2, T3> LemonTuple<T1, T2, T3, T4> Inherited Members LemonTuple<T1, T2>.Item2 LemonTuple<T1>.Item1 object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: RedLoader Assembly: RedLoader.dll Syntax public class LemonTuple<T1, T2, T3> : LemonTuple<T1, T2> Type Parameters Name Description T1 T2 T3 Constructors LemonTuple() Declaration public LemonTuple() LemonTuple(T1, T2, T3) Declaration public LemonTuple(T1 item1, T2 item2, T3 item3) Parameters Type Name Description T1 item1 T2 item2 T3 item3 Fields Item3 Declaration public T3 Item3 Field Value Type Description T3"
  },
  "api/RedLoader.LemonTuple-4.html": {
    "href": "api/RedLoader.LemonTuple-4.html",
    "title": "Class LemonTuple<T1, T2, T3, T4> | RedLoader Docs",
    "keywords": "Class LemonTuple<T1, T2, T3, T4> Inheritance object LemonTuple<T1> LemonTuple<T1, T2> LemonTuple<T1, T2, T3> LemonTuple<T1, T2, T3, T4> LemonTuple<T1, T2, T3, T4, T5> Inherited Members LemonTuple<T1, T2, T3>.Item3 LemonTuple<T1, T2>.Item2 LemonTuple<T1>.Item1 object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: RedLoader Assembly: RedLoader.dll Syntax public class LemonTuple<T1, T2, T3, T4> : LemonTuple<T1, T2, T3> Type Parameters Name Description T1 T2 T3 T4 Constructors LemonTuple() Declaration public LemonTuple() LemonTuple(T1, T2, T3, T4) Declaration public LemonTuple(T1 item1, T2 item2, T3 item3, T4 item4) Parameters Type Name Description T1 item1 T2 item2 T3 item3 T4 item4 Fields Item4 Declaration public T4 Item4 Field Value Type Description T4"
  },
  "api/RedLoader.LemonTuple-5.html": {
    "href": "api/RedLoader.LemonTuple-5.html",
    "title": "Class LemonTuple<T1, T2, T3, T4, T5> | RedLoader Docs",
    "keywords": "Class LemonTuple<T1, T2, T3, T4, T5> Inheritance object LemonTuple<T1> LemonTuple<T1, T2> LemonTuple<T1, T2, T3> LemonTuple<T1, T2, T3, T4> LemonTuple<T1, T2, T3, T4, T5> LemonTuple<T1, T2, T3, T4, T5, T6> Inherited Members LemonTuple<T1, T2, T3, T4>.Item4 LemonTuple<T1, T2, T3>.Item3 LemonTuple<T1, T2>.Item2 LemonTuple<T1>.Item1 object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: RedLoader Assembly: RedLoader.dll Syntax public class LemonTuple<T1, T2, T3, T4, T5> : LemonTuple<T1, T2, T3, T4> Type Parameters Name Description T1 T2 T3 T4 T5 Constructors LemonTuple() Declaration public LemonTuple() LemonTuple(T1, T2, T3, T4, T5) Declaration public LemonTuple(T1 item1, T2 item2, T3 item3, T4 item4, T5 item5) Parameters Type Name Description T1 item1 T2 item2 T3 item3 T4 item4 T5 item5 Fields Item5 Declaration public T5 Item5 Field Value Type Description T5"
  },
  "api/RedLoader.LemonTuple-6.html": {
    "href": "api/RedLoader.LemonTuple-6.html",
    "title": "Class LemonTuple<T1, T2, T3, T4, T5, T6> | RedLoader Docs",
    "keywords": "Class LemonTuple<T1, T2, T3, T4, T5, T6> Inheritance object LemonTuple<T1> LemonTuple<T1, T2> LemonTuple<T1, T2, T3> LemonTuple<T1, T2, T3, T4> LemonTuple<T1, T2, T3, T4, T5> LemonTuple<T1, T2, T3, T4, T5, T6> LemonTuple<T1, T2, T3, T4, T5, T6, T7> Inherited Members LemonTuple<T1, T2, T3, T4, T5>.Item5 LemonTuple<T1, T2, T3, T4>.Item4 LemonTuple<T1, T2, T3>.Item3 LemonTuple<T1, T2>.Item2 LemonTuple<T1>.Item1 object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: RedLoader Assembly: RedLoader.dll Syntax public class LemonTuple<T1, T2, T3, T4, T5, T6> : LemonTuple<T1, T2, T3, T4, T5> Type Parameters Name Description T1 T2 T3 T4 T5 T6 Constructors LemonTuple() Declaration public LemonTuple() LemonTuple(T1, T2, T3, T4, T5, T6) Declaration public LemonTuple(T1 item1, T2 item2, T3 item3, T4 item4, T5 item5, T6 item6) Parameters Type Name Description T1 item1 T2 item2 T3 item3 T4 item4 T5 item5 T6 item6 Fields Item6 Declaration public T6 Item6 Field Value Type Description T6"
  },
  "api/RedLoader.LemonTuple-7.html": {
    "href": "api/RedLoader.LemonTuple-7.html",
    "title": "Class LemonTuple<T1, T2, T3, T4, T5, T6, T7> | RedLoader Docs",
    "keywords": "Class LemonTuple<T1, T2, T3, T4, T5, T6, T7> Inheritance object LemonTuple<T1> LemonTuple<T1, T2> LemonTuple<T1, T2, T3> LemonTuple<T1, T2, T3, T4> LemonTuple<T1, T2, T3, T4, T5> LemonTuple<T1, T2, T3, T4, T5, T6> LemonTuple<T1, T2, T3, T4, T5, T6, T7> LemonTuple<T1, T2, T3, T4, T5, T6, T7, T8> Inherited Members LemonTuple<T1, T2, T3, T4, T5, T6>.Item6 LemonTuple<T1, T2, T3, T4, T5>.Item5 LemonTuple<T1, T2, T3, T4>.Item4 LemonTuple<T1, T2, T3>.Item3 LemonTuple<T1, T2>.Item2 LemonTuple<T1>.Item1 object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: RedLoader Assembly: RedLoader.dll Syntax public class LemonTuple<T1, T2, T3, T4, T5, T6, T7> : LemonTuple<T1, T2, T3, T4, T5, T6> Type Parameters Name Description T1 T2 T3 T4 T5 T6 T7 Constructors LemonTuple() Declaration public LemonTuple() LemonTuple(T1, T2, T3, T4, T5, T6, T7) Declaration public LemonTuple(T1 item1, T2 item2, T3 item3, T4 item4, T5 item5, T6 item6, T7 item7) Parameters Type Name Description T1 item1 T2 item2 T3 item3 T4 item4 T5 item5 T6 item6 T7 item7 Fields Item7 Declaration public T7 Item7 Field Value Type Description T7"
  },
  "api/RedLoader.LemonTuple-8.html": {
    "href": "api/RedLoader.LemonTuple-8.html",
    "title": "Class LemonTuple<T1, T2, T3, T4, T5, T6, T7, T8> | RedLoader Docs",
    "keywords": "Class LemonTuple<T1, T2, T3, T4, T5, T6, T7, T8> Inheritance object LemonTuple<T1> LemonTuple<T1, T2> LemonTuple<T1, T2, T3> LemonTuple<T1, T2, T3, T4> LemonTuple<T1, T2, T3, T4, T5> LemonTuple<T1, T2, T3, T4, T5, T6> LemonTuple<T1, T2, T3, T4, T5, T6, T7> LemonTuple<T1, T2, T3, T4, T5, T6, T7, T8> LemonTuple<T1, T2, T3, T4, T5, T6, T7, T8, T9> Inherited Members LemonTuple<T1, T2, T3, T4, T5, T6, T7>.Item7 LemonTuple<T1, T2, T3, T4, T5, T6>.Item6 LemonTuple<T1, T2, T3, T4, T5>.Item5 LemonTuple<T1, T2, T3, T4>.Item4 LemonTuple<T1, T2, T3>.Item3 LemonTuple<T1, T2>.Item2 LemonTuple<T1>.Item1 object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: RedLoader Assembly: RedLoader.dll Syntax public class LemonTuple<T1, T2, T3, T4, T5, T6, T7, T8> : LemonTuple<T1, T2, T3, T4, T5, T6, T7> Type Parameters Name Description T1 T2 T3 T4 T5 T6 T7 T8 Constructors LemonTuple() Declaration public LemonTuple() LemonTuple(T1, T2, T3, T4, T5, T6, T7, T8) Declaration public LemonTuple(T1 item1, T2 item2, T3 item3, T4 item4, T5 item5, T6 item6, T7 item7, T8 item8) Parameters Type Name Description T1 item1 T2 item2 T3 item3 T4 item4 T5 item5 T6 item6 T7 item7 T8 item8 Fields Item8 Declaration public T8 Item8 Field Value Type Description T8"
  },
  "api/RedLoader.LemonTuple-9.html": {
    "href": "api/RedLoader.LemonTuple-9.html",
    "title": "Class LemonTuple<T1, T2, T3, T4, T5, T6, T7, T8, T9> | RedLoader Docs",
    "keywords": "Class LemonTuple<T1, T2, T3, T4, T5, T6, T7, T8, T9> Inheritance object LemonTuple<T1> LemonTuple<T1, T2> LemonTuple<T1, T2, T3> LemonTuple<T1, T2, T3, T4> LemonTuple<T1, T2, T3, T4, T5> LemonTuple<T1, T2, T3, T4, T5, T6> LemonTuple<T1, T2, T3, T4, T5, T6, T7> LemonTuple<T1, T2, T3, T4, T5, T6, T7, T8> LemonTuple<T1, T2, T3, T4, T5, T6, T7, T8, T9> LemonTuple<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> Inherited Members LemonTuple<T1, T2, T3, T4, T5, T6, T7, T8>.Item8 LemonTuple<T1, T2, T3, T4, T5, T6, T7>.Item7 LemonTuple<T1, T2, T3, T4, T5, T6>.Item6 LemonTuple<T1, T2, T3, T4, T5>.Item5 LemonTuple<T1, T2, T3, T4>.Item4 LemonTuple<T1, T2, T3>.Item3 LemonTuple<T1, T2>.Item2 LemonTuple<T1>.Item1 object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: RedLoader Assembly: RedLoader.dll Syntax public class LemonTuple<T1, T2, T3, T4, T5, T6, T7, T8, T9> : LemonTuple<T1, T2, T3, T4, T5, T6, T7, T8> Type Parameters Name Description T1 T2 T3 T4 T5 T6 T7 T8 T9 Constructors LemonTuple() Declaration public LemonTuple() LemonTuple(T1, T2, T3, T4, T5, T6, T7, T8, T9) Declaration public LemonTuple(T1 item1, T2 item2, T3 item3, T4 item4, T5 item5, T6 item6, T7 item7, T8 item8, T9 item9) Parameters Type Name Description T1 item1 T2 item2 T3 item3 T4 item4 T5 item5 T6 item6 T7 item7 T8 item8 T9 item9 Fields Item9 Declaration public T9 Item9 Field Value Type Description T9"
  },
  "api/RedLoader.LoaderUtils.html": {
    "href": "api/RedLoader.LoaderUtils.html",
    "title": "Class LoaderUtils | RedLoader Docs",
    "keywords": "Class LoaderUtils Inheritance object LoaderUtils Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: RedLoader Assembly: RedLoader.dll Syntax public static class LoaderUtils Properties CurrentDomain Declaration public static MelonPlatformDomainAttribute.CompatibleDomains CurrentDomain { get; } Property Value Type Description MelonPlatformDomainAttribute.CompatibleDomains CurrentGameAttribute Declaration public static MelonGameAttribute CurrentGameAttribute { get; } Property Value Type Description MelonGameAttribute CurrentPlatform Declaration public static MelonPlatformAttribute.CompatiblePlatforms CurrentPlatform { get; } Property Value Type Description MelonPlatformAttribute.CompatiblePlatforms GameDeveloper Declaration [Obsolete(\"RedLoader.MelonUtils.GameDeveloper is obsolete. Please use RedLoader.InternalUtils.UnityInformationHandler.GameDeveloper instead.\")] public static string GameDeveloper { get; } Property Value Type Description string GameName Declaration [Obsolete(\"RedLoader.MelonUtils.GameName is obsolete. Please use RedLoader.InternalUtils.UnityInformationHandler.GameName instead.\")] public static string GameName { get; } Property Value Type Description string GameVersion Declaration [Obsolete(\"RedLoader.MelonUtils.GameVersion is obsolete. Please use RedLoader.InternalUtils.UnityInformationHandler.GameVersion instead.\")] public static string GameVersion { get; } Property Value Type Description string GetPlatform Declaration public static PlatformID GetPlatform { get; } Property Value Type Description PlatformID HashCode Declaration public static string HashCode { get; } Property Value Type Description string IsMac Declaration public static bool IsMac { get; } Property Value Type Description bool IsUnix Declaration public static bool IsUnix { get; } Property Value Type Description bool IsWindows Declaration public static bool IsWindows { get; } Property Value Type Description bool Methods Clamp<T>(T, T, T) Declaration public static T Clamp<T>(T value, T min, T max) where T : IComparable<T> Parameters Type Name Description T value T min T max Returns Type Description T Type Parameters Name Description T ColorFromString(string) Declaration public static Color ColorFromString(string color) Parameters Type Name Description string color Returns Type Description Color ComputeSimpleSHA256Hash(string) Declaration public static string ComputeSimpleSHA256Hash(string filePath) Parameters Type Name Description string filePath Returns Type Description string ContainsExtension(string) Declaration public static bool ContainsExtension(this string path) Parameters Type Name Description string path Returns Type Description bool GetDelegate(IntPtr, Type) Declaration public static Delegate GetDelegate(this IntPtr ptr, Type type) Parameters Type Name Description IntPtr ptr Type type Returns Type Description Delegate GetDelegate<T>(IntPtr) Declaration public static T GetDelegate<T>(this IntPtr ptr) where T : Delegate Parameters Type Name Description IntPtr ptr Returns Type Description T Type Parameters Name Description T GetDelegate<T>(IntPtr, out T) Declaration public static void GetDelegate<T>(this IntPtr ptr, out T output) where T : Delegate Parameters Type Name Description IntPtr ptr T output Type Parameters Name Description T GetFileProductName(string) Declaration public static string GetFileProductName(string filepath) Parameters Type Name Description string filepath Returns Type Description string GetFunctionPointer(Delegate) Declaration public static IntPtr GetFunctionPointer(this Delegate del) Parameters Type Name Description Delegate del Returns Type Description IntPtr GetMelonFromStackTrace() Declaration public static ModBase GetMelonFromStackTrace() Returns Type Description ModBase GetMelonFromStackTrace(StackTrace, bool) Declaration public static ModBase GetMelonFromStackTrace(StackTrace st, bool allFrames = false) Parameters Type Name Description StackTrace st bool allFrames Returns Type Description ModBase GetNativeLibraryExport(IntPtr, string) Declaration public static IntPtr GetNativeLibraryExport(this IntPtr ptr, string name) Parameters Type Name Description IntPtr ptr string name Returns Type Description IntPtr GetUnityVersion() Declaration [Obsolete(\"RedLoader.MelonUtils.GetUnityVersion() is obsolete. Please use RedLoader.InternalUtils.UnityInformationHandler.EngineVersion instead.\")] public static string GetUnityVersion() Returns Type Description string GetValidTypes(Assembly) Declaration public static IEnumerable<Type> GetValidTypes(this Assembly asm) Parameters Type Name Description Assembly asm Returns Type Description IEnumerable<Type> GetValidTypes(Assembly, LemonFunc<Type, bool>) Declaration public static IEnumerable<Type> GetValidTypes(this Assembly asm, LemonFunc<Type, bool> predicate) Parameters Type Name Description Assembly asm LemonFunc<Type, bool> predicate Returns Type Description IEnumerable<Type> IsGame32Bit() Declaration public static bool IsGame32Bit() Returns Type Description bool IsGameIl2Cpp() Declaration public static bool IsGameIl2Cpp() Returns Type Description bool IsNotImplemented(MethodBase) Declaration public static bool IsNotImplemented(this MethodBase methodBase) Parameters Type Name Description MethodBase methodBase Returns Type Description bool IsOldMono() Declaration public static bool IsOldMono() Returns Type Description bool IsTypeEqualToFullName(Type, string) Declaration public static bool IsTypeEqualToFullName(Type type1, string type2) Parameters Type Name Description Type type1 string type2 Returns Type Description bool IsTypeEqualToName(Type, string) Declaration public static bool IsTypeEqualToName(Type type1, string type2) Parameters Type Name Description Type type1 string type2 Returns Type Description bool IsUnderWineOrSteamProton() Declaration public static bool IsUnderWineOrSteamProton() Returns Type Description bool LoadIncludedClassPackage(AssetsManager) Declaration public static ClassPackageFile LoadIncludedClassPackage(this AssetsManager assetsManager) Parameters Type Name Description AssetsManager assetsManager Returns Type Description ClassPackageFile MakePlural(string, int) Declaration public static string MakePlural(this string str, int amount) Parameters Type Name Description string str int amount Returns Type Description string NativeHookAttach(IntPtr, IntPtr) Declaration [Obsolete(\"Use NativeUtils.NativeHook instead\")] public static void NativeHookAttach(IntPtr target, IntPtr detour) Parameters Type Name Description IntPtr target IntPtr detour NativeHookDetach(IntPtr, IntPtr) Declaration [Obsolete(\"Use NativeUtils.NativeHook instead\")] public static void NativeHookDetach(IntPtr target, IntPtr detour) Parameters Type Name Description IntPtr target IntPtr detour ParseJSONStringtoStruct<T>(string) Declaration public static T ParseJSONStringtoStruct<T>(string jsonstr) Parameters Type Name Description string jsonstr Returns Type Description T Type Parameters Name Description T PullAttributeFromAssembly<T>(Assembly, bool) Declaration public static T PullAttributeFromAssembly<T>(Assembly asm, bool inherit = false) where T : Attribute Parameters Type Name Description Assembly asm bool inherit Returns Type Description T Type Parameters Name Description T PullAttributesFromAssembly<T>(Assembly, bool) Declaration public static T[] PullAttributesFromAssembly<T>(Assembly asm, bool inherit = false) where T : Attribute Parameters Type Name Description Assembly asm bool inherit Returns Type Description T[] Type Parameters Name Description T RandomDouble() Declaration public static double RandomDouble() Returns Type Description double RandomInt() Declaration public static int RandomInt() Returns Type Description int RandomInt(int) Declaration public static int RandomInt(int max) Parameters Type Name Description int max Returns Type Description int RandomInt(int, int) Declaration public static int RandomInt(int min, int max) Parameters Type Name Description int min int max Returns Type Description int RandomString(int) Declaration public static string RandomString(int length) Parameters Type Name Description int length Returns Type Description string SetApplicationBase(AppDomainSetup, string) Declaration public static void SetApplicationBase(this AppDomainSetup _this, string value) Parameters Type Name Description AppDomainSetup _this string value SetConsoleTitle(string) Declaration public static void SetConsoleTitle(string title) Parameters Type Name Description string title SetCurrentDomainBaseDirectory(string, AppDomain) Declaration public static void SetCurrentDomainBaseDirectory(string dirpath, AppDomain domain = null) Parameters Type Name Description string dirpath AppDomain domain SetHashSizeValue(HashAlgorithm, int) Declaration public static void SetHashSizeValue(this HashAlgorithm _this, int value) Parameters Type Name Description HashAlgorithm _this int value ToNewDynamicMethodDefinition(MethodBase) Declaration public static DynamicMethodDefinition ToNewDynamicMethodDefinition(this MethodBase methodBase) Parameters Type Name Description MethodBase methodBase Returns Type Description DynamicMethodDefinition ToNewHarmonyMethod(MethodInfo) Declaration public static HarmonyMethod ToNewHarmonyMethod(this MethodInfo methodInfo) Parameters Type Name Description MethodInfo methodInfo Returns Type Description HarmonyMethod ToNewNativeLibrary(IntPtr) Declaration public static NativeLibrary ToNewNativeLibrary(this IntPtr ptr) Parameters Type Name Description IntPtr ptr Returns Type Description NativeLibrary ToNewNativeLibrary<T>(IntPtr) Declaration public static NativeLibrary<T> ToNewNativeLibrary<T>(this IntPtr ptr) Parameters Type Name Description IntPtr ptr Returns Type Description NativeLibrary<T> Type Parameters Name Description T"
  },
  "api/RedLoader.ManagedIl2CppEnumerable.html": {
    "href": "api/RedLoader.ManagedIl2CppEnumerable.html",
    "title": "Class ManagedIl2CppEnumerable | RedLoader Docs",
    "keywords": "Class ManagedIl2CppEnumerable Inheritance object ManagedIl2CppEnumerable Implements IEnumerable Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: RedLoader Assembly: RedLoader.dll Syntax public class ManagedIl2CppEnumerable : IEnumerable Constructors ManagedIl2CppEnumerable(IEnumerable) Declaration public ManagedIl2CppEnumerable(IEnumerable enumerable) Parameters Type Name Description IEnumerable enumerable Methods GetEnumerator() Declaration public IEnumerator GetEnumerator() Returns Type Description IEnumerator Implements IEnumerable Extension Methods CollectionExtensions.WrapToIl2Cpp(IEnumerable)"
  },
  "api/RedLoader.ManagedIl2CppEnumerator.html": {
    "href": "api/RedLoader.ManagedIl2CppEnumerator.html",
    "title": "Class ManagedIl2CppEnumerator | RedLoader Docs",
    "keywords": "Class ManagedIl2CppEnumerator Inheritance object ManagedIl2CppEnumerator Implements IEnumerator Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: RedLoader Assembly: RedLoader.dll Syntax public class ManagedIl2CppEnumerator : IEnumerator Constructors ManagedIl2CppEnumerator(IEnumerator) Declaration public ManagedIl2CppEnumerator(IEnumerator enumerator) Parameters Type Name Description IEnumerator enumerator Properties Current Declaration public object Current { get; } Property Value Type Description object Methods MoveNext() Declaration public bool MoveNext() Returns Type Description bool Reset() Declaration public void Reset() Implements IEnumerator Extension Methods CollectionExtensions.WrapToIl2Cpp(IEnumerator) CoroutineExtensions.RunCoro(IEnumerator)"
  },
  "api/RedLoader.Melon-1.html": {
    "href": "api/RedLoader.Melon-1.html",
    "title": "Class Melon<T> | RedLoader Docs",
    "keywords": "Class Melon<T> Inheritance object Melon<T> Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: RedLoader Assembly: RedLoader.dll Syntax public static class Melon<T> where T : ModBase Type Parameters Name Description T Properties Instance Declaration public static T Instance { get; } Property Value Type Description T Logger Declaration public static RLog.Instance Logger { get; } Property Value Type Description RLog.Instance"
  },
  "api/RedLoader.MelonAdditionalCreditsAttribute.html": {
    "href": "api/RedLoader.MelonAdditionalCreditsAttribute.html",
    "title": "Class MelonAdditionalCreditsAttribute | RedLoader Docs",
    "keywords": "Class MelonAdditionalCreditsAttribute Inheritance object Attribute MelonAdditionalCreditsAttribute Inherited Members Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.Equals(object) Attribute.GetHashCode() Attribute.Match(object) Attribute.IsDefaultAttribute() Attribute.TypeId object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) Namespace: RedLoader Assembly: RedLoader.dll Syntax [AttributeUsage(AttributeTargets.Assembly)] public class MelonAdditionalCreditsAttribute : Attribute Constructors MelonAdditionalCreditsAttribute(string) AdditionalCredits constructor Declaration public MelonAdditionalCreditsAttribute(string credits) Parameters Type Name Description string credits The additional credits of the mod Properties Credits Any additional credits that the mod author might want to include Declaration public string Credits { get; } Property Value Type Description string"
  },
  "api/RedLoader.MelonAdditionalDependenciesAttribute.html": {
    "href": "api/RedLoader.MelonAdditionalDependenciesAttribute.html",
    "title": "Class MelonAdditionalDependenciesAttribute | RedLoader Docs",
    "keywords": "Class MelonAdditionalDependenciesAttribute Inheritance object Attribute MelonAdditionalDependenciesAttribute Inherited Members Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.Equals(object) Attribute.GetHashCode() Attribute.Match(object) Attribute.IsDefaultAttribute() Attribute.TypeId object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) Namespace: RedLoader Assembly: RedLoader.dll Syntax [AttributeUsage(AttributeTargets.Assembly)] public class MelonAdditionalDependenciesAttribute : Attribute Constructors MelonAdditionalDependenciesAttribute(params string[]) Declaration public MelonAdditionalDependenciesAttribute(params string[] assemblyNames) Parameters Type Name Description string[] assemblyNames Properties AssemblyNames The (simple) assembly names of Additional Dependencies that aren't directly referenced but should still be regarded as important. Declaration public string[] AssemblyNames { get; } Property Value Type Description string[]"
  },
  "api/RedLoader.MelonAssembly.html": {
    "href": "api/RedLoader.MelonAssembly.html",
    "title": "Class MelonAssembly | RedLoader Docs",
    "keywords": "Class MelonAssembly Inheritance object MelonAssembly Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: RedLoader Assembly: RedLoader.dll Syntax public sealed class MelonAssembly Fields OnAssemblyResolving Called before a process of resolving Melons from a MelonAssembly has started. Declaration public static readonly MelonEvent<Assembly> OnAssemblyResolving Field Value Type Description MelonEvent<Assembly> OnUnregister Declaration public readonly MelonEvent OnUnregister Field Value Type Description MelonEvent Properties Assembly Declaration public Assembly Assembly { get; } Property Value Type Description Assembly HarmonyDontPatchAll Declaration public bool HarmonyDontPatchAll { get; } Property Value Type Description bool Hash A SHA256 Hash of the Assembly. Declaration public string Hash { get; } Property Value Type Description string LoadedAssemblies List of all loaded MelonAssemblies. Declaration public static ReadOnlyCollection<MelonAssembly> LoadedAssemblies { get; } Property Value Type Description ReadOnlyCollection<MelonAssembly> LoadedMelons A list of all loaded Melons in the Assembly. Declaration public ReadOnlyCollection<ModBase> LoadedMelons { get; } Property Value Type Description ReadOnlyCollection<ModBase> Location Declaration public string Location { get; } Property Value Type Description string RottenMelons A list of all broken Melons in the Assembly. Declaration public ReadOnlyCollection<RottenMelon> RottenMelons { get; } Property Value Type Description ReadOnlyCollection<RottenMelon> Methods FindMelonInstance<T>() Tries to find the instance of Melon with type T, whether it's registered or not Declaration public static T FindMelonInstance<T>() where T : ModBase Returns Type Description T Type Parameters Name Description T GetMelonAssemblyOfMember(MemberInfo, object) Gets the MelonAssembly of the given member. If the given member is not in any MelonAssembly, returns null. Declaration public static MelonAssembly GetMelonAssemblyOfMember(MemberInfo member, object obj = null) Parameters Type Name Description MemberInfo member object obj Returns Type Description MelonAssembly LoadMelonAssembly(string, bool) Loads or finds a MelonAssembly from path. Declaration public static MelonAssembly LoadMelonAssembly(string path, bool loadMelons = true) Parameters Type Name Description string path Path of the MelonAssembly bool loadMelons Sets whether Melons should be auto-loaded or not Returns Type Description MelonAssembly LoadMelonAssembly(string, Assembly, bool) Loads or finds a MelonAssembly. Declaration public static MelonAssembly LoadMelonAssembly(string path, Assembly assembly, bool loadMelons = true) Parameters Type Name Description string path Assembly assembly bool loadMelons Returns Type Description MelonAssembly LoadMelons() Declaration public void LoadMelons() LoadRawMelonAssembly(string, byte[], byte[], bool) Loads or finds a MelonAssembly from raw Assembly Data. Declaration public static MelonAssembly LoadRawMelonAssembly(string path, byte[] assemblyData, byte[] symbolsData = null, bool loadMelons = true) Parameters Type Name Description string path byte[] assemblyData byte[] symbolsData bool loadMelons Returns Type Description MelonAssembly UnregisterMelons(string, bool) Unregisters all Melons in this Assembly. Declaration public void UnregisterMelons(string reason = null, bool silent = false) Parameters Type Name Description string reason bool silent Events CustomMelonResolvers Declaration public static event LemonFunc<MelonAssembly, ResolvedMelons> CustomMelonResolvers Event Type Type Description LemonFunc<MelonAssembly, ResolvedMelons>"
  },
  "api/RedLoader.MelonAuthorColorAttribute.html": {
    "href": "api/RedLoader.MelonAuthorColorAttribute.html",
    "title": "Class MelonAuthorColorAttribute | RedLoader Docs",
    "keywords": "Class MelonAuthorColorAttribute Inheritance object Attribute MelonAuthorColorAttribute Inherited Members Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.Equals(object) Attribute.GetHashCode() Attribute.Match(object) Attribute.IsDefaultAttribute() Attribute.TypeId object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) Namespace: RedLoader Assembly: RedLoader.dll Syntax [AttributeUsage(AttributeTargets.Assembly)] public class MelonAuthorColorAttribute : Attribute Constructors MelonAuthorColorAttribute() Declaration public MelonAuthorColorAttribute() MelonAuthorColorAttribute(ConsoleColor) Declaration [Obsolete(\"ConsoleColor is obsolete, use the (int, int, int, int) or (Color) constructor instead.\")] public MelonAuthorColorAttribute(ConsoleColor color) Parameters Type Name Description ConsoleColor color MelonAuthorColorAttribute(Color) Declaration public MelonAuthorColorAttribute(Color drawingColor) Parameters Type Name Description Color drawingColor MelonAuthorColorAttribute(int, int, int, int) Declaration public MelonAuthorColorAttribute(int alpha, int red, int green, int blue) Parameters Type Name Description int alpha int red int green int blue Properties Color Color of the Author Log. Declaration [Obsolete(\"Color is obsolete. Use DrawingColor for full Color support.\")] public ConsoleColor Color { get; set; } Property Value Type Description ConsoleColor DrawingColor Color of the Author Log. Declaration public Color DrawingColor { get; } Property Value Type Description Color"
  },
  "api/RedLoader.MelonColorAttribute.html": {
    "href": "api/RedLoader.MelonColorAttribute.html",
    "title": "Class MelonColorAttribute | RedLoader Docs",
    "keywords": "Class MelonColorAttribute Inheritance object Attribute MelonColorAttribute Inherited Members Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.Equals(object) Attribute.GetHashCode() Attribute.Match(object) Attribute.IsDefaultAttribute() Attribute.TypeId object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) Namespace: RedLoader Assembly: RedLoader.dll Syntax [AttributeUsage(AttributeTargets.Assembly)] public class MelonColorAttribute : Attribute Constructors MelonColorAttribute() Declaration public MelonColorAttribute() MelonColorAttribute(ConsoleColor) Declaration [Obsolete(\"ConsoleColor is obsolete, use the (int, int, int, int) or (Color) constructor instead.\")] public MelonColorAttribute(ConsoleColor color) Parameters Type Name Description ConsoleColor color MelonColorAttribute(Color) Declaration public MelonColorAttribute(Color drawingColor) Parameters Type Name Description Color drawingColor MelonColorAttribute(int, int, int, int) Declaration public MelonColorAttribute(int alpha, int red, int green, int blue) Parameters Type Name Description int alpha int red int green int blue Properties Color Color of the Melon. Declaration [Obsolete(\"Color is obsolete. Use DrawingColor for full Color support.\")] public ConsoleColor Color { get; set; } Property Value Type Description ConsoleColor DrawingColor Color of the Author Log. Declaration public Color DrawingColor { get; } Property Value Type Description Color"
  },
  "api/RedLoader.MelonCompatibilityLayer.html": {
    "href": "api/RedLoader.MelonCompatibilityLayer.html",
    "title": "Class MelonCompatibilityLayer | RedLoader Docs",
    "keywords": "Class MelonCompatibilityLayer Inheritance object MelonCompatibilityLayer Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: RedLoader Assembly: RedLoader.dll Syntax public static class MelonCompatibilityLayer Fields baseDirectory Declaration public static string baseDirectory Field Value Type Description string"
  },
  "api/RedLoader.MelonDebug.html": {
    "href": "api/RedLoader.MelonDebug.html",
    "title": "Class MelonDebug | RedLoader Docs",
    "keywords": "Class MelonDebug Inheritance object MelonDebug Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: RedLoader Assembly: RedLoader.dll Syntax public static class MelonDebug Methods Error(string) Declaration public static void Error(string txt) Parameters Type Name Description string txt IsEnabled() Declaration public static bool IsEnabled() Returns Type Description bool Msg(object) Declaration public static void Msg(object obj) Parameters Type Name Description object obj Msg(string) Declaration public static void Msg(string txt) Parameters Type Name Description string txt Msg(string, params object[]) Declaration public static void Msg(string txt, params object[] args) Parameters Type Name Description string txt object[] args Events ErrorCallbackHandler Declaration public static event Action<string> ErrorCallbackHandler Event Type Type Description Action<string> MsgCallbackHandler Declaration public static event Action<ConsoleColor, string> MsgCallbackHandler Event Type Type Description Action<ConsoleColor, string>"
  },
  "api/RedLoader.MelonEvent-1.html": {
    "href": "api/RedLoader.MelonEvent-1.html",
    "title": "Class MelonEvent<T1> | RedLoader Docs",
    "keywords": "Class MelonEvent<T1> Inheritance object MelonEventBase<LemonAction<T1>> MelonEvent<T1> Inherited Members MelonEventBase<LemonAction<T1>>.oneTimeUse MelonEventBase<LemonAction<T1>>.CheckIfSubscribed(MethodInfo, object) MelonEventBase<LemonAction<T1>>.Subscribe(LemonAction<T1>, int, bool) MelonEventBase<LemonAction<T1>>.Unsubscribe(LemonAction<T1>) MelonEventBase<LemonAction<T1>>.UnsubscribeAll() MelonEventBase<LemonAction<T1>>.Unsubscribe(MethodInfo, object) MelonEventBase<LemonAction<T1>>.GetSubscribers() MelonEventBase<LemonAction<T1>>.Invoke(Action<LemonAction<T1>>) MelonEventBase<LemonAction<T1>>.Dispose() MelonEventBase<LemonAction<T1>>.Disposed object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: RedLoader Assembly: RedLoader.dll Syntax public class MelonEvent<T1> : MelonEventBase<LemonAction<T1>> Type Parameters Name Description T1 Constructors MelonEvent(bool) Declaration public MelonEvent(bool oneTimeUse = false) Parameters Type Name Description bool oneTimeUse Methods Invoke(T1) Declaration public void Invoke(T1 arg1) Parameters Type Name Description T1 arg1"
  },
  "api/RedLoader.MelonEvent-2.html": {
    "href": "api/RedLoader.MelonEvent-2.html",
    "title": "Class MelonEvent<T1, T2> | RedLoader Docs",
    "keywords": "Class MelonEvent<T1, T2> Inheritance object MelonEventBase<LemonAction<T1, T2>> MelonEvent<T1, T2> Inherited Members MelonEventBase<LemonAction<T1, T2>>.oneTimeUse MelonEventBase<LemonAction<T1, T2>>.CheckIfSubscribed(MethodInfo, object) MelonEventBase<LemonAction<T1, T2>>.Subscribe(LemonAction<T1, T2>, int, bool) MelonEventBase<LemonAction<T1, T2>>.Unsubscribe(LemonAction<T1, T2>) MelonEventBase<LemonAction<T1, T2>>.UnsubscribeAll() MelonEventBase<LemonAction<T1, T2>>.Unsubscribe(MethodInfo, object) MelonEventBase<LemonAction<T1, T2>>.GetSubscribers() MelonEventBase<LemonAction<T1, T2>>.Invoke(Action<LemonAction<T1, T2>>) MelonEventBase<LemonAction<T1, T2>>.Dispose() MelonEventBase<LemonAction<T1, T2>>.Disposed object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: RedLoader Assembly: RedLoader.dll Syntax public class MelonEvent<T1, T2> : MelonEventBase<LemonAction<T1, T2>> Type Parameters Name Description T1 T2 Constructors MelonEvent(bool) Declaration public MelonEvent(bool oneTimeUse = false) Parameters Type Name Description bool oneTimeUse Methods Invoke(T1, T2) Declaration public void Invoke(T1 arg1, T2 arg2) Parameters Type Name Description T1 arg1 T2 arg2"
  },
  "api/RedLoader.MelonEvent-3.html": {
    "href": "api/RedLoader.MelonEvent-3.html",
    "title": "Class MelonEvent<T1, T2, T3> | RedLoader Docs",
    "keywords": "Class MelonEvent<T1, T2, T3> Inheritance object MelonEventBase<LemonAction<T1, T2, T3>> MelonEvent<T1, T2, T3> Inherited Members MelonEventBase<LemonAction<T1, T2, T3>>.oneTimeUse MelonEventBase<LemonAction<T1, T2, T3>>.CheckIfSubscribed(MethodInfo, object) MelonEventBase<LemonAction<T1, T2, T3>>.Subscribe(LemonAction<T1, T2, T3>, int, bool) MelonEventBase<LemonAction<T1, T2, T3>>.Unsubscribe(LemonAction<T1, T2, T3>) MelonEventBase<LemonAction<T1, T2, T3>>.UnsubscribeAll() MelonEventBase<LemonAction<T1, T2, T3>>.Unsubscribe(MethodInfo, object) MelonEventBase<LemonAction<T1, T2, T3>>.GetSubscribers() MelonEventBase<LemonAction<T1, T2, T3>>.Invoke(Action<LemonAction<T1, T2, T3>>) MelonEventBase<LemonAction<T1, T2, T3>>.Dispose() MelonEventBase<LemonAction<T1, T2, T3>>.Disposed object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: RedLoader Assembly: RedLoader.dll Syntax public class MelonEvent<T1, T2, T3> : MelonEventBase<LemonAction<T1, T2, T3>> Type Parameters Name Description T1 T2 T3 Constructors MelonEvent(bool) Declaration public MelonEvent(bool oneTimeUse = false) Parameters Type Name Description bool oneTimeUse Methods Invoke(T1, T2, T3) Declaration public void Invoke(T1 arg1, T2 arg2, T3 arg3) Parameters Type Name Description T1 arg1 T2 arg2 T3 arg3"
  },
  "api/RedLoader.MelonEvent-4.html": {
    "href": "api/RedLoader.MelonEvent-4.html",
    "title": "Class MelonEvent<T1, T2, T3, T4> | RedLoader Docs",
    "keywords": "Class MelonEvent<T1, T2, T3, T4> Inheritance object MelonEventBase<LemonAction<T1, T2, T3, T4>> MelonEvent<T1, T2, T3, T4> Inherited Members MelonEventBase<LemonAction<T1, T2, T3, T4>>.oneTimeUse MelonEventBase<LemonAction<T1, T2, T3, T4>>.CheckIfSubscribed(MethodInfo, object) MelonEventBase<LemonAction<T1, T2, T3, T4>>.Subscribe(LemonAction<T1, T2, T3, T4>, int, bool) MelonEventBase<LemonAction<T1, T2, T3, T4>>.Unsubscribe(LemonAction<T1, T2, T3, T4>) MelonEventBase<LemonAction<T1, T2, T3, T4>>.UnsubscribeAll() MelonEventBase<LemonAction<T1, T2, T3, T4>>.Unsubscribe(MethodInfo, object) MelonEventBase<LemonAction<T1, T2, T3, T4>>.GetSubscribers() MelonEventBase<LemonAction<T1, T2, T3, T4>>.Invoke(Action<LemonAction<T1, T2, T3, T4>>) MelonEventBase<LemonAction<T1, T2, T3, T4>>.Dispose() MelonEventBase<LemonAction<T1, T2, T3, T4>>.Disposed object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: RedLoader Assembly: RedLoader.dll Syntax public class MelonEvent<T1, T2, T3, T4> : MelonEventBase<LemonAction<T1, T2, T3, T4>> Type Parameters Name Description T1 T2 T3 T4 Constructors MelonEvent(bool) Declaration public MelonEvent(bool oneTimeUse = false) Parameters Type Name Description bool oneTimeUse Methods Invoke(T1, T2, T3, T4) Declaration public void Invoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4) Parameters Type Name Description T1 arg1 T2 arg2 T3 arg3 T4 arg4"
  },
  "api/RedLoader.MelonEvent-5.html": {
    "href": "api/RedLoader.MelonEvent-5.html",
    "title": "Class MelonEvent<T1, T2, T3, T4, T5> | RedLoader Docs",
    "keywords": "Class MelonEvent<T1, T2, T3, T4, T5> Inheritance object MelonEventBase<LemonAction<T1, T2, T3, T4, T5>> MelonEvent<T1, T2, T3, T4, T5> Inherited Members MelonEventBase<LemonAction<T1, T2, T3, T4, T5>>.oneTimeUse MelonEventBase<LemonAction<T1, T2, T3, T4, T5>>.CheckIfSubscribed(MethodInfo, object) MelonEventBase<LemonAction<T1, T2, T3, T4, T5>>.Subscribe(LemonAction<T1, T2, T3, T4, T5>, int, bool) MelonEventBase<LemonAction<T1, T2, T3, T4, T5>>.Unsubscribe(LemonAction<T1, T2, T3, T4, T5>) MelonEventBase<LemonAction<T1, T2, T3, T4, T5>>.UnsubscribeAll() MelonEventBase<LemonAction<T1, T2, T3, T4, T5>>.Unsubscribe(MethodInfo, object) MelonEventBase<LemonAction<T1, T2, T3, T4, T5>>.GetSubscribers() MelonEventBase<LemonAction<T1, T2, T3, T4, T5>>.Invoke(Action<LemonAction<T1, T2, T3, T4, T5>>) MelonEventBase<LemonAction<T1, T2, T3, T4, T5>>.Dispose() MelonEventBase<LemonAction<T1, T2, T3, T4, T5>>.Disposed object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: RedLoader Assembly: RedLoader.dll Syntax public class MelonEvent<T1, T2, T3, T4, T5> : MelonEventBase<LemonAction<T1, T2, T3, T4, T5>> Type Parameters Name Description T1 T2 T3 T4 T5 Constructors MelonEvent(bool) Declaration public MelonEvent(bool oneTimeUse = false) Parameters Type Name Description bool oneTimeUse Methods Invoke(T1, T2, T3, T4, T5) Declaration public void Invoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5) Parameters Type Name Description T1 arg1 T2 arg2 T3 arg3 T4 arg4 T5 arg5"
  },
  "api/RedLoader.MelonEvent-6.html": {
    "href": "api/RedLoader.MelonEvent-6.html",
    "title": "Class MelonEvent<T1, T2, T3, T4, T5, T6> | RedLoader Docs",
    "keywords": "Class MelonEvent<T1, T2, T3, T4, T5, T6> Inheritance object MelonEventBase<LemonAction<T1, T2, T3, T4, T5, T6>> MelonEvent<T1, T2, T3, T4, T5, T6> Inherited Members MelonEventBase<LemonAction<T1, T2, T3, T4, T5, T6>>.oneTimeUse MelonEventBase<LemonAction<T1, T2, T3, T4, T5, T6>>.CheckIfSubscribed(MethodInfo, object) MelonEventBase<LemonAction<T1, T2, T3, T4, T5, T6>>.Subscribe(LemonAction<T1, T2, T3, T4, T5, T6>, int, bool) MelonEventBase<LemonAction<T1, T2, T3, T4, T5, T6>>.Unsubscribe(LemonAction<T1, T2, T3, T4, T5, T6>) MelonEventBase<LemonAction<T1, T2, T3, T4, T5, T6>>.UnsubscribeAll() MelonEventBase<LemonAction<T1, T2, T3, T4, T5, T6>>.Unsubscribe(MethodInfo, object) MelonEventBase<LemonAction<T1, T2, T3, T4, T5, T6>>.GetSubscribers() MelonEventBase<LemonAction<T1, T2, T3, T4, T5, T6>>.Invoke(Action<LemonAction<T1, T2, T3, T4, T5, T6>>) MelonEventBase<LemonAction<T1, T2, T3, T4, T5, T6>>.Dispose() MelonEventBase<LemonAction<T1, T2, T3, T4, T5, T6>>.Disposed object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: RedLoader Assembly: RedLoader.dll Syntax public class MelonEvent<T1, T2, T3, T4, T5, T6> : MelonEventBase<LemonAction<T1, T2, T3, T4, T5, T6>> Type Parameters Name Description T1 T2 T3 T4 T5 T6 Constructors MelonEvent(bool) Declaration public MelonEvent(bool oneTimeUse = false) Parameters Type Name Description bool oneTimeUse Methods Invoke(T1, T2, T3, T4, T5, T6) Declaration public void Invoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6) Parameters Type Name Description T1 arg1 T2 arg2 T3 arg3 T4 arg4 T5 arg5 T6 arg6"
  },
  "api/RedLoader.MelonEvent-7.html": {
    "href": "api/RedLoader.MelonEvent-7.html",
    "title": "Class MelonEvent<T1, T2, T3, T4, T5, T6, T7> | RedLoader Docs",
    "keywords": "Class MelonEvent<T1, T2, T3, T4, T5, T6, T7> Inheritance object MelonEventBase<LemonAction<T1, T2, T3, T4, T5, T6, T7>> MelonEvent<T1, T2, T3, T4, T5, T6, T7> Inherited Members MelonEventBase<LemonAction<T1, T2, T3, T4, T5, T6, T7>>.oneTimeUse MelonEventBase<LemonAction<T1, T2, T3, T4, T5, T6, T7>>.CheckIfSubscribed(MethodInfo, object) MelonEventBase<LemonAction<T1, T2, T3, T4, T5, T6, T7>>.Subscribe(LemonAction<T1, T2, T3, T4, T5, T6, T7>, int, bool) MelonEventBase<LemonAction<T1, T2, T3, T4, T5, T6, T7>>.Unsubscribe(LemonAction<T1, T2, T3, T4, T5, T6, T7>) MelonEventBase<LemonAction<T1, T2, T3, T4, T5, T6, T7>>.UnsubscribeAll() MelonEventBase<LemonAction<T1, T2, T3, T4, T5, T6, T7>>.Unsubscribe(MethodInfo, object) MelonEventBase<LemonAction<T1, T2, T3, T4, T5, T6, T7>>.GetSubscribers() MelonEventBase<LemonAction<T1, T2, T3, T4, T5, T6, T7>>.Invoke(Action<LemonAction<T1, T2, T3, T4, T5, T6, T7>>) MelonEventBase<LemonAction<T1, T2, T3, T4, T5, T6, T7>>.Dispose() MelonEventBase<LemonAction<T1, T2, T3, T4, T5, T6, T7>>.Disposed object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: RedLoader Assembly: RedLoader.dll Syntax public class MelonEvent<T1, T2, T3, T4, T5, T6, T7> : MelonEventBase<LemonAction<T1, T2, T3, T4, T5, T6, T7>> Type Parameters Name Description T1 T2 T3 T4 T5 T6 T7 Constructors MelonEvent(bool) Declaration public MelonEvent(bool oneTimeUse = false) Parameters Type Name Description bool oneTimeUse Methods Invoke(T1, T2, T3, T4, T5, T6, T7) Declaration public void Invoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7) Parameters Type Name Description T1 arg1 T2 arg2 T3 arg3 T4 arg4 T5 arg5 T6 arg6 T7 arg7"
  },
  "api/RedLoader.MelonEvent-8.html": {
    "href": "api/RedLoader.MelonEvent-8.html",
    "title": "Class MelonEvent<T1, T2, T3, T4, T5, T6, T7, T8> | RedLoader Docs",
    "keywords": "Class MelonEvent<T1, T2, T3, T4, T5, T6, T7, T8> Inheritance object MelonEventBase<LemonAction<T1, T2, T3, T4, T5, T6, T7, T8>> MelonEvent<T1, T2, T3, T4, T5, T6, T7, T8> Inherited Members MelonEventBase<LemonAction<T1, T2, T3, T4, T5, T6, T7, T8>>.oneTimeUse MelonEventBase<LemonAction<T1, T2, T3, T4, T5, T6, T7, T8>>.CheckIfSubscribed(MethodInfo, object) MelonEventBase<LemonAction<T1, T2, T3, T4, T5, T6, T7, T8>>.Subscribe(LemonAction<T1, T2, T3, T4, T5, T6, T7, T8>, int, bool) MelonEventBase<LemonAction<T1, T2, T3, T4, T5, T6, T7, T8>>.Unsubscribe(LemonAction<T1, T2, T3, T4, T5, T6, T7, T8>) MelonEventBase<LemonAction<T1, T2, T3, T4, T5, T6, T7, T8>>.UnsubscribeAll() MelonEventBase<LemonAction<T1, T2, T3, T4, T5, T6, T7, T8>>.Unsubscribe(MethodInfo, object) MelonEventBase<LemonAction<T1, T2, T3, T4, T5, T6, T7, T8>>.GetSubscribers() MelonEventBase<LemonAction<T1, T2, T3, T4, T5, T6, T7, T8>>.Invoke(Action<LemonAction<T1, T2, T3, T4, T5, T6, T7, T8>>) MelonEventBase<LemonAction<T1, T2, T3, T4, T5, T6, T7, T8>>.Dispose() MelonEventBase<LemonAction<T1, T2, T3, T4, T5, T6, T7, T8>>.Disposed object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: RedLoader Assembly: RedLoader.dll Syntax public class MelonEvent<T1, T2, T3, T4, T5, T6, T7, T8> : MelonEventBase<LemonAction<T1, T2, T3, T4, T5, T6, T7, T8>> Type Parameters Name Description T1 T2 T3 T4 T5 T6 T7 T8 Constructors MelonEvent(bool) Declaration public MelonEvent(bool oneTimeUse = false) Parameters Type Name Description bool oneTimeUse Methods Invoke(T1, T2, T3, T4, T5, T6, T7, T8) Declaration public void Invoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8) Parameters Type Name Description T1 arg1 T2 arg2 T3 arg3 T4 arg4 T5 arg5 T6 arg6 T7 arg7 T8 arg8"
  },
  "api/RedLoader.MelonEvent.html": {
    "href": "api/RedLoader.MelonEvent.html",
    "title": "Class MelonEvent | RedLoader Docs",
    "keywords": "Class MelonEvent Inheritance object MelonEventBase<LemonAction> MelonEvent Inherited Members MelonEventBase<LemonAction>.oneTimeUse MelonEventBase<LemonAction>.CheckIfSubscribed(MethodInfo, object) MelonEventBase<LemonAction>.Subscribe(LemonAction, int, bool) MelonEventBase<LemonAction>.Unsubscribe(LemonAction) MelonEventBase<LemonAction>.UnsubscribeAll() MelonEventBase<LemonAction>.Unsubscribe(MethodInfo, object) MelonEventBase<LemonAction>.GetSubscribers() MelonEventBase<LemonAction>.Invoke(Action<LemonAction>) MelonEventBase<LemonAction>.Dispose() MelonEventBase<LemonAction>.Disposed object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: RedLoader Assembly: RedLoader.dll Syntax public class MelonEvent : MelonEventBase<LemonAction> Constructors MelonEvent(bool) Declaration public MelonEvent(bool oneTimeUse = false) Parameters Type Name Description bool oneTimeUse Methods Invoke() Declaration public void Invoke()"
  },
  "api/RedLoader.MelonEventBase-1.html": {
    "href": "api/RedLoader.MelonEventBase-1.html",
    "title": "Class MelonEventBase<T> | RedLoader Docs",
    "keywords": "Class MelonEventBase<T> Inheritance object MelonEventBase<T> MelonEvent MelonEvent<T1> MelonEvent<T1, T2> MelonEvent<T1, T2, T3> MelonEvent<T1, T2, T3, T4> MelonEvent<T1, T2, T3, T4, T5> MelonEvent<T1, T2, T3, T4, T5, T6> MelonEvent<T1, T2, T3, T4, T5, T6, T7> MelonEvent<T1, T2, T3, T4, T5, T6, T7, T8> Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: RedLoader Assembly: RedLoader.dll Syntax public abstract class MelonEventBase<T> where T : Delegate Type Parameters Name Description T Constructors MelonEventBase(bool) Declaration public MelonEventBase(bool oneTimeUse = false) Parameters Type Name Description bool oneTimeUse Fields oneTimeUse Declaration public readonly bool oneTimeUse Field Value Type Description bool Properties Disposed Declaration public bool Disposed { get; } Property Value Type Description bool Methods CheckIfSubscribed(MethodInfo, object) Declaration public bool CheckIfSubscribed(MethodInfo method, object obj = null) Parameters Type Name Description MethodInfo method object obj Returns Type Description bool Dispose() Declaration public void Dispose() GetSubscribers() Declaration public MelonEventBase<T>.MelonEventSubscriber[] GetSubscribers() Returns Type Description MelonEventSubscriber[] Invoke(Action<T>) Declaration protected void Invoke(Action<T> delegateInvoker) Parameters Type Name Description Action<T> delegateInvoker Subscribe(T, int, bool) Declaration public void Subscribe(T action, int priority = 0, bool unsubscribeOnFirstInvocation = false) Parameters Type Name Description T action int priority bool unsubscribeOnFirstInvocation Unsubscribe(MethodInfo, object) Declaration public void Unsubscribe(MethodInfo method, object obj = null) Parameters Type Name Description MethodInfo method object obj Unsubscribe(T) Declaration public void Unsubscribe(T action) Parameters Type Name Description T action UnsubscribeAll() Declaration public void UnsubscribeAll()"
  },
  "api/RedLoader.MelonEventBase-1.MelonEventSubscriber.html": {
    "href": "api/RedLoader.MelonEventBase-1.MelonEventSubscriber.html",
    "title": "Class MelonEventBase<T>.MelonEventSubscriber | RedLoader Docs",
    "keywords": "Class MelonEventBase<T>.MelonEventSubscriber Inheritance object MelonEventBase<T>.MelonEventSubscriber Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: RedLoader Assembly: RedLoader.dll Syntax public class MelonEventBase<T>.MelonEventSubscriber Constructors MelonEventSubscriber() Declaration public MelonEventSubscriber() Fields del Declaration public T del Field Value Type Description T melonAssembly Declaration public MelonAssembly melonAssembly Field Value Type Description MelonAssembly priority Declaration public int priority Field Value Type Description int unsubscribeOnFirstInvocation Declaration public bool unsubscribeOnFirstInvocation Field Value Type Description bool"
  },
  "api/RedLoader.MelonGameAttribute.html": {
    "href": "api/RedLoader.MelonGameAttribute.html",
    "title": "Class MelonGameAttribute | RedLoader Docs",
    "keywords": "Class MelonGameAttribute Inheritance object Attribute MelonGameAttribute Inherited Members Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.Equals(object) Attribute.GetHashCode() Attribute.Match(object) Attribute.IsDefaultAttribute() Attribute.TypeId object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) Namespace: RedLoader Assembly: RedLoader.dll Syntax [AttributeUsage(AttributeTargets.Assembly, AllowMultiple = true)] public class MelonGameAttribute : Attribute Constructors MelonGameAttribute(string, string) Declaration public MelonGameAttribute(string developer = null, string name = null) Parameters Type Name Description string developer string name Properties Developer Developer of the Game. Declaration public string Developer { get; } Property Value Type Description string Name Name of the Game. Declaration public string Name { get; } Property Value Type Description string Universal If the Attribute is set as Universal or not. Declaration public bool Universal { get; } Property Value Type Description bool Methods IsCompatible(MelonGameAttribute) Returns true or false if the Game is compatible with this Assembly. Declaration public bool IsCompatible(MelonGameAttribute att) Parameters Type Name Description MelonGameAttribute att Returns Type Description bool IsCompatible(string, string) Returns true or false if the Game is compatible with this Assembly. Declaration public bool IsCompatible(string developer, string gameName) Parameters Type Name Description string developer string gameName Returns Type Description bool IsCompatibleBecauseUniversal(MelonGameAttribute) Returns true or false if the Game is compatible with this Assembly specifically because of Universal Compatibility. Declaration public bool IsCompatibleBecauseUniversal(MelonGameAttribute att) Parameters Type Name Description MelonGameAttribute att Returns Type Description bool"
  },
  "api/RedLoader.MelonGameVersionAttribute.html": {
    "href": "api/RedLoader.MelonGameVersionAttribute.html",
    "title": "Class MelonGameVersionAttribute | RedLoader Docs",
    "keywords": "Class MelonGameVersionAttribute Inheritance object Attribute MelonGameVersionAttribute Inherited Members Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.Equals(object) Attribute.GetHashCode() Attribute.Match(object) Attribute.IsDefaultAttribute() Attribute.TypeId object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) Namespace: RedLoader Assembly: RedLoader.dll Syntax [AttributeUsage(AttributeTargets.Assembly, AllowMultiple = true)] public class MelonGameVersionAttribute : Attribute Constructors MelonGameVersionAttribute(string) Declaration public MelonGameVersionAttribute(string version = null) Parameters Type Name Description string version Properties Universal If the Attribute is set as Universal or not. Declaration public bool Universal { get; } Property Value Type Description bool Version Version of the Game. Declaration public string Version { get; } Property Value Type Description string"
  },
  "api/RedLoader.MelonHandler.html": {
    "href": "api/RedLoader.MelonHandler.html",
    "title": "Class MelonHandler | RedLoader Docs",
    "keywords": "Class MelonHandler Inheritance object MelonHandler Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: RedLoader Assembly: RedLoader.dll Syntax public static class MelonHandler Methods LoadMelonsFromDirectory<T>(string) Declaration public static void LoadMelonsFromDirectory<T>(string path) where T : ModTypeBase<T> Parameters Type Name Description string path Type Parameters Name Description T LoadModsFromDirectory(string, string) Declaration public static void LoadModsFromDirectory(string path, string name) Parameters Type Name Description string path string name"
  },
  "api/RedLoader.MelonIDAttribute.html": {
    "href": "api/RedLoader.MelonIDAttribute.html",
    "title": "Class MelonIDAttribute | RedLoader Docs",
    "keywords": "Class MelonIDAttribute Inheritance object Attribute MelonIDAttribute Inherited Members Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.Equals(object) Attribute.GetHashCode() Attribute.Match(object) Attribute.IsDefaultAttribute() Attribute.TypeId object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) Namespace: RedLoader Assembly: RedLoader.dll Syntax [AttributeUsage(AttributeTargets.Assembly)] public class MelonIDAttribute : Attribute Constructors MelonIDAttribute(int) Declaration public MelonIDAttribute(int id) Parameters Type Name Description int id MelonIDAttribute(string) Declaration public MelonIDAttribute(string id) Parameters Type Name Description string id Properties ID ID of the Melon. Declaration public string ID { get; } Property Value Type Description string"
  },
  "api/RedLoader.MelonIncompatibleAssembliesAttribute.html": {
    "href": "api/RedLoader.MelonIncompatibleAssembliesAttribute.html",
    "title": "Class MelonIncompatibleAssembliesAttribute | RedLoader Docs",
    "keywords": "Class MelonIncompatibleAssembliesAttribute Inheritance object Attribute MelonIncompatibleAssembliesAttribute Inherited Members Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.Equals(object) Attribute.GetHashCode() Attribute.Match(object) Attribute.IsDefaultAttribute() Attribute.TypeId object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) Namespace: RedLoader Assembly: RedLoader.dll Syntax [AttributeUsage(AttributeTargets.Assembly)] public class MelonIncompatibleAssembliesAttribute : Attribute Constructors MelonIncompatibleAssembliesAttribute(params string[]) Declaration public MelonIncompatibleAssembliesAttribute(params string[] assemblyNames) Parameters Type Name Description string[] assemblyNames Properties AssemblyNames The (simple) assembly names of the mods that are incompatible. Declaration public string[] AssemblyNames { get; } Property Value Type Description string[]"
  },
  "api/RedLoader.MelonInfoAttribute.html": {
    "href": "api/RedLoader.MelonInfoAttribute.html",
    "title": "Class MelonInfoAttribute | RedLoader Docs",
    "keywords": "Class MelonInfoAttribute Inheritance object Attribute MelonInfoAttribute Inherited Members Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.Equals(object) Attribute.GetHashCode() Attribute.Match(object) Attribute.IsDefaultAttribute() Attribute.TypeId object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) Namespace: RedLoader Assembly: RedLoader.dll Syntax [Obsolete(\"Should only be used by plugins.\")] [AttributeUsage(AttributeTargets.Assembly)] public class MelonInfoAttribute : Attribute Constructors MelonInfoAttribute(Type, string, int, int, int, string, string) MelonInfo constructor. Declaration public MelonInfoAttribute(Type type, string name, int versionMajor, int versionMinor, int versionRevision, string author, string downloadLink = null) Parameters Type Name Description Type type The main Melon type of the Melon (for example TestMod) string name Name of the Melon int versionMajor Version Major of the Melon (Using the Semantic Versioning format) int versionMinor Version Minor of the Melon (Using the Semantic Versioning format) int versionRevision Version Revision of the Melon (Using the Semantic Versioning format) string author Author of the Melon string downloadLink URL to the download link of the mod [optional] MelonInfoAttribute(Type, string, int, int, int, string, string, string) MelonInfo constructor. Declaration public MelonInfoAttribute(Type type, string name, int versionMajor, int versionMinor, int versionRevision, string versionIdentifier, string author, string downloadLink = null) Parameters Type Name Description Type type The main Melon type of the Melon (for example TestMod) string name Name of the Melon int versionMajor Version Major of the Melon (Using the Semantic Versioning format) int versionMinor Version Minor of the Melon (Using the Semantic Versioning format) int versionRevision Version Revision of the Melon (Using the Semantic Versioning format) string versionIdentifier Version Identifier of the Melon (Using the Semantic Versioning format) string author Author of the Melon string downloadLink URL to the download link of the mod [optional] Properties Author Author of the Melon. Declaration public string Author { get; } Property Value Type Description string DownloadLink Download Link of the Melon. Declaration public string DownloadLink { get; } Property Value Type Description string Name Name of the Melon. Declaration public string Name { get; } Property Value Type Description string SemanticVersion Semantic Version of the Melon. Will be null if Version is not using the Semantic Versioning format. Declaration public SemVersion SemanticVersion { get; } Property Value Type Description SemVersion SystemType System.Type of the Melon. Declaration public Type SystemType { get; } Property Value Type Description Type Version Version of the Melon. Declaration public string Version { get; } Property Value Type Description string"
  },
  "api/RedLoader.MelonMod.html": {
    "href": "api/RedLoader.MelonMod.html",
    "title": "Class MelonMod | RedLoader Docs",
    "keywords": "Class MelonMod Inheritance object ModBase ModTypeBase<MelonMod> MelonMod BieModWrapper Inherited Members ModTypeBase<MelonMod>.ExecuteAll(LemonAction<MelonMod>, bool, string) ModTypeBase<MelonMod>.RegisteredMods ModTypeBase<MelonMod>.TypeName ModTypeBase<MelonMod>.MelonTypeName ModBase.OnMelonRegistered ModBase.OnMelonUnregistered ModBase.OnMelonInitializing ModBase.OnRegister ModBase.OnUnregister ModBase.CreateWrapper<T>(string, string, string, MelonGameAttribute[], MelonProcessAttribute[], int, Color?, Color?, string) ModBase.RegisterSorted<T>(IEnumerable<T>) ModBase.OnPreSupportModule() ModBase.OnUpdate() ModBase.OnFixedUpdate() ModBase.OnLateUpdate() ModBase.OnGUI() ModBase.OnApplicationQuit() ModBase.OnPreferencesSaved() ModBase.OnPreferencesSaved(string) ModBase.OnPreferencesLoaded() ModBase.OnPreferencesLoaded(string) ModBase.OnEarlyInitializeMelon() ModBase.OnInitializeMod() ModBase.OnLateInitializeMod() ModBase.OnDeinitializeMod() ModBase.FindIncompatiblities(MelonGameAttribute, string, string, string, string, MelonPlatformAttribute.CompatiblePlatforms, MelonPlatformDomainAttribute.CompatibleDomains) ModBase.FindIncompatiblitiesFromContext() ModBase.PrintIncompatibilities(ModBase.Incompatibility[], ModBase) ModBase.Register() ModBase.FindMelon(string, string) ModBase.Unregister(string, bool) ModBase.ExecuteAll(LemonAction<ModBase>, bool, string) ModBase.ExecuteList<T>(LemonAction<T>, List<T>, bool, string) ModBase.SendMessageAll(string, params object[]) ModBase.SendMessage(string, params object[]) ModBase.RegisteredMelons ModBase.MelonAssembly ModBase.Priority ModBase.ConsoleColor ModBase.AuthorConsoleColor ModBase.AdditionalCredits ModBase.SupportedGameVersion ModBase.OptionalDependencies ModBase.HarmonyInstance ModBase.LoggerInstance ModBase.ID ModBase.Description ModBase.Registered object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: RedLoader Assembly: RedLoader.dll Syntax [Obsolete(\"This class is deprecated, please use SonsMod instead.\")] public abstract class MelonMod : ModTypeBase<MelonMod> Constructors MelonMod() Declaration protected MelonMod() Methods OnSceneWasInitialized(int, string) Runs once a Scene is initialized. Declaration public virtual void OnSceneWasInitialized(int buildIndex, string sceneName) Parameters Type Name Description int buildIndex string sceneName OnSceneWasLoaded(int, string) Runs when a new Scene is loaded. Declaration public virtual void OnSceneWasLoaded(int buildIndex, string sceneName) Parameters Type Name Description int buildIndex string sceneName OnSceneWasUnloaded(int, string) Runs once a Scene unloads. Declaration public virtual void OnSceneWasUnloaded(int buildIndex, string sceneName) Parameters Type Name Description int buildIndex string sceneName"
  },
  "api/RedLoader.MelonOptionalDependenciesAttribute.html": {
    "href": "api/RedLoader.MelonOptionalDependenciesAttribute.html",
    "title": "Class MelonOptionalDependenciesAttribute | RedLoader Docs",
    "keywords": "Class MelonOptionalDependenciesAttribute Inheritance object Attribute MelonOptionalDependenciesAttribute Inherited Members Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.Equals(object) Attribute.GetHashCode() Attribute.Match(object) Attribute.IsDefaultAttribute() Attribute.TypeId object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) Namespace: RedLoader Assembly: RedLoader.dll Syntax [AttributeUsage(AttributeTargets.Assembly)] public class MelonOptionalDependenciesAttribute : Attribute Constructors MelonOptionalDependenciesAttribute(params string[]) Declaration public MelonOptionalDependenciesAttribute(params string[] assemblyNames) Parameters Type Name Description string[] assemblyNames Properties AssemblyNames The (simple) assembly names of the dependencies that should be regarded as optional. Declaration public string[] AssemblyNames { get; } Property Value Type Description string[]"
  },
  "api/RedLoader.MelonPlatformAttribute.CompatiblePlatforms.html": {
    "href": "api/RedLoader.MelonPlatformAttribute.CompatiblePlatforms.html",
    "title": "Enum MelonPlatformAttribute.CompatiblePlatforms | RedLoader Docs",
    "keywords": "Enum MelonPlatformAttribute.CompatiblePlatforms Namespace: RedLoader Assembly: RedLoader.dll Syntax public enum MelonPlatformAttribute.CompatiblePlatforms Fields Name Description UNIVERSAL WINDOWS_X64 WINDOWS_X86 Extension Methods EnumExtensions.HasFlag(Enum, Enum)"
  },
  "api/RedLoader.MelonPlatformAttribute.html": {
    "href": "api/RedLoader.MelonPlatformAttribute.html",
    "title": "Class MelonPlatformAttribute | RedLoader Docs",
    "keywords": "Class MelonPlatformAttribute Inheritance object Attribute MelonPlatformAttribute Inherited Members Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.Equals(object) Attribute.GetHashCode() Attribute.Match(object) Attribute.IsDefaultAttribute() Attribute.TypeId object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) Namespace: RedLoader Assembly: RedLoader.dll Syntax [AttributeUsage(AttributeTargets.Assembly)] public class MelonPlatformAttribute : Attribute Constructors MelonPlatformAttribute(params CompatiblePlatforms[]) Declaration public MelonPlatformAttribute(params MelonPlatformAttribute.CompatiblePlatforms[] platforms) Parameters Type Name Description CompatiblePlatforms[] platforms Properties Platforms Declaration public MelonPlatformAttribute.CompatiblePlatforms[] Platforms { get; } Property Value Type Description CompatiblePlatforms[] Methods IsCompatible(CompatiblePlatforms) Declaration public bool IsCompatible(MelonPlatformAttribute.CompatiblePlatforms platform) Parameters Type Name Description MelonPlatformAttribute.CompatiblePlatforms platform Returns Type Description bool"
  },
  "api/RedLoader.MelonPlatformDomainAttribute.CompatibleDomains.html": {
    "href": "api/RedLoader.MelonPlatformDomainAttribute.CompatibleDomains.html",
    "title": "Enum MelonPlatformDomainAttribute.CompatibleDomains | RedLoader Docs",
    "keywords": "Enum MelonPlatformDomainAttribute.CompatibleDomains Namespace: RedLoader Assembly: RedLoader.dll Syntax public enum MelonPlatformDomainAttribute.CompatibleDomains Fields Name Description IL2CPP MONO UNIVERSAL Extension Methods EnumExtensions.HasFlag(Enum, Enum)"
  },
  "api/RedLoader.MelonPlatformDomainAttribute.html": {
    "href": "api/RedLoader.MelonPlatformDomainAttribute.html",
    "title": "Class MelonPlatformDomainAttribute | RedLoader Docs",
    "keywords": "Class MelonPlatformDomainAttribute Inheritance object Attribute MelonPlatformDomainAttribute Inherited Members Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.Equals(object) Attribute.GetHashCode() Attribute.Match(object) Attribute.IsDefaultAttribute() Attribute.TypeId object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) Namespace: RedLoader Assembly: RedLoader.dll Syntax [AttributeUsage(AttributeTargets.Assembly)] public class MelonPlatformDomainAttribute : Attribute Constructors MelonPlatformDomainAttribute(CompatibleDomains) Declaration public MelonPlatformDomainAttribute(MelonPlatformDomainAttribute.CompatibleDomains domain = CompatibleDomains.UNIVERSAL) Parameters Type Name Description MelonPlatformDomainAttribute.CompatibleDomains domain Properties Domain Declaration public MelonPlatformDomainAttribute.CompatibleDomains Domain { get; } Property Value Type Description MelonPlatformDomainAttribute.CompatibleDomains Methods IsCompatible(CompatibleDomains) Declaration public bool IsCompatible(MelonPlatformDomainAttribute.CompatibleDomains domain) Parameters Type Name Description MelonPlatformDomainAttribute.CompatibleDomains domain Returns Type Description bool"
  },
  "api/RedLoader.MelonPlugin.html": {
    "href": "api/RedLoader.MelonPlugin.html",
    "title": "Class MelonPlugin | RedLoader Docs",
    "keywords": "Class MelonPlugin Inheritance object ModBase ModTypeBase<MelonPlugin> MelonPlugin Inherited Members ModTypeBase<MelonPlugin>.ExecuteAll(LemonAction<MelonPlugin>, bool, string) ModTypeBase<MelonPlugin>.RegisteredMods ModTypeBase<MelonPlugin>.TypeName ModTypeBase<MelonPlugin>.MelonTypeName ModBase.OnMelonRegistered ModBase.OnMelonUnregistered ModBase.OnMelonInitializing ModBase.OnRegister ModBase.OnUnregister ModBase.CreateWrapper<T>(string, string, string, MelonGameAttribute[], MelonProcessAttribute[], int, Color?, Color?, string) ModBase.RegisterSorted<T>(IEnumerable<T>) ModBase.OnPreSupportModule() ModBase.OnUpdate() ModBase.OnFixedUpdate() ModBase.OnLateUpdate() ModBase.OnGUI() ModBase.OnApplicationQuit() ModBase.OnPreferencesSaved() ModBase.OnPreferencesSaved(string) ModBase.OnPreferencesLoaded() ModBase.OnPreferencesLoaded(string) ModBase.OnEarlyInitializeMelon() ModBase.OnInitializeMod() ModBase.OnLateInitializeMod() ModBase.OnDeinitializeMod() ModBase.FindIncompatiblities(MelonGameAttribute, string, string, string, string, MelonPlatformAttribute.CompatiblePlatforms, MelonPlatformDomainAttribute.CompatibleDomains) ModBase.FindIncompatiblitiesFromContext() ModBase.PrintIncompatibilities(ModBase.Incompatibility[], ModBase) ModBase.Register() ModBase.FindMelon(string, string) ModBase.Unregister(string, bool) ModBase.ExecuteAll(LemonAction<ModBase>, bool, string) ModBase.ExecuteList<T>(LemonAction<T>, List<T>, bool, string) ModBase.SendMessageAll(string, params object[]) ModBase.SendMessage(string, params object[]) ModBase.RegisteredMelons ModBase.MelonAssembly ModBase.Priority ModBase.ConsoleColor ModBase.AuthorConsoleColor ModBase.AdditionalCredits ModBase.SupportedGameVersion ModBase.OptionalDependencies ModBase.HarmonyInstance ModBase.LoggerInstance ModBase.ID ModBase.Description ModBase.Registered object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: RedLoader Assembly: RedLoader.dll Syntax public abstract class MelonPlugin : ModTypeBase<MelonPlugin> Constructors MelonPlugin() Declaration protected MelonPlugin() Methods OnApplicationEarlyStart() Runs after Game Initialization, before OnApplicationStart and before Assembly Generation on Il2Cpp games Declaration public virtual void OnApplicationEarlyStart() OnApplicationStarted() Runs after all RedLoader components are fully initialized (including all MelonMods). Declaration public virtual void OnApplicationStarted() OnPreInitialization() Runs before Game Initialization. Declaration public virtual void OnPreInitialization() OnPreModsLoaded() Runs before MelonMods from the Mods folder are loaded. Declaration public virtual void OnPreModsLoaded()"
  },
  "api/RedLoader.MelonPriorityAttribute.html": {
    "href": "api/RedLoader.MelonPriorityAttribute.html",
    "title": "Class MelonPriorityAttribute | RedLoader Docs",
    "keywords": "Class MelonPriorityAttribute Inheritance object Attribute MelonPriorityAttribute Inherited Members Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.Equals(object) Attribute.GetHashCode() Attribute.Match(object) Attribute.IsDefaultAttribute() Attribute.TypeId object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) Namespace: RedLoader Assembly: RedLoader.dll Syntax [AttributeUsage(AttributeTargets.Assembly)] public class MelonPriorityAttribute : Attribute Constructors MelonPriorityAttribute(int) Declaration public MelonPriorityAttribute(int priority = 0) Parameters Type Name Description int priority Fields Priority Priority of the Melon. Declaration public int Priority Field Value Type Description int"
  },
  "api/RedLoader.MelonProcessAttribute.html": {
    "href": "api/RedLoader.MelonProcessAttribute.html",
    "title": "Class MelonProcessAttribute | RedLoader Docs",
    "keywords": "Class MelonProcessAttribute Inheritance object Attribute MelonProcessAttribute Inherited Members Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.Equals(object) Attribute.GetHashCode() Attribute.Match(object) Attribute.IsDefaultAttribute() Attribute.TypeId object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) Namespace: RedLoader Assembly: RedLoader.dll Syntax [AttributeUsage(AttributeTargets.Assembly, AllowMultiple = true)] public class MelonProcessAttribute : Attribute Constructors MelonProcessAttribute(string) Declaration public MelonProcessAttribute(string exe_name = null) Parameters Type Name Description string exe_name Properties EXE_Name Name of the Game's Executable without the '.exe' extension. Declaration public string EXE_Name { get; } Property Value Type Description string Universal If the Attribute is set as Universal or not. Declaration public bool Universal { get; } Property Value Type Description bool Methods IsCompatible(string) Checks if the Attribute is compatible with processName or not. Declaration public bool IsCompatible(string processName) Parameters Type Name Description string processName Returns Type Description bool"
  },
  "api/RedLoader.ModBase.html": {
    "href": "api/RedLoader.ModBase.html",
    "title": "Class ModBase | RedLoader Docs",
    "keywords": "Class ModBase Inheritance object ModBase ModTypeBase<T> Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: RedLoader Assembly: RedLoader.dll Syntax public abstract class ModBase Constructors ModBase() Declaration protected ModBase() Fields OnMelonInitializing Called before a Melon starts initializing. Declaration public static readonly MelonEvent<ModBase> OnMelonInitializing Field Value Type Description MelonEvent<ModBase> OnMelonRegistered Called once a Melon is fully registered. Declaration public static readonly MelonEvent<ModBase> OnMelonRegistered Field Value Type Description MelonEvent<ModBase> OnMelonUnregistered Called when a Melon unregisters. Declaration public static readonly MelonEvent<ModBase> OnMelonUnregistered Field Value Type Description MelonEvent<ModBase> OnRegister Declaration public readonly MelonEvent OnRegister Field Value Type Description MelonEvent OnUnregister Declaration public readonly MelonEvent OnUnregister Field Value Type Description MelonEvent Properties AdditionalCredits AdditionalCredits Attribute of the Melon Declaration public MelonAdditionalCreditsAttribute AdditionalCredits { get; } Property Value Type Description MelonAdditionalCreditsAttribute AuthorConsoleColor Console Color of the Author that made this melon. Declaration public Color AuthorConsoleColor { get; } Property Value Type Description Color ConsoleColor Console Color of the Melon. Declaration public Color ConsoleColor { get; } Property Value Type Description Color Description Description of the Mod. Declaration public string Description { get; } Property Value Type Description string HarmonyInstance Auto-Created Harmony Instance of the Melon. Declaration public Harmony HarmonyInstance { get; } Property Value Type Description Harmony ID Optional ID of the Melon. Declaration public string ID { get; } Property Value Type Description string LoggerInstance Auto-Created MelonLogger Instance of the Melon. Declaration public RLog.Instance LoggerInstance { get; } Property Value Type Description RLog.Instance MelonAssembly MelonAssembly of the Melon. Declaration public MelonAssembly MelonAssembly { get; } Property Value Type Description MelonAssembly MelonTypeName Name of the current Melon Type. Declaration public abstract string MelonTypeName { get; } Property Value Type Description string OptionalDependencies Optional Dependencies Attribute of the Melon. Declaration public string[] OptionalDependencies { get; } Property Value Type Description string[] Priority Priority of the Melon. Declaration public int Priority { get; } Property Value Type Description int Registered true if the Melon is registered. Declaration public bool Registered { get; } Property Value Type Description bool RegisteredMelons Declaration public static ReadOnlyCollection<ModBase> RegisteredMelons { get; } Property Value Type Description ReadOnlyCollection<ModBase> SupportedGameVersion Game Version Attributes of the Melon. Declaration public string SupportedGameVersion { get; } Property Value Type Description string Methods CreateWrapper<T>(string, string, string, MelonGameAttribute[], MelonProcessAttribute[], int, Color?, Color?, string) Creates a new Melon instance for a Wrapper. Declaration public static T CreateWrapper<T>(string name, string author, string version, MelonGameAttribute[] games = null, MelonProcessAttribute[] processes = null, int priority = 0, Color? color = null, Color? authorColor = null, string id = null) where T : ModBase, new() Parameters Type Name Description string name string author string version MelonGameAttribute[] games MelonProcessAttribute[] processes int priority Color? color Color? authorColor string id Returns Type Description T Type Parameters Name Description T ExecuteAll(LemonAction<ModBase>, bool, string) Declaration public static void ExecuteAll(LemonAction<ModBase> func, bool unregisterOnFail = false, string unregistrationReason = null) Parameters Type Name Description LemonAction<ModBase> func bool unregisterOnFail string unregistrationReason ExecuteList<T>(LemonAction<T>, List<T>, bool, string) Declaration public static void ExecuteList<T>(LemonAction<T> func, List<T> melons, bool unregisterOnFail = false, string unregistrationReason = null) where T : ModBase Parameters Type Name Description LemonAction<T> func List<T> melons bool unregisterOnFail string unregistrationReason Type Parameters Name Description T FindIncompatiblities(MelonGameAttribute, string, string, string, string, CompatiblePlatforms, CompatibleDomains) Declaration public ModBase.Incompatibility[] FindIncompatiblities(MelonGameAttribute game, string processName, string gameVersion, string mlVersion, string mlBuildHashCode, MelonPlatformAttribute.CompatiblePlatforms platform, MelonPlatformDomainAttribute.CompatibleDomains domain) Parameters Type Name Description MelonGameAttribute game string processName string gameVersion string mlVersion string mlBuildHashCode MelonPlatformAttribute.CompatiblePlatforms platform MelonPlatformDomainAttribute.CompatibleDomains domain Returns Type Description Incompatibility[] FindIncompatiblitiesFromContext() Declaration public ModBase.Incompatibility[] FindIncompatiblitiesFromContext() Returns Type Description Incompatibility[] FindMelon(string, string) Tries to find a registered Melon that matches the given Info. Declaration public static ModBase FindMelon(string melonName, string melonAuthor) Parameters Type Name Description string melonName string melonAuthor Returns Type Description ModBase OnApplicationQuit() Runs on a quit request. It is possible to abort the request in this callback. Declaration protected virtual void OnApplicationQuit() OnDeinitializeMod() Runs when the mod is unregistered. Also runs before the Application is closed (OnApplicationDefiniteQuit). Declaration protected virtual void OnDeinitializeMod() OnEarlyInitializeMelon() Runs when the Melon is registered. Executed before the Melon's info is printed to the console. This callback should only be used a constructor for the Melon. Declaration protected virtual void OnEarlyInitializeMelon() Remarks Please note that this callback may run before the Support Module is loaded. As a result, using unhollowed assemblies may not be possible yet and you would have to override OnInitializeMod() instead. OnFixedUpdate() Can run multiple times per frame. Mostly used for Physics. Declaration protected virtual void OnFixedUpdate() OnGUI() Can run multiple times per frame. Mostly used for Unity's IMGUI. Declaration protected virtual void OnGUI() OnInitializeMod() Runs after the Mod has registered. This callback waits until the loader has fully initialized (OnApplicationStart). Declaration protected virtual void OnInitializeMod() OnLateInitializeMod() Runs after OnInitializeMod(). This callback waits until Unity has invoked the first 'Start' messages (OnApplicationLateStart). Declaration protected virtual void OnLateInitializeMod() OnLateUpdate() Runs once per frame, after OnUpdate(). Declaration protected virtual void OnLateUpdate() OnPreSupportModule() Runs before Support Module Initialization and after Assembly Generation for Il2Cpp Games. Declaration protected virtual void OnPreSupportModule() OnPreferencesLoaded() Runs when Melon Preferences get loaded. Declaration protected virtual void OnPreferencesLoaded() OnPreferencesLoaded(string) Runs when Melon Preferences get loaded. Gets passed the Preferences's File Path. Declaration protected virtual void OnPreferencesLoaded(string filepath) Parameters Type Name Description string filepath OnPreferencesSaved() Runs when Melon Preferences get saved. Declaration protected virtual void OnPreferencesSaved() OnPreferencesSaved(string) Runs when Melon Preferences get saved. Gets passed the Preferences's File Path. Declaration protected virtual void OnPreferencesSaved(string filepath) Parameters Type Name Description string filepath OnUpdate() Runs once per frame. Declaration protected virtual void OnUpdate() PrintIncompatibilities(Incompatibility[], ModBase) Declaration public static void PrintIncompatibilities(ModBase.Incompatibility[] incompatibilities, ModBase mod) Parameters Type Name Description Incompatibility[] incompatibilities ModBase mod Register() Registers the Melon. Declaration public bool Register() Returns Type Description bool RegisterSorted<T>(IEnumerable<T>) Registers a List of Melons in the right order. Declaration public static void RegisterSorted<T>(IEnumerable<T> melons) where T : ModBase Parameters Type Name Description IEnumerable<T> melons Type Parameters Name Description T SendMessage(string, params object[]) Declaration public object SendMessage(string name, params object[] arguments) Parameters Type Name Description string name object[] arguments Returns Type Description object SendMessageAll(string, params object[]) Declaration public static void SendMessageAll(string name, params object[] arguments) Parameters Type Name Description string name object[] arguments Unregister(string, bool) Unregisters the Melon and all other Melons located in the same Assembly. This only unsubscribes the Melons from all Callbacks/MelonEvents and unpatches all Methods that were patched by Harmony, but doesn't actually unload the whole Assembly. Declaration public void Unregister(string reason = null, bool silent = false) Parameters Type Name Description string reason bool silent"
  },
  "api/RedLoader.ModBase.Incompatibility.html": {
    "href": "api/RedLoader.ModBase.Incompatibility.html",
    "title": "Enum ModBase.Incompatibility | RedLoader Docs",
    "keywords": "Enum ModBase.Incompatibility Namespace: RedLoader Assembly: RedLoader.dll Syntax public enum ModBase.Incompatibility Fields Name Description Domain Game GameVersion MLBuild MLVersion Platform ProcessName Extension Methods EnumExtensions.HasFlag(Enum, Enum)"
  },
  "api/RedLoader.ModTypeBase-1.html": {
    "href": "api/RedLoader.ModTypeBase-1.html",
    "title": "Class ModTypeBase<T> | RedLoader Docs",
    "keywords": "Class ModTypeBase<T> Inheritance object ModBase ModTypeBase<T> MelonMod MelonPlugin SonsMod Inherited Members ModBase.OnMelonRegistered ModBase.OnMelonUnregistered ModBase.OnMelonInitializing ModBase.OnRegister ModBase.OnUnregister ModBase.CreateWrapper<T>(string, string, string, MelonGameAttribute[], MelonProcessAttribute[], int, Color?, Color?, string) ModBase.RegisterSorted<T>(IEnumerable<T>) ModBase.OnPreSupportModule() ModBase.OnUpdate() ModBase.OnFixedUpdate() ModBase.OnLateUpdate() ModBase.OnGUI() ModBase.OnApplicationQuit() ModBase.OnPreferencesSaved() ModBase.OnPreferencesSaved(string) ModBase.OnPreferencesLoaded() ModBase.OnPreferencesLoaded(string) ModBase.OnEarlyInitializeMelon() ModBase.OnInitializeMod() ModBase.OnLateInitializeMod() ModBase.OnDeinitializeMod() ModBase.FindIncompatiblities(MelonGameAttribute, string, string, string, string, MelonPlatformAttribute.CompatiblePlatforms, MelonPlatformDomainAttribute.CompatibleDomains) ModBase.FindIncompatiblitiesFromContext() ModBase.PrintIncompatibilities(ModBase.Incompatibility[], ModBase) ModBase.Register() ModBase.FindMelon(string, string) ModBase.Unregister(string, bool) ModBase.ExecuteAll(LemonAction<ModBase>, bool, string) ModBase.ExecuteList<T>(LemonAction<T>, List<T>, bool, string) ModBase.SendMessageAll(string, params object[]) ModBase.SendMessage(string, params object[]) ModBase.RegisteredMelons ModBase.MelonAssembly ModBase.Priority ModBase.ConsoleColor ModBase.AuthorConsoleColor ModBase.AdditionalCredits ModBase.SupportedGameVersion ModBase.OptionalDependencies ModBase.HarmonyInstance ModBase.LoggerInstance ModBase.ID ModBase.Description ModBase.Registered object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: RedLoader Assembly: RedLoader.dll Syntax public abstract class ModTypeBase<T> : ModBase where T : ModTypeBase<T> Type Parameters Name Description T Constructors ModTypeBase() Declaration protected ModTypeBase() Properties MelonTypeName Name of the current Melon Type. Declaration public override sealed string MelonTypeName { get; } Property Value Type Description string Overrides ModBase.MelonTypeName RegisteredMods List of registered Ts. Declaration public static ReadOnlyCollection<T> RegisteredMods { get; } Property Value Type Description ReadOnlyCollection<T> TypeName A Human-Readable Name for T. Declaration public static string TypeName { get; protected set; } Property Value Type Description string Methods ExecuteAll(LemonAction<T>, bool, string) Declaration public static void ExecuteAll(LemonAction<T> func, bool unregisterOnFail = false, string unregistrationReason = null) Parameters Type Name Description LemonAction<T> func bool unregisterOnFail string unregistrationReason"
  },
  "api/RedLoader.NativeLibrary-1.html": {
    "href": "api/RedLoader.NativeLibrary-1.html",
    "title": "Class NativeLibrary<T> | RedLoader Docs",
    "keywords": "Class NativeLibrary<T> Inheritance object NativeLibrary NativeLibrary<T> Inherited Members NativeLibrary.Ptr NativeLibrary.Load(string) NativeLibrary.Load<T>(string) NativeLibrary.ReflectiveLoad<T>(string) NativeLibrary.LoadLib(string) NativeLibrary.GetExport(string) NativeLibrary.GetExport(Type, string) NativeLibrary.GetExport<T>(string) NativeLibrary.GetExport<T>(string, out T) NativeLibrary.GetExport(IntPtr, string) NativeLibrary.AgnosticLoadLibrary(string) NativeLibrary.AgnosticGetProcAddress(IntPtr, string) NativeLibrary.dlopen(string, int) NativeLibrary.dlsym(IntPtr, string) object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: RedLoader Assembly: RedLoader.dll Syntax public class NativeLibrary<T> : NativeLibrary Type Parameters Name Description T Constructors NativeLibrary(IntPtr) Declaration public NativeLibrary(IntPtr ptr) Parameters Type Name Description IntPtr ptr Fields Instance Declaration public readonly T Instance Field Value Type Description T"
  },
  "api/RedLoader.NativeLibrary.html": {
    "href": "api/RedLoader.NativeLibrary.html",
    "title": "Class NativeLibrary | RedLoader Docs",
    "keywords": "Class NativeLibrary Inheritance object NativeLibrary NativeLibrary<T> Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: RedLoader Assembly: RedLoader.dll Syntax public class NativeLibrary Constructors NativeLibrary(IntPtr) Declaration public NativeLibrary(IntPtr ptr) Parameters Type Name Description IntPtr ptr Fields Ptr Declaration public readonly IntPtr Ptr Field Value Type Description IntPtr Methods AgnosticGetProcAddress(IntPtr, string) Declaration public static IntPtr AgnosticGetProcAddress(IntPtr hModule, string lpProcName) Parameters Type Name Description IntPtr hModule string lpProcName Returns Type Description IntPtr AgnosticLoadLibrary(string) Declaration public static IntPtr AgnosticLoadLibrary(string name) Parameters Type Name Description string name Returns Type Description IntPtr GetExport(IntPtr, string) Declaration public static IntPtr GetExport(IntPtr nativeLib, string name) Parameters Type Name Description IntPtr nativeLib string name Returns Type Description IntPtr GetExport(string) Declaration public IntPtr GetExport(string name) Parameters Type Name Description string name Returns Type Description IntPtr GetExport(Type, string) Declaration public Delegate GetExport(Type type, string name) Parameters Type Name Description Type type string name Returns Type Description Delegate GetExport<T>(string) Declaration public T GetExport<T>(string name) where T : Delegate Parameters Type Name Description string name Returns Type Description T Type Parameters Name Description T GetExport<T>(string, out T) Declaration public void GetExport<T>(string name, out T output) where T : Delegate Parameters Type Name Description string name T output Type Parameters Name Description T Load(string) Declaration public static NativeLibrary Load(string filepath) Parameters Type Name Description string filepath Returns Type Description NativeLibrary LoadLib(string) Declaration public static IntPtr LoadLib(string filepath) Parameters Type Name Description string filepath Returns Type Description IntPtr Load<T>(string) Declaration public static NativeLibrary<T> Load<T>(string filepath) Parameters Type Name Description string filepath Returns Type Description NativeLibrary<T> Type Parameters Name Description T ReflectiveLoad<T>(string) Declaration public static T ReflectiveLoad<T>(string filepath) Parameters Type Name Description string filepath Returns Type Description T Type Parameters Name Description T dlopen(string, int) Declaration protected static extern IntPtr dlopen(string filename, int flags) Parameters Type Name Description string filename int flags Returns Type Description IntPtr dlsym(IntPtr, string) Declaration protected static extern IntPtr dlsym(IntPtr handle, string symbol) Parameters Type Name Description IntPtr handle string symbol Returns Type Description IntPtr"
  },
  "api/RedLoader.Pastel.ConsoleExtensions.html": {
    "href": "api/RedLoader.Pastel.ConsoleExtensions.html",
    "title": "Class ConsoleExtensions | RedLoader Docs",
    "keywords": "Class ConsoleExtensions Controls colored console output by Pastel. Inheritance object ConsoleExtensions Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: RedLoader.Pastel Assembly: RedLoader.dll Syntax public static class ConsoleExtensions Methods Disable() Disables any future console color output produced by Pastel. Declaration public static void Disable() Enable() Enables any future console color output produced by Pastel. Declaration public static void Enable() Pastel(string, Color) Returns a string wrapped in an ANSI foreground color code using the specified color. Declaration public static string Pastel(this string input, Color color) Parameters Type Name Description string input The string to color. Color color The color to use on the specified string. Returns Type Description string Pastel(string, string) Returns a string wrapped in an ANSI foreground color code using the specified color. Declaration public static string Pastel(this string input, string hexColor) Parameters Type Name Description string input The string to color. string hexColor The color to use on the specified string. Supported format: [#]RRGGBB. Returns Type Description string PastelBg(string, Color) Returns a string wrapped in an ANSI background color code using the specified color. Declaration public static string PastelBg(this string input, Color color) Parameters Type Name Description string input The string to color. Color color The color to use on the specified string. Returns Type Description string PastelBg(string, string) Returns a string wrapped in an ANSI background color code using the specified color. Declaration public static string PastelBg(this string input, string hexColor) Parameters Type Name Description string input The string to color. string hexColor The color to use on the specified string. Supported format: [#]RRGGBB. Returns Type Description string"
  },
  "api/RedLoader.Pastel.html": {
    "href": "api/RedLoader.Pastel.html",
    "title": "Namespace RedLoader.Pastel | RedLoader Docs",
    "keywords": "Namespace RedLoader.Pastel Classes ConsoleExtensions Controls colored console output by Pastel."
  },
  "api/RedLoader.PatchShield.html": {
    "href": "api/RedLoader.PatchShield.html",
    "title": "Class PatchShield | RedLoader Docs",
    "keywords": "Class PatchShield Inheritance object Attribute PatchShield Inherited Members Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.Equals(object) Attribute.GetHashCode() Attribute.Match(object) Attribute.IsDefaultAttribute() Attribute.TypeId object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) Namespace: RedLoader Assembly: RedLoader.dll Syntax [AttributeUsage(AttributeTargets.Assembly|AttributeTargets.Class|AttributeTargets.Struct|AttributeTargets.Method)] public class PatchShield : Attribute Constructors PatchShield() Declaration public PatchShield()"
  },
  "api/RedLoader.Preferences.html": {
    "href": "api/RedLoader.Preferences.html",
    "title": "Namespace RedLoader.Preferences | RedLoader Docs",
    "keywords": "Namespace RedLoader.Preferences Classes ReflectiveConfigCategory ValueRange<T> ValueValidator Interfaces IValueRange"
  },
  "api/RedLoader.Preferences.IValueRange.html": {
    "href": "api/RedLoader.Preferences.IValueRange.html",
    "title": "Interface IValueRange | RedLoader Docs",
    "keywords": "Interface IValueRange Namespace: RedLoader.Preferences Assembly: RedLoader.dll Syntax public interface IValueRange Properties MaxValue Declaration object MaxValue { get; } Property Value Type Description object MinValue Declaration object MinValue { get; } Property Value Type Description object"
  },
  "api/RedLoader.Preferences.ReflectiveConfigCategory.html": {
    "href": "api/RedLoader.Preferences.ReflectiveConfigCategory.html",
    "title": "Class ReflectiveConfigCategory | RedLoader Docs",
    "keywords": "Class ReflectiveConfigCategory Inheritance object ReflectiveConfigCategory Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: RedLoader.Preferences Assembly: RedLoader.dll Syntax public class ReflectiveConfigCategory Properties DisplayName Declaration public string DisplayName { get; } Property Value Type Description string Identifier Declaration public string Identifier { get; } Property Value Type Description string Methods DestroyFileWatcher() Declaration public void DestroyFileWatcher() GetValue<T>() Declaration public T GetValue<T>() where T : new() Returns Type Description T Type Parameters Name Description T LoadFromFile(bool) Declaration public void LoadFromFile(bool printmsg = true) Parameters Type Name Description bool printmsg ResetFilePath() Declaration public void ResetFilePath() SaveToFile(bool) Declaration public void SaveToFile(bool printmsg = true) Parameters Type Name Description bool printmsg SetFilePath(string, bool, bool) Declaration public void SetFilePath(string filepath, bool autoload = true, bool printmsg = true) Parameters Type Name Description string filepath bool autoload bool printmsg"
  },
  "api/RedLoader.Preferences.ValueRange-1.html": {
    "href": "api/RedLoader.Preferences.ValueRange-1.html",
    "title": "Class ValueRange<T> | RedLoader Docs",
    "keywords": "Class ValueRange<T> Inheritance object ValueValidator ValueRange<T> Implements IValueRange Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: RedLoader.Preferences Assembly: RedLoader.dll Syntax public class ValueRange<T> : ValueValidator, IValueRange where T : IComparable Type Parameters Name Description T Constructors ValueRange(T, T) Declaration public ValueRange(T minValue, T maxValue) Parameters Type Name Description T minValue T maxValue Properties MaxValue Declaration public T MaxValue { get; } Property Value Type Description T MinValue Declaration public T MinValue { get; } Property Value Type Description T Methods EnsureValid(object) Declaration public override object EnsureValid(object value) Parameters Type Name Description object value Returns Type Description object Overrides ValueValidator.EnsureValid(object) IsValid(object) Declaration public override bool IsValid(object value) Parameters Type Name Description object value Returns Type Description bool Overrides ValueValidator.IsValid(object) Implements IValueRange"
  },
  "api/RedLoader.Preferences.ValueValidator.html": {
    "href": "api/RedLoader.Preferences.ValueValidator.html",
    "title": "Class ValueValidator | RedLoader Docs",
    "keywords": "Class ValueValidator Inheritance object ValueValidator ValueRange<T> Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: RedLoader.Preferences Assembly: RedLoader.dll Syntax public abstract class ValueValidator Constructors ValueValidator() Declaration protected ValueValidator() Methods EnsureValid(object) Declaration public abstract object EnsureValid(object value) Parameters Type Name Description object value Returns Type Description object IsValid(object) Declaration public abstract bool IsValid(object value) Parameters Type Name Description object value Returns Type Description bool"
  },
  "api/RedLoader.RegisterTypeInIl2Cpp.html": {
    "href": "api/RedLoader.RegisterTypeInIl2Cpp.html",
    "title": "Class RegisterTypeInIl2Cpp | RedLoader Docs",
    "keywords": "Class RegisterTypeInIl2Cpp Inheritance object Attribute RegisterTypeInIl2Cpp Inherited Members Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.Equals(object) Attribute.GetHashCode() Attribute.Match(object) Attribute.IsDefaultAttribute() Attribute.TypeId object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) Namespace: RedLoader Assembly: RedLoader.dll Syntax [AttributeUsage(AttributeTargets.Class)] public class RegisterTypeInIl2Cpp : Attribute Constructors RegisterTypeInIl2Cpp() Declaration public RegisterTypeInIl2Cpp() RegisterTypeInIl2Cpp(bool) Declaration public RegisterTypeInIl2Cpp(bool logSuccess) Parameters Type Name Description bool logSuccess Methods RegisterAssembly(Assembly) Declaration public static void RegisterAssembly(Assembly asm) Parameters Type Name Description Assembly asm"
  },
  "api/RedLoader.ResolvedMelons.html": {
    "href": "api/RedLoader.ResolvedMelons.html",
    "title": "Class ResolvedMelons | RedLoader Docs",
    "keywords": "Class ResolvedMelons Inheritance object ResolvedMelons Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: RedLoader Assembly: RedLoader.dll Syntax public sealed class ResolvedMelons Constructors ResolvedMelons(ModBase[], RottenMelon[]) Declaration public ResolvedMelons(ModBase[] loadedMelons, RottenMelon[] rottenMelons) Parameters Type Name Description ModBase[] loadedMelons RottenMelon[] rottenMelons Fields loadedMelons Declaration public readonly ModBase[] loadedMelons Field Value Type Description ModBase[] rottenMelons Declaration public readonly RottenMelon[] rottenMelons Field Value Type Description RottenMelon[]"
  },
  "api/RedLoader.RLog.html": {
    "href": "api/RedLoader.RLog.html",
    "title": "Class RLog | RedLoader Docs",
    "keywords": "Class RLog Inheritance object RLog Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: RedLoader Assembly: RedLoader.dll Syntax public class RLog Constructors RLog() Declaration public RLog() Fields DefaultMelonColor Declaration public static readonly Color DefaultMelonColor Field Value Type Description Color DefaultTextColor Declaration public static readonly Color DefaultTextColor Field Value Type Description Color Methods BigError(string, string) Declaration public static void BigError(string namesection, string txt) Parameters Type Name Description string namesection string txt Debug(object) Declaration [Conditional(\"DEBUG\")] public static void Debug(object obj) Parameters Type Name Description object obj DebugBig(object) Declaration [Conditional(\"DEBUG\")] public static void DebugBig(object obj) Parameters Type Name Description object obj Error(object) Declaration public static void Error(object obj) Parameters Type Name Description object obj Error(string) Declaration public static void Error(string txt) Parameters Type Name Description string txt Error(string, Exception) Declaration public static void Error(string txt, Exception ex) Parameters Type Name Description string txt Exception ex Error(string, params object[]) Declaration public static void Error(string txt, params object[] args) Parameters Type Name Description string txt object[] args Log(ConsoleColor, object) Declaration [Obsolete(\"Log is obsolete. Please use Msg instead.\")] public static void Log(ConsoleColor color, object obj) Parameters Type Name Description ConsoleColor color object obj Log(ConsoleColor, string) Declaration [Obsolete(\"Log is obsolete. Please use Msg instead.\")] public static void Log(ConsoleColor color, string txt) Parameters Type Name Description ConsoleColor color string txt Log(ConsoleColor, string, params object[]) Declaration [Obsolete(\"Log is obsolete. Please use Msg instead.\")] public static void Log(ConsoleColor color, string txt, params object[] args) Parameters Type Name Description ConsoleColor color string txt object[] args Log(object) Declaration [Obsolete(\"Log is obsolete. Please use Msg instead.\")] public static void Log(object obj) Parameters Type Name Description object obj Log(string) Declaration [Obsolete(\"Log is obsolete. Please use Msg instead.\")] public static void Log(string txt) Parameters Type Name Description string txt Log(string, params object[]) Declaration [Obsolete(\"Log is obsolete. Please use Msg instead.\")] public static void Log(string txt, params object[] args) Parameters Type Name Description string txt object[] args LogError(string) Declaration [Obsolete(\"LogError is obsolete. Please use Error instead.\")] public static void LogError(string txt) Parameters Type Name Description string txt LogError(string, params object[]) Declaration [Obsolete(\"LogError is obsolete. Please use Error instead.\")] public static void LogError(string txt, params object[] args) Parameters Type Name Description string txt object[] args LogWarning(string) Declaration [Obsolete(\"LogWarning is obsolete. Please use Warning instead.\")] public static void LogWarning(string txt) Parameters Type Name Description string txt LogWarning(string, params object[]) Declaration [Obsolete(\"LogWarning is obsolete. Please use Warning instead.\")] public static void LogWarning(string txt, params object[] args) Parameters Type Name Description string txt object[] args Msg(ConsoleColor, object) Declaration public static void Msg(ConsoleColor txt_color, object obj) Parameters Type Name Description ConsoleColor txt_color object obj Msg(ConsoleColor, string) Declaration public static void Msg(ConsoleColor txt_color, string txt) Parameters Type Name Description ConsoleColor txt_color string txt Msg(ConsoleColor, string, params object[]) Declaration public static void Msg(ConsoleColor txt_color, string txt, params object[] args) Parameters Type Name Description ConsoleColor txt_color string txt object[] args Msg(Color, object) Declaration public static void Msg(Color txt_color, object obj) Parameters Type Name Description Color txt_color object obj Msg(Color, string) Declaration public static void Msg(Color txt_color, string txt) Parameters Type Name Description Color txt_color string txt Msg(Color, string, params object[]) Declaration public static void Msg(Color txt_color, string txt, params object[] args) Parameters Type Name Description Color txt_color string txt object[] args Msg(object) Declaration public static void Msg(object obj) Parameters Type Name Description object obj Msg(string) Declaration public static void Msg(string txt) Parameters Type Name Description string txt Msg(string, params object[]) Declaration public static void Msg(string txt, params object[] args) Parameters Type Name Description string txt object[] args MsgDirect(Color, string) Declaration public static void MsgDirect(Color txt_color, string txt) Parameters Type Name Description Color txt_color string txt Warning(object) Declaration public static void Warning(object obj) Parameters Type Name Description object obj Warning(string) Declaration public static void Warning(string txt) Parameters Type Name Description string txt Warning(string, params object[]) Declaration public static void Warning(string txt, params object[] args) Parameters Type Name Description string txt object[] args WriteLine(Color, int) Declaration public static void WriteLine(Color color, int length = 30) Parameters Type Name Description Color color int length WriteLine(int) Declaration public static void WriteLine(int length = 30) Parameters Type Name Description int length Events ErrorCallbackHandler Declaration public static event Action<string, string> ErrorCallbackHandler Event Type Type Description Action<string, string> MsgCallbackHandler Declaration [Obsolete(\"MsgCallbackHandler is obsolete. Please use MsgDrawingCallbackHandler for full Color support.\")] public static event Action<ConsoleColor, ConsoleColor, string, string> MsgCallbackHandler Event Type Type Description Action<ConsoleColor, ConsoleColor, string, string> MsgDrawingCallbackHandler Declaration public static event Action<Color, Color, string, string> MsgDrawingCallbackHandler Event Type Type Description Action<Color, Color, string, string> WarningCallbackHandler Declaration public static event Action<string, string> WarningCallbackHandler Event Type Type Description Action<string, string>"
  },
  "api/RedLoader.RLog.Instance.html": {
    "href": "api/RedLoader.RLog.Instance.html",
    "title": "Class RLog.Instance | RedLoader Docs",
    "keywords": "Class RLog.Instance Inheritance object RLog.Instance Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: RedLoader Assembly: RedLoader.dll Syntax public class RLog.Instance Constructors Instance(string) Declaration public Instance(string name) Parameters Type Name Description string name Instance(string, ConsoleColor) Declaration [Obsolete(\"ConsoleColor is obsolete, use the (string, Color) constructor instead.\")] public Instance(string name, ConsoleColor color) Parameters Type Name Description string name ConsoleColor color Instance(string, Color) Declaration public Instance(string name, Color color) Parameters Type Name Description string name Color color Methods BigError(string) Declaration public void BigError(string txt) Parameters Type Name Description string txt Error(object) Declaration public void Error(object obj) Parameters Type Name Description object obj Error(string) Declaration public void Error(string txt) Parameters Type Name Description string txt Error(string, Exception) Declaration public void Error(string txt, Exception ex) Parameters Type Name Description string txt Exception ex Error(string, params object[]) Declaration public void Error(string txt, params object[] args) Parameters Type Name Description string txt object[] args Msg(ConsoleColor, object) Declaration public void Msg(ConsoleColor txt_color, object obj) Parameters Type Name Description ConsoleColor txt_color object obj Msg(ConsoleColor, string) Declaration public void Msg(ConsoleColor txt_color, string txt) Parameters Type Name Description ConsoleColor txt_color string txt Msg(ConsoleColor, string, params object[]) Declaration public void Msg(ConsoleColor txt_color, string txt, params object[] args) Parameters Type Name Description ConsoleColor txt_color string txt object[] args Msg(Color, object) Declaration public void Msg(Color txt_color, object obj) Parameters Type Name Description Color txt_color object obj Msg(Color, string) Declaration public void Msg(Color txt_color, string txt) Parameters Type Name Description Color txt_color string txt Msg(Color, string, params object[]) Declaration public void Msg(Color txt_color, string txt, params object[] args) Parameters Type Name Description Color txt_color string txt object[] args Msg(object) Declaration public void Msg(object obj) Parameters Type Name Description object obj Msg(string) Declaration public void Msg(string txt) Parameters Type Name Description string txt Msg(string, params object[]) Declaration public void Msg(string txt, params object[] args) Parameters Type Name Description string txt object[] args Warning(object) Declaration public void Warning(object obj) Parameters Type Name Description object obj Warning(string) Declaration public void Warning(string txt) Parameters Type Name Description string txt Warning(string, params object[]) Declaration public void Warning(string txt, params object[] args) Parameters Type Name Description string txt object[] args WriteLine(Color, int) Declaration public void WriteLine(Color color, int length = 30) Parameters Type Name Description Color color int length WriteLine(int) Declaration public void WriteLine(int length = 30) Parameters Type Name Description int length WriteSpacer() Declaration public void WriteSpacer()"
  },
  "api/RedLoader.RottenMelon.html": {
    "href": "api/RedLoader.RottenMelon.html",
    "title": "Class RottenMelon | RedLoader Docs",
    "keywords": "Class RottenMelon An info class for broken Melons. Inheritance object RottenMelon Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: RedLoader Assembly: RedLoader.dll Syntax public sealed class RottenMelon Constructors RottenMelon(Type, string, Exception) Declaration public RottenMelon(Type type, string errorMessage, Exception exception = null) Parameters Type Name Description Type type string errorMessage Exception exception Fields assembly Declaration public readonly MelonAssembly assembly Field Value Type Description MelonAssembly errorMessage Declaration public readonly string errorMessage Field Value Type Description string exception Declaration public readonly Exception exception Field Value Type Description Exception type Declaration public readonly Type type Field Value Type Description Type"
  },
  "api/RedLoader.TinyJSON.AfterDecode.html": {
    "href": "api/RedLoader.TinyJSON.AfterDecode.html",
    "title": "Class AfterDecode | RedLoader Docs",
    "keywords": "Class AfterDecode Mark methods to be called after an object is decoded. Inheritance object Attribute AfterDecode Load Inherited Members Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.Equals(object) Attribute.GetHashCode() Attribute.Match(object) Attribute.IsDefaultAttribute() Attribute.TypeId object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) Namespace: RedLoader.TinyJSON Assembly: RedLoader.dll Syntax [AttributeUsage(AttributeTargets.Method)] public class AfterDecode : Attribute Constructors AfterDecode() Declaration public AfterDecode()"
  },
  "api/RedLoader.TinyJSON.BeforeEncode.html": {
    "href": "api/RedLoader.TinyJSON.BeforeEncode.html",
    "title": "Class BeforeEncode | RedLoader Docs",
    "keywords": "Class BeforeEncode Mark methods to be called before an object is encoded. Inheritance object Attribute BeforeEncode Inherited Members Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.Equals(object) Attribute.GetHashCode() Attribute.Match(object) Attribute.IsDefaultAttribute() Attribute.TypeId object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) Namespace: RedLoader.TinyJSON Assembly: RedLoader.dll Syntax [AttributeUsage(AttributeTargets.Method)] public class BeforeEncode : Attribute Constructors BeforeEncode() Declaration public BeforeEncode()"
  },
  "api/RedLoader.TinyJSON.DecodeAlias.html": {
    "href": "api/RedLoader.TinyJSON.DecodeAlias.html",
    "title": "Class DecodeAlias | RedLoader Docs",
    "keywords": "Class DecodeAlias Provide field and property aliases when an object is decoded. If a field or property is not found while decoding, this list will be searched for a matching alias. Inheritance object Attribute DecodeAlias Inherited Members Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.Equals(object) Attribute.GetHashCode() Attribute.Match(object) Attribute.IsDefaultAttribute() Attribute.TypeId object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) Namespace: RedLoader.TinyJSON Assembly: RedLoader.dll Syntax [AttributeUsage(AttributeTargets.Property|AttributeTargets.Field, AllowMultiple = true)] public class DecodeAlias : Attribute Constructors DecodeAlias(params string[]) Declaration public DecodeAlias(params string[] names) Parameters Type Name Description string[] names Properties Names Declaration public string[] Names { get; } Property Value Type Description string[] Methods Contains(string) Declaration public bool Contains(string name) Parameters Type Name Description string name Returns Type Description bool"
  },
  "api/RedLoader.TinyJSON.DecodeException.html": {
    "href": "api/RedLoader.TinyJSON.DecodeException.html",
    "title": "Class DecodeException | RedLoader Docs",
    "keywords": "Class DecodeException Inheritance object Exception DecodeException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.ToString() Exception.GetType() Exception.TargetSite Exception.Message Exception.Data Exception.InnerException Exception.HelpLink Exception.Source Exception.HResult Exception.StackTrace object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: RedLoader.TinyJSON Assembly: RedLoader.dll Syntax public sealed class DecodeException : Exception, ISerializable Constructors DecodeException(string) Declaration public DecodeException(string message) Parameters Type Name Description string message DecodeException(string, Exception) Declaration public DecodeException(string message, Exception innerException) Parameters Type Name Description string message Exception innerException Implements ISerializable"
  },
  "api/RedLoader.TinyJSON.Decoder.html": {
    "href": "api/RedLoader.TinyJSON.Decoder.html",
    "title": "Class Decoder | RedLoader Docs",
    "keywords": "Class Decoder Inheritance object Decoder Implements IDisposable Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: RedLoader.TinyJSON Assembly: RedLoader.dll Syntax public sealed class Decoder : IDisposable Methods Decode(string) Declaration public static Variant Decode(string jsonString) Parameters Type Name Description string jsonString Returns Type Description Variant Dispose() Declaration public void Dispose() Implements IDisposable"
  },
  "api/RedLoader.TinyJSON.EncodeOptions.html": {
    "href": "api/RedLoader.TinyJSON.EncodeOptions.html",
    "title": "Enum EncodeOptions | RedLoader Docs",
    "keywords": "Enum EncodeOptions Namespace: RedLoader.TinyJSON Assembly: RedLoader.dll Syntax [Flags] public enum EncodeOptions Fields Name Description EnforceHeirarchyOrder EnforceHierarchyOrder IncludePublicProperties NoTypeHints None PrettyPrint Extension Methods EnumExtensions.HasFlag(Enum, Enum)"
  },
  "api/RedLoader.TinyJSON.Encoder.html": {
    "href": "api/RedLoader.TinyJSON.Encoder.html",
    "title": "Class Encoder | RedLoader Docs",
    "keywords": "Class Encoder Inheritance object Encoder Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: RedLoader.TinyJSON Assembly: RedLoader.dll Syntax public sealed class Encoder Methods Encode(object) Declaration public static string Encode(object obj) Parameters Type Name Description object obj Returns Type Description string Encode(object, EncodeOptions) Declaration public static string Encode(object obj, EncodeOptions options) Parameters Type Name Description object obj EncodeOptions options Returns Type Description string"
  },
  "api/RedLoader.TinyJSON.Exclude.html": {
    "href": "api/RedLoader.TinyJSON.Exclude.html",
    "title": "Class Exclude | RedLoader Docs",
    "keywords": "Class Exclude Mark members that should be excluded. Private fields and all properties are excluded by default. Inheritance object Attribute Exclude Skip Inherited Members Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.Equals(object) Attribute.GetHashCode() Attribute.Match(object) Attribute.IsDefaultAttribute() Attribute.TypeId object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) Namespace: RedLoader.TinyJSON Assembly: RedLoader.dll Syntax [AttributeUsage(AttributeTargets.Property|AttributeTargets.Field)] public class Exclude : Attribute Constructors Exclude() Declaration public Exclude()"
  },
  "api/RedLoader.TinyJSON.Extensions.html": {
    "href": "api/RedLoader.TinyJSON.Extensions.html",
    "title": "Class Extensions | RedLoader Docs",
    "keywords": "Class Extensions Inheritance object Extensions Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: RedLoader.TinyJSON Assembly: RedLoader.dll Syntax public static class Extensions Methods AnyOfType<TSource>(IEnumerable<TSource>, Type) Declaration public static bool AnyOfType<TSource>(this IEnumerable<TSource> source, Type expectedType) Parameters Type Name Description IEnumerable<TSource> source Type expectedType Returns Type Description bool Type Parameters Name Description TSource"
  },
  "api/RedLoader.TinyJSON.html": {
    "href": "api/RedLoader.TinyJSON.html",
    "title": "Namespace RedLoader.TinyJSON | RedLoader Docs",
    "keywords": "Namespace RedLoader.TinyJSON Classes AfterDecode Mark methods to be called after an object is decoded. BeforeEncode Mark methods to be called before an object is encoded. DecodeAlias Provide field and property aliases when an object is decoded. If a field or property is not found while decoding, this list will be searched for a matching alias. DecodeException Decoder Encoder Exclude Mark members that should be excluded. Private fields and all properties are excluded by default. Extensions Include Mark members that should be included. Public fields are included by default. JSON Load ProxyArray ProxyBoolean ProxyNumber ProxyObject ProxyString Skip TypeHint Mark members to force type hinting even when EncodeOptions.NoTypeHints is set. Variant Enums EncodeOptions"
  },
  "api/RedLoader.TinyJSON.Include.html": {
    "href": "api/RedLoader.TinyJSON.Include.html",
    "title": "Class Include | RedLoader Docs",
    "keywords": "Class Include Mark members that should be included. Public fields are included by default. Inheritance object Attribute Include Inherited Members Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.Equals(object) Attribute.GetHashCode() Attribute.Match(object) Attribute.IsDefaultAttribute() Attribute.TypeId object.GetType() object.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) Namespace: RedLoader.TinyJSON Assembly: RedLoader.dll Syntax [AttributeUsage(AttributeTargets.Property|AttributeTargets.Field)] public sealed class Include : Attribute Constructors Include() Declaration public Include()"
  },
  "api/RedLoader.TinyJSON.JSON.html": {
    "href": "api/RedLoader.TinyJSON.JSON.html",
    "title": "Class JSON | RedLoader Docs",
    "keywords": "Class JSON Inheritance object JSON Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: RedLoader.TinyJSON Assembly: RedLoader.dll Syntax public static class JSON Methods Dump(object) Declaration public static string Dump(object data) Parameters Type Name Description object data Returns Type Description string Dump(object, EncodeOptions) Declaration public static string Dump(object data, EncodeOptions options) Parameters Type Name Description object data EncodeOptions options Returns Type Description string Load(string) Declaration public static Variant Load(string json) Parameters Type Name Description string json Returns Type Description Variant MakeInto<T>(Variant, out T) Declaration public static void MakeInto<T>(Variant data, out T item) Parameters Type Name Description Variant data T item Type Parameters Name Description T Populate<T>(Variant, T) Declaration public static void Populate<T>(Variant data, T item) where T : class Parameters Type Name Description Variant data T item Type Parameters Name Description T SupportTypeForAOT<T>() Declaration public static void SupportTypeForAOT<T>() Type Parameters Name Description T"
  },
  "api/RedLoader.TinyJSON.Load.html": {
    "href": "api/RedLoader.TinyJSON.Load.html",
    "title": "Class Load | RedLoader Docs",
    "keywords": "Class Load Inheritance object Attribute AfterDecode Load Inherited Members Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.Equals(object) Attribute.GetHashCode() Attribute.Match(object) Attribute.IsDefaultAttribute() Attribute.TypeId object.GetType() object.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) Namespace: RedLoader.TinyJSON Assembly: RedLoader.dll Syntax [Obsolete(\"Use the AfterDecode attribute instead.\")] public sealed class Load : AfterDecode Constructors Load() Declaration public Load()"
  },
  "api/RedLoader.TinyJSON.ProxyArray.html": {
    "href": "api/RedLoader.TinyJSON.ProxyArray.html",
    "title": "Class ProxyArray | RedLoader Docs",
    "keywords": "Class ProxyArray Inheritance object Variant ProxyArray Implements IConvertible IEnumerable<Variant> IEnumerable Inherited Members Variant.Make<T>(out T) Variant.Make<T>() Variant.Populate<T>(T) Variant.ToJSON() Variant.GetTypeCode() Variant.ToType(Type, IFormatProvider) Variant.ToDateTime(IFormatProvider) Variant.ToBoolean(IFormatProvider) Variant.ToByte(IFormatProvider) Variant.ToChar(IFormatProvider) Variant.ToDecimal(IFormatProvider) Variant.ToDouble(IFormatProvider) Variant.ToInt16(IFormatProvider) Variant.ToInt32(IFormatProvider) Variant.ToInt64(IFormatProvider) Variant.ToSByte(IFormatProvider) Variant.ToSingle(IFormatProvider) Variant.ToString(IFormatProvider) Variant.ToUInt16(IFormatProvider) Variant.ToUInt32(IFormatProvider) Variant.ToUInt64(IFormatProvider) Variant.ToString() Variant.this[string] object.GetType() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: RedLoader.TinyJSON Assembly: RedLoader.dll Syntax public sealed class ProxyArray : Variant, IConvertible, IEnumerable<Variant>, IEnumerable Constructors ProxyArray() Declaration public ProxyArray() Properties Count Declaration public int Count { get; } Property Value Type Description int this[int] Declaration public override Variant this[int index] { get; set; } Parameters Type Name Description int index Property Value Type Description Variant Overrides Variant.this[int] Methods Add(Variant) Declaration public void Add(Variant item) Parameters Type Name Description Variant item Implements IConvertible IEnumerable<T> IEnumerable Extension Methods Extensions.AnyOfType<TSource>(IEnumerable<TSource>, Type) CollectionExtensions.WrapToIl2Cpp(IEnumerable)"
  },
  "api/RedLoader.TinyJSON.ProxyBoolean.html": {
    "href": "api/RedLoader.TinyJSON.ProxyBoolean.html",
    "title": "Class ProxyBoolean | RedLoader Docs",
    "keywords": "Class ProxyBoolean Inheritance object Variant ProxyBoolean Implements IConvertible Inherited Members Variant.Make<T>(out T) Variant.Make<T>() Variant.Populate<T>(T) Variant.ToJSON() Variant.GetTypeCode() Variant.ToType(Type, IFormatProvider) Variant.ToDateTime(IFormatProvider) Variant.ToByte(IFormatProvider) Variant.ToChar(IFormatProvider) Variant.ToDecimal(IFormatProvider) Variant.ToDouble(IFormatProvider) Variant.ToInt16(IFormatProvider) Variant.ToInt32(IFormatProvider) Variant.ToInt64(IFormatProvider) Variant.ToSByte(IFormatProvider) Variant.ToSingle(IFormatProvider) Variant.ToUInt16(IFormatProvider) Variant.ToUInt32(IFormatProvider) Variant.ToUInt64(IFormatProvider) Variant.ToString() Variant.this[string] Variant.this[int] object.GetType() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: RedLoader.TinyJSON Assembly: RedLoader.dll Syntax public sealed class ProxyBoolean : Variant, IConvertible Constructors ProxyBoolean(bool) Declaration public ProxyBoolean(bool value) Parameters Type Name Description bool value Methods ToBoolean(IFormatProvider) Declaration public override bool ToBoolean(IFormatProvider provider) Parameters Type Name Description IFormatProvider provider Returns Type Description bool Overrides Variant.ToBoolean(IFormatProvider) ToString(IFormatProvider) Declaration public override string ToString(IFormatProvider provider) Parameters Type Name Description IFormatProvider provider Returns Type Description string Overrides Variant.ToString(IFormatProvider) Implements IConvertible"
  },
  "api/RedLoader.TinyJSON.ProxyNumber.html": {
    "href": "api/RedLoader.TinyJSON.ProxyNumber.html",
    "title": "Class ProxyNumber | RedLoader Docs",
    "keywords": "Class ProxyNumber Inheritance object Variant ProxyNumber Implements IConvertible Inherited Members Variant.Make<T>(out T) Variant.Make<T>() Variant.Populate<T>(T) Variant.ToJSON() Variant.GetTypeCode() Variant.ToType(Type, IFormatProvider) Variant.ToDateTime(IFormatProvider) Variant.ToString() Variant.this[string] Variant.this[int] object.GetType() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: RedLoader.TinyJSON Assembly: RedLoader.dll Syntax public sealed class ProxyNumber : Variant, IConvertible Constructors ProxyNumber(IConvertible) Declaration public ProxyNumber(IConvertible value) Parameters Type Name Description IConvertible value Methods ToBoolean(IFormatProvider) Declaration public override bool ToBoolean(IFormatProvider provider) Parameters Type Name Description IFormatProvider provider Returns Type Description bool Overrides Variant.ToBoolean(IFormatProvider) ToByte(IFormatProvider) Declaration public override byte ToByte(IFormatProvider provider) Parameters Type Name Description IFormatProvider provider Returns Type Description byte Overrides Variant.ToByte(IFormatProvider) ToChar(IFormatProvider) Declaration public override char ToChar(IFormatProvider provider) Parameters Type Name Description IFormatProvider provider Returns Type Description char Overrides Variant.ToChar(IFormatProvider) ToDecimal(IFormatProvider) Declaration public override decimal ToDecimal(IFormatProvider provider) Parameters Type Name Description IFormatProvider provider Returns Type Description decimal Overrides Variant.ToDecimal(IFormatProvider) ToDouble(IFormatProvider) Declaration public override double ToDouble(IFormatProvider provider) Parameters Type Name Description IFormatProvider provider Returns Type Description double Overrides Variant.ToDouble(IFormatProvider) ToInt16(IFormatProvider) Declaration public override short ToInt16(IFormatProvider provider) Parameters Type Name Description IFormatProvider provider Returns Type Description short Overrides Variant.ToInt16(IFormatProvider) ToInt32(IFormatProvider) Declaration public override int ToInt32(IFormatProvider provider) Parameters Type Name Description IFormatProvider provider Returns Type Description int Overrides Variant.ToInt32(IFormatProvider) ToInt64(IFormatProvider) Declaration public override long ToInt64(IFormatProvider provider) Parameters Type Name Description IFormatProvider provider Returns Type Description long Overrides Variant.ToInt64(IFormatProvider) ToSByte(IFormatProvider) Declaration public override sbyte ToSByte(IFormatProvider provider) Parameters Type Name Description IFormatProvider provider Returns Type Description sbyte Overrides Variant.ToSByte(IFormatProvider) ToSingle(IFormatProvider) Declaration public override float ToSingle(IFormatProvider provider) Parameters Type Name Description IFormatProvider provider Returns Type Description float Overrides Variant.ToSingle(IFormatProvider) ToString(IFormatProvider) Declaration public override string ToString(IFormatProvider provider) Parameters Type Name Description IFormatProvider provider Returns Type Description string Overrides Variant.ToString(IFormatProvider) ToUInt16(IFormatProvider) Declaration public override ushort ToUInt16(IFormatProvider provider) Parameters Type Name Description IFormatProvider provider Returns Type Description ushort Overrides Variant.ToUInt16(IFormatProvider) ToUInt32(IFormatProvider) Declaration public override uint ToUInt32(IFormatProvider provider) Parameters Type Name Description IFormatProvider provider Returns Type Description uint Overrides Variant.ToUInt32(IFormatProvider) ToUInt64(IFormatProvider) Declaration public override ulong ToUInt64(IFormatProvider provider) Parameters Type Name Description IFormatProvider provider Returns Type Description ulong Overrides Variant.ToUInt64(IFormatProvider) Implements IConvertible"
  },
  "api/RedLoader.TinyJSON.ProxyObject.html": {
    "href": "api/RedLoader.TinyJSON.ProxyObject.html",
    "title": "Class ProxyObject | RedLoader Docs",
    "keywords": "Class ProxyObject Inheritance object Variant ProxyObject Implements IConvertible IEnumerable<KeyValuePair<string, Variant>> IEnumerable Inherited Members Variant.Make<T>(out T) Variant.Make<T>() Variant.Populate<T>(T) Variant.ToJSON() Variant.GetTypeCode() Variant.ToType(Type, IFormatProvider) Variant.ToDateTime(IFormatProvider) Variant.ToBoolean(IFormatProvider) Variant.ToByte(IFormatProvider) Variant.ToChar(IFormatProvider) Variant.ToDecimal(IFormatProvider) Variant.ToDouble(IFormatProvider) Variant.ToInt16(IFormatProvider) Variant.ToInt32(IFormatProvider) Variant.ToInt64(IFormatProvider) Variant.ToSByte(IFormatProvider) Variant.ToSingle(IFormatProvider) Variant.ToString(IFormatProvider) Variant.ToUInt16(IFormatProvider) Variant.ToUInt32(IFormatProvider) Variant.ToUInt64(IFormatProvider) Variant.ToString() Variant.this[int] object.GetType() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: RedLoader.TinyJSON Assembly: RedLoader.dll Syntax public sealed class ProxyObject : Variant, IConvertible, IEnumerable<KeyValuePair<string, Variant>>, IEnumerable Constructors ProxyObject() Declaration public ProxyObject() Fields TypeHintKey Declaration public const string TypeHintKey = \"@type\" Field Value Type Description string Properties Count Declaration public int Count { get; } Property Value Type Description int this[string] Declaration public override Variant this[string key] { get; set; } Parameters Type Name Description string key Property Value Type Description Variant Overrides Variant.this[string] Keys Declaration public Dictionary<string, Variant>.KeyCollection Keys { get; } Property Value Type Description Dictionary<string, Variant>.KeyCollection TypeHint Declaration public string TypeHint { get; } Property Value Type Description string Values Declaration public Dictionary<string, Variant>.ValueCollection Values { get; } Property Value Type Description Dictionary<string, Variant>.ValueCollection Methods Add(string, Variant) Declaration public void Add(string key, Variant item) Parameters Type Name Description string key Variant item TryGetValue(string, out Variant) Declaration public bool TryGetValue(string key, out Variant item) Parameters Type Name Description string key Variant item Returns Type Description bool Implements IConvertible IEnumerable<T> IEnumerable Extension Methods Extensions.AnyOfType<TSource>(IEnumerable<TSource>, Type) CollectionExtensions.WrapToIl2Cpp(IEnumerable)"
  },
  "api/RedLoader.TinyJSON.ProxyString.html": {
    "href": "api/RedLoader.TinyJSON.ProxyString.html",
    "title": "Class ProxyString | RedLoader Docs",
    "keywords": "Class ProxyString Inheritance object Variant ProxyString Implements IConvertible Inherited Members Variant.Make<T>(out T) Variant.Make<T>() Variant.Populate<T>(T) Variant.ToJSON() Variant.GetTypeCode() Variant.ToType(Type, IFormatProvider) Variant.ToDateTime(IFormatProvider) Variant.ToBoolean(IFormatProvider) Variant.ToByte(IFormatProvider) Variant.ToChar(IFormatProvider) Variant.ToDecimal(IFormatProvider) Variant.ToDouble(IFormatProvider) Variant.ToInt16(IFormatProvider) Variant.ToInt32(IFormatProvider) Variant.ToInt64(IFormatProvider) Variant.ToSByte(IFormatProvider) Variant.ToSingle(IFormatProvider) Variant.ToUInt16(IFormatProvider) Variant.ToUInt32(IFormatProvider) Variant.ToUInt64(IFormatProvider) Variant.ToString() Variant.this[string] Variant.this[int] object.GetType() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: RedLoader.TinyJSON Assembly: RedLoader.dll Syntax public sealed class ProxyString : Variant, IConvertible Constructors ProxyString(string) Declaration public ProxyString(string value) Parameters Type Name Description string value Methods ToString(IFormatProvider) Declaration public override string ToString(IFormatProvider provider) Parameters Type Name Description IFormatProvider provider Returns Type Description string Overrides Variant.ToString(IFormatProvider) Implements IConvertible"
  },
  "api/RedLoader.TinyJSON.Skip.html": {
    "href": "api/RedLoader.TinyJSON.Skip.html",
    "title": "Class Skip | RedLoader Docs",
    "keywords": "Class Skip Inheritance object Attribute Exclude Skip Inherited Members Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.Equals(object) Attribute.GetHashCode() Attribute.Match(object) Attribute.IsDefaultAttribute() Attribute.TypeId object.GetType() object.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) Namespace: RedLoader.TinyJSON Assembly: RedLoader.dll Syntax [Obsolete(\"Use the Exclude attribute instead.\")] public sealed class Skip : Exclude Constructors Skip() Declaration public Skip()"
  },
  "api/RedLoader.TinyJSON.TypeHint.html": {
    "href": "api/RedLoader.TinyJSON.TypeHint.html",
    "title": "Class TypeHint | RedLoader Docs",
    "keywords": "Class TypeHint Mark members to force type hinting even when EncodeOptions.NoTypeHints is set. Inheritance object Attribute TypeHint Inherited Members Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.Equals(object) Attribute.GetHashCode() Attribute.Match(object) Attribute.IsDefaultAttribute() Attribute.TypeId object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) Namespace: RedLoader.TinyJSON Assembly: RedLoader.dll Syntax [AttributeUsage(AttributeTargets.Property|AttributeTargets.Field)] public class TypeHint : Attribute Constructors TypeHint() Declaration public TypeHint()"
  },
  "api/RedLoader.TinyJSON.Variant.html": {
    "href": "api/RedLoader.TinyJSON.Variant.html",
    "title": "Class Variant | RedLoader Docs",
    "keywords": "Class Variant Inheritance object Variant ProxyArray ProxyBoolean ProxyNumber ProxyObject ProxyString Implements IConvertible Inherited Members object.GetType() object.MemberwiseClone() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: RedLoader.TinyJSON Assembly: RedLoader.dll Syntax public abstract class Variant : IConvertible Constructors Variant() Declaration protected Variant() Fields FormatProvider Declaration protected static readonly IFormatProvider FormatProvider Field Value Type Description IFormatProvider Properties this[int] Declaration public virtual Variant this[int index] { get; set; } Parameters Type Name Description int index Property Value Type Description Variant this[string] Declaration public virtual Variant this[string key] { get; set; } Parameters Type Name Description string key Property Value Type Description Variant Methods GetTypeCode() Declaration public virtual TypeCode GetTypeCode() Returns Type Description TypeCode Make<T>() Declaration public T Make<T>() Returns Type Description T Type Parameters Name Description T Make<T>(out T) Declaration public void Make<T>(out T item) Parameters Type Name Description T item Type Parameters Name Description T Populate<T>(T) Declaration public void Populate<T>(T item) where T : class Parameters Type Name Description T item Type Parameters Name Description T ToBoolean(IFormatProvider) Declaration public virtual bool ToBoolean(IFormatProvider provider) Parameters Type Name Description IFormatProvider provider Returns Type Description bool ToByte(IFormatProvider) Declaration public virtual byte ToByte(IFormatProvider provider) Parameters Type Name Description IFormatProvider provider Returns Type Description byte ToChar(IFormatProvider) Declaration public virtual char ToChar(IFormatProvider provider) Parameters Type Name Description IFormatProvider provider Returns Type Description char ToDateTime(IFormatProvider) Declaration public virtual DateTime ToDateTime(IFormatProvider provider) Parameters Type Name Description IFormatProvider provider Returns Type Description DateTime ToDecimal(IFormatProvider) Declaration public virtual decimal ToDecimal(IFormatProvider provider) Parameters Type Name Description IFormatProvider provider Returns Type Description decimal ToDouble(IFormatProvider) Declaration public virtual double ToDouble(IFormatProvider provider) Parameters Type Name Description IFormatProvider provider Returns Type Description double ToInt16(IFormatProvider) Declaration public virtual short ToInt16(IFormatProvider provider) Parameters Type Name Description IFormatProvider provider Returns Type Description short ToInt32(IFormatProvider) Declaration public virtual int ToInt32(IFormatProvider provider) Parameters Type Name Description IFormatProvider provider Returns Type Description int ToInt64(IFormatProvider) Declaration public virtual long ToInt64(IFormatProvider provider) Parameters Type Name Description IFormatProvider provider Returns Type Description long ToJSON() Declaration public string ToJSON() Returns Type Description string ToSByte(IFormatProvider) Declaration public virtual sbyte ToSByte(IFormatProvider provider) Parameters Type Name Description IFormatProvider provider Returns Type Description sbyte ToSingle(IFormatProvider) Declaration public virtual float ToSingle(IFormatProvider provider) Parameters Type Name Description IFormatProvider provider Returns Type Description float ToString() Declaration public override string ToString() Returns Type Description string Overrides object.ToString() ToString(IFormatProvider) Declaration public virtual string ToString(IFormatProvider provider) Parameters Type Name Description IFormatProvider provider Returns Type Description string ToType(Type, IFormatProvider) Declaration public virtual object ToType(Type conversionType, IFormatProvider provider) Parameters Type Name Description Type conversionType IFormatProvider provider Returns Type Description object ToUInt16(IFormatProvider) Declaration public virtual ushort ToUInt16(IFormatProvider provider) Parameters Type Name Description IFormatProvider provider Returns Type Description ushort ToUInt32(IFormatProvider) Declaration public virtual uint ToUInt32(IFormatProvider provider) Parameters Type Name Description IFormatProvider provider Returns Type Description uint ToUInt64(IFormatProvider) Declaration public virtual ulong ToUInt64(IFormatProvider provider) Parameters Type Name Description IFormatProvider provider Returns Type Description ulong Operators implicit operator bool(Variant) Declaration public static implicit operator bool(Variant variant) Parameters Type Name Description Variant variant Returns Type Description bool implicit operator decimal(Variant) Declaration public static implicit operator decimal(Variant variant) Parameters Type Name Description Variant variant Returns Type Description decimal implicit operator double(Variant) Declaration public static implicit operator double(Variant variant) Parameters Type Name Description Variant variant Returns Type Description double implicit operator Guid(Variant) Declaration public static implicit operator Guid(Variant variant) Parameters Type Name Description Variant variant Returns Type Description Guid implicit operator short(Variant) Declaration public static implicit operator short(Variant variant) Parameters Type Name Description Variant variant Returns Type Description short implicit operator int(Variant) Declaration public static implicit operator int(Variant variant) Parameters Type Name Description Variant variant Returns Type Description int implicit operator long(Variant) Declaration public static implicit operator long(Variant variant) Parameters Type Name Description Variant variant Returns Type Description long implicit operator float(Variant) Declaration public static implicit operator float(Variant variant) Parameters Type Name Description Variant variant Returns Type Description float implicit operator string(Variant) Declaration public static implicit operator string(Variant variant) Parameters Type Name Description Variant variant Returns Type Description string implicit operator ushort(Variant) Declaration public static implicit operator ushort(Variant variant) Parameters Type Name Description Variant variant Returns Type Description ushort implicit operator uint(Variant) Declaration public static implicit operator uint(Variant variant) Parameters Type Name Description Variant variant Returns Type Description uint implicit operator ulong(Variant) Declaration public static implicit operator ulong(Variant variant) Parameters Type Name Description Variant variant Returns Type Description ulong Implements IConvertible"
  },
  "api/RedLoader.TomlMapper.html": {
    "href": "api/RedLoader.TomlMapper.html",
    "title": "Class TomlMapper | RedLoader Docs",
    "keywords": "Class TomlMapper Inheritance object TomlMapper Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: RedLoader Assembly: RedLoader.dll Syntax public class TomlMapper Constructors TomlMapper() Declaration public TomlMapper() Methods FromToml<T>(TomlValue) Declaration public T FromToml<T>(TomlValue value) Parameters Type Name Description TomlValue value Returns Type Description T Type Parameters Name Description T ReadArray<T>(TomlValue) Declaration public T[] ReadArray<T>(TomlValue value) Parameters Type Name Description TomlValue value Returns Type Description T[] Type Parameters Name Description T ReadList<T>(TomlValue) Declaration public List<T> ReadList<T>(TomlValue value) Parameters Type Name Description TomlValue value Returns Type Description List<T> Type Parameters Name Description T ToToml<T>(T) Declaration public TomlValue ToToml<T>(T value) Parameters Type Name Description T value Returns Type Description TomlValue Type Parameters Name Description T WriteArray<T>(T[]) Declaration public TomlArray WriteArray<T>(T[] value) Parameters Type Name Description T[] value Returns Type Description TomlArray Type Parameters Name Description T WriteList<T>(List<T>) Declaration public TomlArray WriteList<T>(List<T> value) Parameters Type Name Description List<T> value Returns Type Description TomlArray Type Parameters Name Description T"
  },
  "api/RedLoader.Utils.BufferedAdder-1.html": {
    "href": "api/RedLoader.Utils.BufferedAdder-1.html",
    "title": "Class BufferedAdder<T> | RedLoader Docs",
    "keywords": "Class BufferedAdder<T> Inheritance object BufferedAdder<T> Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: RedLoader.Utils Assembly: RedLoader.dll Syntax public class BufferedAdder<T> Type Parameters Name Description T Constructors BufferedAdder(Func<bool>, Action<T>) Declaration public BufferedAdder(Func<bool> canAddFunc, Action<T> addFunc) Parameters Type Name Description Func<bool> canAddFunc Action<T> addFunc Methods Add(T) Declaration public void Add(T item) Parameters Type Name Description T item Flush() Declaration public void Flush()"
  },
  "api/RedLoader.Utils.CodeWriter.html": {
    "href": "api/RedLoader.Utils.CodeWriter.html",
    "title": "Class CodeWriter | RedLoader Docs",
    "keywords": "Class CodeWriter Helper class for writing code to files Inheritance object CodeWriter Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: RedLoader.Utils Assembly: RedLoader.dll Syntax public class CodeWriter Constructors CodeWriter(string) Declaration public CodeWriter(string path) Parameters Type Name Description string path Properties Content Declaration public string Content { get; } Property Value Type Description string IndentLevel Declaration public int IndentLevel { get; } Property Value Type Description int Methods Add(string) Declaration public CodeWriter Add(string text) Parameters Type Name Description string text Returns Type Description CodeWriter Indent() Declaration public CodeWriter Indent() Returns Type Description CodeWriter Line() Declaration public CodeWriter Line() Returns Type Description CodeWriter Line(string) Declaration public CodeWriter Line(string text) Parameters Type Name Description string text Returns Type Description CodeWriter Save() Declaration public void Save() Tab() Declaration public CodeWriter Tab() Returns Type Description CodeWriter Unindent() Declaration public CodeWriter Unindent() Returns Type Description CodeWriter"
  },
  "api/RedLoader.Utils.CommonExtensions.html": {
    "href": "api/RedLoader.Utils.CommonExtensions.html",
    "title": "Class CommonExtensions | RedLoader Docs",
    "keywords": "Class CommonExtensions Inheritance object CommonExtensions Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: RedLoader.Utils Assembly: RedLoader.dll Syntax public static class CommonExtensions"
  },
  "api/RedLoader.Utils.FileWriter.html": {
    "href": "api/RedLoader.Utils.FileWriter.html",
    "title": "Class FileWriter | RedLoader Docs",
    "keywords": "Class FileWriter Helper class for writing text to files Inheritance object FileWriter Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: RedLoader.Utils Assembly: RedLoader.dll Syntax public class FileWriter Constructors FileWriter(string) Declaration public FileWriter(string path) Parameters Type Name Description string path Properties Content Declaration public string Content { get; } Property Value Type Description string Methods Add(string) Declaration public FileWriter Add(string text) Parameters Type Name Description string text Returns Type Description FileWriter Line() Declaration public FileWriter Line() Returns Type Description FileWriter Line(string) Declaration public FileWriter Line(string text) Parameters Type Name Description string text Returns Type Description FileWriter Save() Declaration public void Save() Tab() Declaration public FileWriter Tab() Returns Type Description FileWriter"
  },
  "api/RedLoader.Utils.html": {
    "href": "api/RedLoader.Utils.html",
    "title": "Namespace RedLoader.Utils | RedLoader Docs",
    "keywords": "Namespace RedLoader.Utils Classes BufferedAdder<T> CodeWriter Helper class for writing code to files CommonExtensions FileWriter Helper class for writing text to files LoaderEnvironment SteamManifestReader TimingLogger Structs PathObject SingleShotHandler"
  },
  "api/RedLoader.Utils.LoaderEnvironment.html": {
    "href": "api/RedLoader.Utils.LoaderEnvironment.html",
    "title": "Class LoaderEnvironment | RedLoader Docs",
    "keywords": "Class LoaderEnvironment Inheritance object LoaderEnvironment Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: RedLoader.Utils Assembly: RedLoader.dll Syntax public static class LoaderEnvironment Properties CompatibilityLayerDirectory Declaration public static string CompatibilityLayerDirectory { get; } Property Value Type Description string DependenciesDirectory Declaration public static string DependenciesDirectory { get; } Property Value Type Description string GameExecutableName Name of the executable without the extension Declaration public static string GameExecutableName { get; } Property Value Type Description string GameExecutablePath Declaration public static string GameExecutablePath { get; } Property Value Type Description string GameRootDirectory Path of the directory where the game executable is located Declaration public static string GameRootDirectory { get; } Property Value Type Description string Il2CppAssembliesDirectory Declaration public static string Il2CppAssembliesDirectory { get; } Property Value Type Description string Il2CppAssemblyGeneratorDirectory Declaration public static string Il2CppAssemblyGeneratorDirectory { get; } Property Value Type Description string Il2CppDataDirectory Declaration public static string Il2CppDataDirectory { get; } Property Value Type Description string IsDotnetRuntime Declaration public static bool IsDotnetRuntime { get; } Property Value Type Description bool IsMonoRuntime Declaration public static bool IsMonoRuntime { get; } Property Value Type Description bool LibsDirectory Declaration public static string LibsDirectory { get; } Property Value Type Description string LoaderDirectory Path of {gameroot}/{loader}/ Declaration public static string LoaderDirectory { get; } Property Value Type Description string LoaderFolderName The folder name of the loader Declaration public static string LoaderFolderName { get; } Property Value Type Description string ModsDirectory Declaration public static string ModsDirectory { get; } Property Value Type Description string OurRuntimeDirectory Declaration public static string OurRuntimeDirectory { get; } Property Value Type Description string PendingDirectory Declaration public static string PendingDirectory { get; } Property Value Type Description string PluginsDirectory Declaration public static string PluginsDirectory { get; } Property Value Type Description string SupportModuleDirectory Declaration public static string SupportModuleDirectory { get; } Property Value Type Description string UnityGameDataDirectory Declaration public static string UnityGameDataDirectory { get; } Property Value Type Description string UnityPlayerPath Declaration public static string UnityPlayerPath { get; } Property Value Type Description string UserDataDirectory Declaration public static string UserDataDirectory { get; } Property Value Type Description string Methods GetMetadataPath(Assembly) Declaration public static PathObject GetMetadataPath(Assembly assembly) Parameters Type Name Description Assembly assembly Returns Type Description PathObject GetModDataPath(ModBase) Declaration public static PathObject GetModDataPath(ModBase mod) Parameters Type Name Description ModBase mod Returns Type Description PathObject GetModDataPath(Assembly) Declaration public static PathObject GetModDataPath(Assembly assembly) Parameters Type Name Description Assembly assembly Returns Type Description PathObject"
  },
  "api/RedLoader.Utils.PathObject.html": {
    "href": "api/RedLoader.Utils.PathObject.html",
    "title": "Struct PathObject | RedLoader Docs",
    "keywords": "Struct PathObject Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) Namespace: RedLoader.Utils Assembly: RedLoader.dll Syntax public struct PathObject Constructors PathObject(string) Declaration public PathObject(string path) Parameters Type Name Description string path Properties Path Declaration public readonly string Path { get; } Property Value Type Description string Methods DirectoryExists() Declaration public bool DirectoryExists() Returns Type Description bool FileExists() Declaration public bool FileExists() Returns Type Description bool GetFiles() Declaration public IEnumerable<string> GetFiles() Returns Type Description IEnumerable<string> GetFiles(string) Declaration public IEnumerable<string> GetFiles(string searchPattern) Parameters Type Name Description string searchPattern Returns Type Description IEnumerable<string> ReadJson<T>() Declaration public T ReadJson<T>() Returns Type Description T Type Parameters Name Description T ReadText() Declaration public string ReadText() Returns Type Description string WriteJson(object) Declaration public void WriteJson(object obj) Parameters Type Name Description object obj WriteText(string) Declaration public void WriteText(string text) Parameters Type Name Description string text Operators operator /(PathObject, PathObject) Declaration public static PathObject operator /(PathObject path1, PathObject path2) Parameters Type Name Description PathObject path1 PathObject path2 Returns Type Description PathObject operator /(PathObject, string) Declaration public static PathObject operator /(PathObject path1, string path2) Parameters Type Name Description PathObject path1 string path2 Returns Type Description PathObject implicit operator string(PathObject) Declaration public static implicit operator string(PathObject path) Parameters Type Name Description PathObject path Returns Type Description string"
  },
  "api/RedLoader.Utils.SingleShotHandler.html": {
    "href": "api/RedLoader.Utils.SingleShotHandler.html",
    "title": "Struct SingleShotHandler | RedLoader Docs",
    "keywords": "Struct SingleShotHandler Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) Namespace: RedLoader.Utils Assembly: RedLoader.dll Syntax public struct SingleShotHandler Properties HasTriggered Declaration public bool HasTriggered { get; } Property Value Type Description bool Methods Reset() Declaration public void Reset() Trigger() Declaration public bool Trigger() Returns Type Description bool"
  },
  "api/RedLoader.Utils.SteamManifestReader.html": {
    "href": "api/RedLoader.Utils.SteamManifestReader.html",
    "title": "Class SteamManifestReader | RedLoader Docs",
    "keywords": "Class SteamManifestReader Inheritance object SteamManifestReader Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: RedLoader.Utils Assembly: RedLoader.dll Syntax public static class SteamManifestReader Methods GetInstallPathFromAppId(string) Declaration public static string GetInstallPathFromAppId(string appid) Parameters Type Name Description string appid Returns Type Description string"
  },
  "api/RedLoader.Utils.TimingLogger.html": {
    "href": "api/RedLoader.Utils.TimingLogger.html",
    "title": "Class TimingLogger | RedLoader Docs",
    "keywords": "Class TimingLogger Inheritance object TimingLogger Implements IDisposable Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: RedLoader.Utils Assembly: RedLoader.dll Syntax public class TimingLogger : IDisposable Constructors TimingLogger(string, bool) Declaration public TimingLogger(string name, bool printOnDispose = true) Parameters Type Name Description string name bool printOnDispose Methods Dispose() Declaration public void Dispose() Restart(string) Declaration public void Restart(string operationName = null) Parameters Type Name Description string operationName Start() Declaration public void Start() StartNew(string, bool) Declaration public static TimingLogger StartNew(string name, bool printOnDispose = true) Parameters Type Name Description string name bool printOnDispose Returns Type Description TimingLogger Stop(string) Declaration public void Stop(string operationName = null) Parameters Type Name Description string operationName Implements IDisposable"
  },
  "api/RedLoader.VerifyLoaderBuildAttribute.html": {
    "href": "api/RedLoader.VerifyLoaderBuildAttribute.html",
    "title": "Class VerifyLoaderBuildAttribute | RedLoader Docs",
    "keywords": "Class VerifyLoaderBuildAttribute Inheritance object Attribute VerifyLoaderBuildAttribute Inherited Members Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.Equals(object) Attribute.GetHashCode() Attribute.Match(object) Attribute.IsDefaultAttribute() Attribute.TypeId object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) Namespace: RedLoader Assembly: RedLoader.dll Syntax [AttributeUsage(AttributeTargets.Assembly)] public class VerifyLoaderBuildAttribute : Attribute Constructors VerifyLoaderBuildAttribute(string) Declaration public VerifyLoaderBuildAttribute(string hashcode) Parameters Type Name Description string hashcode Properties HashCode Build HashCode of RedLoader. Declaration public string HashCode { get; } Property Value Type Description string Methods IsCompatible(string) Declaration public bool IsCompatible(string hashCode) Parameters Type Name Description string hashCode Returns Type Description bool"
  },
  "api/RedLoader.VerifyLoaderVersionAttribute.html": {
    "href": "api/RedLoader.VerifyLoaderVersionAttribute.html",
    "title": "Class VerifyLoaderVersionAttribute | RedLoader Docs",
    "keywords": "Class VerifyLoaderVersionAttribute Inheritance object Attribute VerifyLoaderVersionAttribute Inherited Members Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.Equals(object) Attribute.GetHashCode() Attribute.Match(object) Attribute.IsDefaultAttribute() Attribute.TypeId object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) Namespace: RedLoader Assembly: RedLoader.dll Syntax [AttributeUsage(AttributeTargets.Assembly)] public class VerifyLoaderVersionAttribute : Attribute Constructors VerifyLoaderVersionAttribute(SemVersion, bool) Declaration public VerifyLoaderVersionAttribute(SemVersion semver, bool is_minimum) Parameters Type Name Description SemVersion semver bool is_minimum VerifyLoaderVersionAttribute(int, int, int) Declaration public VerifyLoaderVersionAttribute(int major, int minor, int patch) Parameters Type Name Description int major int minor int patch VerifyLoaderVersionAttribute(int, int, int, bool) Declaration public VerifyLoaderVersionAttribute(int major, int minor, int patch, bool is_minimum) Parameters Type Name Description int major int minor int patch bool is_minimum VerifyLoaderVersionAttribute(string) Declaration public VerifyLoaderVersionAttribute(string version) Parameters Type Name Description string version VerifyLoaderVersionAttribute(string, bool) Declaration public VerifyLoaderVersionAttribute(string version, bool is_minimum) Parameters Type Name Description string version bool is_minimum Properties IsMinimum If Version Specified is a Minimum. Declaration public bool IsMinimum { get; } Property Value Type Description bool Major Specified Version Major. Declaration public int Major { get; } Property Value Type Description int Minor Specified Version Minor. Declaration public int Minor { get; } Property Value Type Description int Patch Specified Version Patch. Declaration public int Patch { get; } Property Value Type Description int SemVer Specified SemVersion. Declaration public SemVersion SemVer { get; } Property Value Type Description SemVersion Methods IsCompatible(SemVersion) Declaration public bool IsCompatible(SemVersion version) Parameters Type Name Description SemVersion version Returns Type Description bool IsCompatible(string) Declaration public bool IsCompatible(string version) Parameters Type Name Description string version Returns Type Description bool"
  },
  "api/Semver.html": {
    "href": "api/Semver.html",
    "title": "Namespace Semver | RedLoader Docs",
    "keywords": "Namespace Semver Classes SemVersion A semantic version implementation. Conforms with v2.0.0 of http://semver.org"
  },
  "api/Semver.SemVersion.html": {
    "href": "api/Semver.SemVersion.html",
    "title": "Class SemVersion | RedLoader Docs",
    "keywords": "Class SemVersion A semantic version implementation. Conforms with v2.0.0 of http://semver.org Inheritance object SemVersion Implements IComparable<SemVersion> IComparable ISerializable Inherited Members object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) Namespace: Semver Assembly: RedLoader.dll Syntax public sealed class SemVersion : IComparable<SemVersion>, IComparable, ISerializable Constructors SemVersion(int, int, int, string, string) Constructs a new instance of the SemVersion class. Declaration public SemVersion(int major, int minor = 0, int patch = 0, string prerelease = \"\", string build = \"\") Parameters Type Name Description int major The major version. int minor The minor version. int patch The patch version. string prerelease The prerelease version (e.g. \"alpha\"). string build The build metadata (e.g. \"nightly.232\"). SemVersion(Version) Constructs a new instance of the SemVersion class from a Version. Declaration public SemVersion(Version version) Parameters Type Name Description Version version The Version that is used to initialize the Major, Minor, Patch and Build. Properties Build Gets the build metadata. Declaration public string Build { get; } Property Value Type Description string The build metadata. Empty string if there is no build metadata. Major Gets the major version. Declaration public int Major { get; } Property Value Type Description int The major version. Minor Gets the minor version. Declaration public int Minor { get; } Property Value Type Description int The minor version. Patch Gets the patch version. Declaration public int Patch { get; } Property Value Type Description int The patch version. Prerelease Gets the prerelease version. Declaration public string Prerelease { get; } Property Value Type Description string The prerelease version. Empty string if this is a release version. Methods Change(int?, int?, int?, string, string) Make a copy of the current instance with changed properties. Declaration public SemVersion Change(int? major = null, int? minor = null, int? patch = null, string prerelease = null, string build = null) Parameters Type Name Description int? major The value to replace the major version or null to leave it unchanged. int? minor The value to replace the minor version or null to leave it unchanged. int? patch The value to replace the patch version or null to leave it unchanged. string prerelease The value to replace the prerelease version or null to leave it unchanged. string build The value to replace the build metadata or null to leave it unchanged. Returns Type Description SemVersion The new version object. Remarks The change method is intended to be called using named argument syntax, passing only those fields to be changed. Examples To change only the patch version: version.Change(patch: 4) Compare(SemVersion, SemVersion) Compares the specified versions. Declaration public static int Compare(SemVersion versionA, SemVersion versionB) Parameters Type Name Description SemVersion versionA The first version to compare. SemVersion versionB The second version to compare. Returns Type Description int A signed number indicating the relative values of versionA and versionB. CompareByPrecedence(SemVersion) Compares two semantic versions by precedence as defined in the SemVer spec. Versions that differ only by build metadata have the same precedence. Declaration public int CompareByPrecedence(SemVersion other) Parameters Type Name Description SemVersion other The semantic version. Returns Type Description int A value that indicates the relative order of the objects being compared. The return value has these meanings: Less than zero: This instance precedes other in the sort order. Zero: This instance occurs in the same position in the sort order as other. Greater than zero: This instance follows other in the sort order. CompareTo(SemVersion) Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object. Declaration public int CompareTo(SemVersion other) Parameters Type Name Description SemVersion other An object to compare with this instance. Returns Type Description int A value that indicates the relative order of the objects being compared. The return value has these meanings: Less than zero: This instance precedes other in the sort order. Zero: This instance occurs in the same position in the sort order as other. Greater than zero: This instance follows other in the sort order. CompareTo(object) Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object. Declaration public int CompareTo(object obj) Parameters Type Name Description object obj An object to compare with this instance. Returns Type Description int A value that indicates the relative order of the objects being compared. The return value has these meanings: Less than zero: This instance precedes obj in the sort order. Zero: This instance occurs in the same position in the sort order as obj. Greater than zero: This instance follows obj in the sort order. Exceptions Type Condition InvalidCastException The obj is not a SemVersion. Equals(SemVersion, SemVersion) Checks whether two semantic versions are equal. Declaration public static bool Equals(SemVersion versionA, SemVersion versionB) Parameters Type Name Description SemVersion versionA The first version to compare. SemVersion versionB The second version to compare. Returns Type Description bool true if the two values are equal, otherwise false. Equals(object) Determines whether the specified object is equal to this instance. Declaration public override bool Equals(object obj) Parameters Type Name Description object obj The object to compare with this instance. Returns Type Description bool true if the specified object is equal to this instance, otherwise false. Overrides object.Equals(object) Exceptions Type Condition InvalidCastException The obj is not a SemVersion. GetHashCode() Returns a hash code for this instance. Declaration public override int GetHashCode() Returns Type Description int A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. Overrides object.GetHashCode() GetObjectData(SerializationInfo, StreamingContext) Populates a SerializationInfo with the data needed to serialize the target object. Declaration public void GetObjectData(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info The SerializationInfo to populate with data. StreamingContext context The destination (see SerializationInfo) for this serialization. Parse(string, bool) Converts the string representation of a semantic version to its SemVersion equivalent. Declaration public static SemVersion Parse(string version, bool strict = false) Parameters Type Name Description string version The version string. bool strict If set to true minor and patch version are required, otherwise they are optional. Returns Type Description SemVersion The SemVersion object. Exceptions Type Condition ArgumentNullException The version is null. ArgumentException The version has an invalid format. InvalidOperationException The version is missing Minor or Patch versions and strict is true. OverflowException The Major, Minor, or Patch versions are larger than int.MaxValue . PrecedenceMatches(SemVersion) Returns whether two semantic versions have the same precedence. Versions that differ only by build metadata have the same precedence. Declaration public bool PrecedenceMatches(SemVersion other) Parameters Type Name Description SemVersion other The semantic version to compare to. Returns Type Description bool true if the version precedences are equal. ToString() Returns the string equivalent of this version. Declaration public override string ToString() Returns Type Description string The string equivalent of this version. Overrides object.ToString() TryParse(string, out SemVersion, bool) Converts the string representation of a semantic version to its SemVersion equivalent and returns a value that indicates whether the conversion succeeded. Declaration public static bool TryParse(string version, out SemVersion semver, bool strict = false) Parameters Type Name Description string version The version string. SemVersion semver When the method returns, contains a SemVersion instance equivalent to the version string passed in, if the version string was valid, or null if the version string was not valid. bool strict If set to true minor and patch version are required, otherwise they are optional. Returns Type Description bool false when a invalid version string is passed, otherwise true. Operators operator ==(SemVersion, SemVersion) Compares two semantic versions for equality. Declaration public static bool operator ==(SemVersion left, SemVersion right) Parameters Type Name Description SemVersion left The left value. SemVersion right The right value. Returns Type Description bool If left is equal to right true, otherwise false. operator >(SemVersion, SemVersion) Compares two semantic versions. Declaration public static bool operator >(SemVersion left, SemVersion right) Parameters Type Name Description SemVersion left The left value. SemVersion right The right value. Returns Type Description bool If left is greater than right true, otherwise false. operator >=(SemVersion, SemVersion) Compares two semantic versions. Declaration public static bool operator >=(SemVersion left, SemVersion right) Parameters Type Name Description SemVersion left The left value. SemVersion right The right value. Returns Type Description bool If left is greater than or equal to right true, otherwise false. implicit operator SemVersion(string) Implicit conversion from string to SemVersion. Declaration public static implicit operator SemVersion(string version) Parameters Type Name Description string version The semantic version. Returns Type Description SemVersion The SemVersion object. Exceptions Type Condition ArgumentNullException The version is null. ArgumentException The version number has an invalid format. OverflowException The Major, Minor, or Patch versions are larger than int.MaxValue . operator !=(SemVersion, SemVersion) Compares two semantic versions for inequality. Declaration public static bool operator !=(SemVersion left, SemVersion right) Parameters Type Name Description SemVersion left The left value. SemVersion right The right value. Returns Type Description bool If left is not equal to right true, otherwise false. operator <(SemVersion, SemVersion) Compares two semantic versions. Declaration public static bool operator <(SemVersion left, SemVersion right) Parameters Type Name Description SemVersion left The left value. SemVersion right The right value. Returns Type Description bool If left is less than right true, otherwise false. operator <=(SemVersion, SemVersion) Compares two semantic versions. Declaration public static bool operator <=(SemVersion left, SemVersion right) Parameters Type Name Description SemVersion left The left value. SemVersion right The right value. Returns Type Description bool If left is less than or equal to right true, otherwise false. Implements IComparable<T> IComparable ISerializable"
  },
  "api/SonsSdk.ActorTools.html": {
    "href": "api/SonsSdk.ActorTools.html",
    "title": "Class ActorTools | RedLoader Docs",
    "keywords": "Class ActorTools Inheritance object ActorTools Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: SonsSdk Assembly: SonsSdk.dll Syntax public static class ActorTools Methods GetActors(VailActorTypeId) Declaration public static IEnumerable<VailActor> GetActors(VailActorTypeId id) Parameters Type Name Description VailActorTypeId id Returns Type Description IEnumerable<VailActor> GetPrefab(VailActorTypeId) Declaration public static VailActor GetPrefab(VailActorTypeId id) Parameters Type Name Description VailActorTypeId id Returns Type Description VailActor GetRobby() Declaration public static VailActor GetRobby() Returns Type Description VailActor GetVailActor(WorldSimActor) Declaration public static VailActor GetVailActor(this WorldSimActor worldSimActor) Parameters Type Name Description WorldSimActor worldSimActor Returns Type Description VailActor Spawn(VailActorTypeId, Vector3, Quaternion) Declaration public static VailActor Spawn(VailActorTypeId id, Vector3 position, Quaternion rotation) Parameters Type Name Description VailActorTypeId id Vector3 position Quaternion rotation Returns Type Description VailActor"
  },
  "api/SonsSdk.AssetLoaders.html": {
    "href": "api/SonsSdk.AssetLoaders.html",
    "title": "Class AssetLoaders | RedLoader Docs",
    "keywords": "Class AssetLoaders Utilities for addressables Inheritance object AssetLoaders Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: SonsSdk Assembly: SonsSdk.dll Syntax public static class AssetLoaders Methods InstantiatePrefab(string) Load and instantiate a gameobject from addressables Declaration public static GameObject InstantiatePrefab(string name) Parameters Type Name Description string name Returns Type Description GameObject LoadAsset<T>(string) Declaration public static T LoadAsset<T>(string name) where T : Object Parameters Type Name Description string name Returns Type Description T Type Parameters Name Description T LoadBundleFromAssembly(string) Load an asset bundle from the calling assembly. The name will automatically be prefixed with the assembly name. Declaration public static AssetBundle LoadBundleFromAssembly(string name) Parameters Type Name Description string name The patch of the resource you wish to load Returns Type Description AssetBundle Examples LoadFromAssembly(\"Resources.bundle\") Exceptions Type Condition Exception LoadDataFromAssembly(string) Load data from the calling assembly. The name will automatically be prefixed with the assembly name. Declaration public static byte[] LoadDataFromAssembly(string name) Parameters Type Name Description string name The patch of the resource you wish to load Returns Type Description byte[] Examples LoadFromAssembly(\"Resources.bundle\") Exceptions Type Condition Exception LoadPrefab(string) Load a gameobject from addressables Declaration public static GameObject LoadPrefab(string name) Parameters Type Name Description string name Returns Type Description GameObject LoadTexture(byte[]) Load a texture from a byte buffer Declaration public static Texture2D LoadTexture(byte[] data) Parameters Type Name Description byte[] data Returns Type Description Texture2D LoadTexture(string) Load a texture from a file Declaration public static Texture2D LoadTexture(string path) Parameters Type Name Description string path Returns Type Description Texture2D LoadTextureFromAssembly(string) Load a texture from a file in the calling assembly. The name will automatically be prefixed with the assembly name. Declaration public static Texture2D LoadTextureFromAssembly(string path) Parameters Type Name Description string path Returns Type Description Texture2D Examples LoadTextureFromAssembly(\"Resources.MyTexture.png\") MapBundleToFile(byte[], Type) Maps the contents of an asset bundle to a static class. The name of the property must match the name of the asset in the bundle. Declaration public static void MapBundleToFile(byte[] bundleData, Type mapFileType) Parameters Type Name Description byte[] bundleData The loaded bundle Type mapFileType The class to map the asset bundle contents to MapBundleToFile<T>(byte[]) Maps the contents of an asset bundle to a static class. The name of the property must match the name of the asset in the bundle. Declaration public static void MapBundleToFile<T>(byte[] bundleData) Parameters Type Name Description byte[] bundleData The loaded bundle Type Parameters Name Description T PrintAllAddressables() Declaration public static void PrintAllAddressables()"
  },
  "api/SonsSdk.Attributes.AssetBundleAttribute.html": {
    "href": "api/SonsSdk.Attributes.AssetBundleAttribute.html",
    "title": "Class AssetBundleAttribute | RedLoader Docs",
    "keywords": "Class AssetBundleAttribute Inheritance object Attribute AssetBundleAttribute Inherited Members Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.Equals(object) Attribute.GetHashCode() Attribute.Match(object) Attribute.IsDefaultAttribute() Attribute.TypeId object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) Namespace: SonsSdk.Attributes Assembly: SonsSdk.dll Syntax [AttributeUsage(AttributeTargets.Class)] public class AssetBundleAttribute : Attribute Constructors AssetBundleAttribute(string) Declaration public AssetBundleAttribute(string assetBundleName) Parameters Type Name Description string assetBundleName Properties AssetBundleName Declaration public string AssetBundleName { get; } Property Value Type Description string Methods IsLoaded() Declaration public bool IsLoaded() Returns Type Description bool"
  },
  "api/SonsSdk.Attributes.AssetReferenceAttribute.html": {
    "href": "api/SonsSdk.Attributes.AssetReferenceAttribute.html",
    "title": "Class AssetReferenceAttribute | RedLoader Docs",
    "keywords": "Class AssetReferenceAttribute Inheritance object Attribute AssetReferenceAttribute Inherited Members Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.Equals(object) Attribute.GetHashCode() Attribute.Match(object) Attribute.IsDefaultAttribute() Attribute.TypeId object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) Namespace: SonsSdk.Attributes Assembly: SonsSdk.dll Syntax [AttributeUsage(AttributeTargets.Property)] public class AssetReferenceAttribute : Attribute Constructors AssetReferenceAttribute(string) Declaration public AssetReferenceAttribute(string assetName = null) Parameters Type Name Description string assetName Properties AssetName Declaration public string AssetName { get; } Property Value Type Description string"
  },
  "api/SonsSdk.Attributes.DebugCommandAttribute.html": {
    "href": "api/SonsSdk.Attributes.DebugCommandAttribute.html",
    "title": "Class DebugCommandAttribute | RedLoader Docs",
    "keywords": "Class DebugCommandAttribute Inheritance object Attribute DebugCommandAttribute Inherited Members Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.Equals(object) Attribute.GetHashCode() Attribute.Match(object) Attribute.IsDefaultAttribute() Attribute.TypeId object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) Namespace: SonsSdk.Attributes Assembly: SonsSdk.dll Syntax [AttributeUsage(AttributeTargets.Method)] public class DebugCommandAttribute : Attribute Constructors DebugCommandAttribute(string) Declaration public DebugCommandAttribute(string command) Parameters Type Name Description string command Properties Command Declaration public string Command { get; } Property Value Type Description string"
  },
  "api/SonsSdk.Attributes.DebugPropAttribute.html": {
    "href": "api/SonsSdk.Attributes.DebugPropAttribute.html",
    "title": "Class DebugPropAttribute | RedLoader Docs",
    "keywords": "Class DebugPropAttribute Inheritance object Attribute DebugPropAttribute Inherited Members Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.Equals(object) Attribute.GetHashCode() Attribute.Match(object) Attribute.IsDefaultAttribute() Attribute.TypeId object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) Namespace: SonsSdk.Attributes Assembly: SonsSdk.dll Syntax [AttributeUsage(AttributeTargets.Property)] public class DebugPropAttribute : Attribute Constructors DebugPropAttribute() Declaration public DebugPropAttribute()"
  },
  "api/SonsSdk.Attributes.html": {
    "href": "api/SonsSdk.Attributes.html",
    "title": "Namespace SonsSdk.Attributes | RedLoader Docs",
    "keywords": "Namespace SonsSdk.Attributes Classes AssetBundleAttribute AssetReferenceAttribute DebugCommandAttribute DebugPropAttribute"
  },
  "api/SonsSdk.CommonExtensions.html": {
    "href": "api/SonsSdk.CommonExtensions.html",
    "title": "Class CommonExtensions | RedLoader Docs",
    "keywords": "Class CommonExtensions Inheritance object CommonExtensions Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: SonsSdk Assembly: SonsSdk.dll Syntax public static class CommonExtensions Methods Destroy<T>(GameObject) Declaration public static void Destroy<T>(this GameObject go) where T : Component Parameters Type Name Description GameObject go Type Parameters Name Description T DontDestroyOnLoad(GameObject) Declaration public static GameObject DontDestroyOnLoad(this GameObject go) Parameters Type Name Description GameObject go Returns Type Description GameObject FindGet<T>(GameObject, string) Gets a transform by path and return a component on it Declaration public static T FindGet<T>(this GameObject go, string name) where T : Component Parameters Type Name Description GameObject go string name The path of the transform to get Returns Type Description T Type Parameters Name Description T The type of the component to get FirstContains<T>(IEnumerable<T>, string) Declaration public static T FirstContains<T>(this IEnumerable<T> iter, string name) where T : Object Parameters Type Name Description IEnumerable<T> iter string name Returns Type Description T Type Parameters Name Description T FirstEndsWith<T>(IEnumerable<T>, string) Declaration public static T FirstEndsWith<T>(this IEnumerable<T> iter, string name) where T : Object Parameters Type Name Description IEnumerable<T> iter string name Returns Type Description T Type Parameters Name Description T FirstStartsWith<T>(IEnumerable<T>, string) Declaration public static T FirstStartsWith<T>(this IEnumerable<T> iter, string name) where T : Object Parameters Type Name Description IEnumerable<T> iter string name Returns Type Description T Type Parameters Name Description T FirstWithName<T>(IEnumerable<T>, string) Declaration public static T FirstWithName<T>(this IEnumerable<T> iter, string name) where T : Object Parameters Type Name Description IEnumerable<T> iter string name Returns Type Description T Type Parameters Name Description T HideAndDontSave(GameObject) Declaration public static GameObject HideAndDontSave(this GameObject go) Parameters Type Name Description GameObject go Returns Type Description GameObject Instantiate(GameObject, bool) Declaration public static GameObject Instantiate(this GameObject go, bool sameParent = false) Parameters Type Name Description GameObject go bool sameParent Returns Type Description GameObject Instantiate(GameObject, Vector3, bool) Declaration public static GameObject Instantiate(this GameObject go, Vector3 position, bool sameParent = false) Parameters Type Name Description GameObject go Vector3 position bool sameParent Returns Type Description GameObject Instantiate(GameObject, Vector3, Quaternion, bool) Declaration public static GameObject Instantiate(this GameObject go, Vector3 position, Quaternion rotation, bool sameParent = false) Parameters Type Name Description GameObject go Vector3 position Quaternion rotation bool sameParent Returns Type Description GameObject InstantiateAndGet<T>(GameObject, bool) Declaration public static T InstantiateAndGet<T>(this GameObject go, bool sameParent = false) where T : Component Parameters Type Name Description GameObject go bool sameParent Returns Type Description T Type Parameters Name Description T InstantiateAndGet<T>(GameObject, Vector3, bool) Declaration public static T InstantiateAndGet<T>(this GameObject go, Vector3 position, bool sameParent = false) where T : Component Parameters Type Name Description GameObject go Vector3 position bool sameParent Returns Type Description T Type Parameters Name Description T InstantiateAndGet<T>(GameObject, Vector3, Quaternion, bool) Declaration public static T InstantiateAndGet<T>(this GameObject go, Vector3 position, Quaternion rotation, bool sameParent = false) where T : Component Parameters Type Name Description GameObject go Vector3 position Quaternion rotation bool sameParent Returns Type Description T Type Parameters Name Description T SetName(GameObject, string) Declaration public static GameObject SetName(this GameObject go, string name) Parameters Type Name Description GameObject go string name Returns Type Description GameObject SetParent(GameObject, Transform, bool) Declaration public static GameObject SetParent(this GameObject go, Transform parent, bool worldPositionStays = false) Parameters Type Name Description GameObject go Transform parent bool worldPositionStays Returns Type Description GameObject ToUnityColor(Color) Declaration public static Color ToUnityColor(this Color color) Parameters Type Name Description Color color Returns Type Description Color WithAlpha(Color, float) Declaration public static Color WithAlpha(this Color color, float alpha) Parameters Type Name Description Color color float alpha Returns Type Description Color WithBrightness(Color, float) Declaration public static Color WithBrightness(this Color color, float brightness) Parameters Type Name Description Color color float brightness Returns Type Description Color WithBrightnessOffset(Color, float) Declaration public static Color WithBrightnessOffset(this Color color, float brightnessOffset) Parameters Type Name Description Color color float brightnessOffset Returns Type Description Color"
  },
  "api/SonsSdk.DebugTools.html": {
    "href": "api/SonsSdk.DebugTools.html",
    "title": "Class DebugTools | RedLoader Docs",
    "keywords": "Class DebugTools Inheritance object DebugTools Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: SonsSdk Assembly: SonsSdk.dll Syntax public class DebugTools Constructors DebugTools() Declaration public DebugTools() Methods CreatePrimitive(PrimitiveType, Vector3?, Color?) Declaration public static GameObject CreatePrimitive(PrimitiveType type, Vector3? pos = null, Color? color = null) Parameters Type Name Description PrimitiveType type Vector3? pos Color? color Returns Type Description GameObject DrawGlLine(Vector3, Vector3, float) Declaration public static void DrawGlLine(Vector3 start, Vector3 end, float thickness = 1) Parameters Type Name Description Vector3 start Vector3 end float thickness GetHdrpMaterial(Color?) Declaration public static Material GetHdrpMaterial(Color? color = null) Parameters Type Name Description Color? color Returns Type Description Material"
  },
  "api/SonsSdk.DebugTools.LineDrawer.html": {
    "href": "api/SonsSdk.DebugTools.LineDrawer.html",
    "title": "Class DebugTools.LineDrawer | RedLoader Docs",
    "keywords": "Class DebugTools.LineDrawer Class for drawing a line in the world. Inheritance object DebugTools.LineDrawer Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: SonsSdk Assembly: SonsSdk.dll Syntax public class DebugTools.LineDrawer Constructors LineDrawer() Declaration public LineDrawer() Fields LineRenderer Declaration public LineRenderer LineRenderer Field Value Type Description LineRenderer Transform Declaration public Transform Transform Field Value Type Description Transform Properties Active Declaration public bool Active { get; set; } Property Value Type Description bool IsValid Declaration public bool IsValid { get; } Property Value Type Description bool Methods Destroy() Declaration public void Destroy() SetLine(Vector3, Vector3) Declaration public void SetLine(Vector3 start, Vector3 end) Parameters Type Name Description Vector3 start Vector3 end SetPosition(Vector3) Declaration public void SetPosition(Vector3 pos) Parameters Type Name Description Vector3 pos"
  },
  "api/SonsSdk.Exceptions.html": {
    "href": "api/SonsSdk.Exceptions.html",
    "title": "Namespace SonsSdk.Exceptions | RedLoader Docs",
    "keywords": "Namespace SonsSdk.Exceptions Classes NotInWorldException"
  },
  "api/SonsSdk.Exceptions.NotInWorldException.html": {
    "href": "api/SonsSdk.Exceptions.NotInWorldException.html",
    "title": "Class NotInWorldException | RedLoader Docs",
    "keywords": "Class NotInWorldException Inheritance object Exception NotInWorldException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.ToString() Exception.GetType() Exception.TargetSite Exception.Message Exception.Data Exception.InnerException Exception.HelpLink Exception.Source Exception.HResult Exception.StackTrace Exception.SerializeObjectState object.MemberwiseClone() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: SonsSdk.Exceptions Assembly: SonsSdk.dll Syntax public class NotInWorldException : Exception, ISerializable Constructors NotInWorldException() Declaration public NotInWorldException() Implements ISerializable"
  },
  "api/SonsSdk.GlobalInput.html": {
    "href": "api/SonsSdk.GlobalInput.html",
    "title": "Class GlobalInput | RedLoader Docs",
    "keywords": "Class GlobalInput Inheritance object GlobalInput Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: SonsSdk Assembly: SonsSdk.dll Syntax public class GlobalInput Constructors GlobalInput() Declaration public GlobalInput() Methods RegisterKey(KeyCode, Action) Register a key that will be polled every frame. The action will be invoke if the key is pressed during that frame. Declaration public static bool RegisterKey(KeyCode key, Action action) Parameters Type Name Description KeyCode key Action action Returns Type Description bool False if the key is already registered UnregisterKey(KeyCode) Declaration public static void UnregisterKey(KeyCode key) Parameters Type Name Description KeyCode key"
  },
  "api/SonsSdk.html": {
    "href": "api/SonsSdk.html",
    "title": "Namespace SonsSdk | RedLoader Docs",
    "keywords": "Namespace SonsSdk Namespaces SonsSdk.Attributes SonsSdk.Exceptions Classes ActorTools AssetLoaders Utilities for addressables CommonExtensions DebugTools DebugTools.LineDrawer Class for drawing a line in the world. GlobalInput ImLineDrawer ItemTools ManifestData MemberDebugger SdkEvents SonsMod SonsMod.ModConfigurator SonsTools SoundPlayer SoundTools SoundTools.Debugging UnityUtils Structs ItemTools.ItemHook Enums ItemTools.EPrefabType SdkEvents.ESonsScene"
  },
  "api/SonsSdk.ImLineDrawer.html": {
    "href": "api/SonsSdk.ImLineDrawer.html",
    "title": "Class ImLineDrawer | RedLoader Docs",
    "keywords": "Class ImLineDrawer Inheritance object ImLineDrawer Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: SonsSdk Assembly: SonsSdk.dll Syntax public class ImLineDrawer Constructors ImLineDrawer() Declaration public ImLineDrawer() Fields End Declaration public Vector3 End Field Value Type Description Vector3 Start Declaration public Vector3 Start Field Value Type Description Vector3 Methods BeginRendering() Declaration public void BeginRendering() EndRendering() Declaration public void EndRendering() SetLine(Vector3, Vector3) Declaration public void SetLine(Vector3 start, Vector3 end) Parameters Type Name Description Vector3 start Vector3 end StartNew() Declaration public static ImLineDrawer StartNew() Returns Type Description ImLineDrawer"
  },
  "api/SonsSdk.ItemTools.EPrefabType.html": {
    "href": "api/SonsSdk.ItemTools.EPrefabType.html",
    "title": "Enum ItemTools.EPrefabType | RedLoader Docs",
    "keywords": "Enum ItemTools.EPrefabType Namespace: SonsSdk Assembly: SonsSdk.dll Syntax [Flags] public enum ItemTools.EPrefabType Fields Name Description HeldPrefab PickupPrefab PropPrefab"
  },
  "api/SonsSdk.ItemTools.html": {
    "href": "api/SonsSdk.ItemTools.html",
    "title": "Class ItemTools | RedLoader Docs",
    "keywords": "Class ItemTools Inheritance object ItemTools Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: SonsSdk Assembly: SonsSdk.dll Syntax public class ItemTools Constructors ItemTools() Declaration public ItemTools() Methods AddItemComponent(int, Type, EPrefabType) Declaration public static void AddItemComponent(int itemId, Type component, ItemTools.EPrefabType hookType) Parameters Type Name Description int itemId Type component ItemTools.EPrefabType hookType AddItemComponent<T>(int, EPrefabType) Declaration public static void AddItemComponent<T>(int itemId, ItemTools.EPrefabType hookType) Parameters Type Name Description int itemId ItemTools.EPrefabType hookType Type Parameters Name Description T"
  },
  "api/SonsSdk.ItemTools.ItemHook.html": {
    "href": "api/SonsSdk.ItemTools.ItemHook.html",
    "title": "Struct ItemTools.ItemHook | RedLoader Docs",
    "keywords": "Struct ItemTools.ItemHook Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) Namespace: SonsSdk Assembly: SonsSdk.dll Syntax public struct ItemTools.ItemHook Constructors ItemHook(int, Type, EPrefabType) Declaration public ItemHook(int itemId, Type component, ItemTools.EPrefabType hookType) Parameters Type Name Description int itemId Type component ItemTools.EPrefabType hookType Fields HookType Declaration public readonly ItemTools.EPrefabType HookType Field Value Type Description ItemTools.EPrefabType ItemId Declaration public readonly int ItemId Field Value Type Description int"
  },
  "api/SonsSdk.ManifestData.html": {
    "href": "api/SonsSdk.ManifestData.html",
    "title": "Class ManifestData | RedLoader Docs",
    "keywords": "Class ManifestData Inheritance object ManifestData Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: SonsSdk Assembly: SonsSdk.dll Syntax public class ManifestData Constructors ManifestData() Declaration public ManifestData() Properties Author Author of the mod Declaration [DecodeAlias(new string[] { \"author\" })] [Include] public string Author { get; } Property Value Type Description string Dependencies Optional. List of dependencies of the mod Declaration [DecodeAlias(new string[] { \"dependencies\" })] [Include] public string[] Dependencies { get; } Property Value Type Description string[] Description Description of the mod Declaration [DecodeAlias(new string[] { \"description\" })] [Include] public string Description { get; } Property Value Type Description string DontApplyPatches Optional. If the mods harmony patches shouldn't be applied automatically Declaration [DecodeAlias(new string[] { \"dontApplyPatches\" })] [Include] public bool DontApplyPatches { get; } Property Value Type Description bool GameVersion Game version the mod is compatible with Declaration [DecodeAlias(new string[] { \"gameVersion\" })] [Include] public string GameVersion { get; } Property Value Type Description string Id Unique id of the mod Declaration [DecodeAlias(new string[] { \"id\" })] [Include] public string Id { get; } Property Value Type Description string LogColor Optional. The hex string color in which the mod's name will be displayed in the console Declaration [DecodeAlias(new string[] { \"logColor\" })] [Include] public string LogColor { get; } Property Value Type Description string Examples #ffffff Name Name of the mod Declaration [DecodeAlias(new string[] { \"name\" })] [Include] public string Name { get; } Property Value Type Description string Platform Where this mod is able to run. Possible values: \"Client\", \"Server\", \"Universal\". Declaration [DecodeAlias(new string[] { \"platform\" })] [Include] public string Platform { get; } Property Value Type Description string Priority Optional. Priority of the mod. Declaration [DecodeAlias(new string[] { \"priority\" })] [Include] public int Priority { get; } Property Value Type Description int Url Optional. Download url of the mod. Declaration [DecodeAlias(new string[] { \"url\" })] [Include] public string Url { get; } Property Value Type Description string Version Version of the mod Declaration [DecodeAlias(new string[] { \"version\" })] [Include] public string Version { get; } Property Value Type Description string VersionObject Declaration public Version VersionObject { get; } Property Value Type Description Version"
  },
  "api/SonsSdk.MemberDebugger.html": {
    "href": "api/SonsSdk.MemberDebugger.html",
    "title": "Class MemberDebugger | RedLoader Docs",
    "keywords": "Class MemberDebugger Inheritance object MemberDebugger Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: SonsSdk Assembly: SonsSdk.dll Syntax public class MemberDebugger Constructors MemberDebugger(object) Declaration public MemberDebugger(object obj) Parameters Type Name Description object obj MemberDebugger(object, params string[]) Declaration public MemberDebugger(object obj, params string[] propNames) Parameters Type Name Description object obj string[] propNames Methods StartDebugging(object) Declaration public static void StartDebugging(object obj) Parameters Type Name Description object obj StartDebugging(object, params string[]) Declaration public static void StartDebugging(object obj, params string[] propNames) Parameters Type Name Description object obj string[] propNames StopDebugging(object) Declaration public static void StopDebugging(object obj) Parameters Type Name Description object obj"
  },
  "api/SonsSdk.SdkEvents.ESonsScene.html": {
    "href": "api/SonsSdk.SdkEvents.ESonsScene.html",
    "title": "Enum SdkEvents.ESonsScene | RedLoader Docs",
    "keywords": "Enum SdkEvents.ESonsScene Namespace: SonsSdk Assembly: SonsSdk.dll Syntax public enum SdkEvents.ESonsScene Fields Name Description Game Loading Title"
  },
  "api/SonsSdk.SdkEvents.html": {
    "href": "api/SonsSdk.SdkEvents.html",
    "title": "Class SdkEvents | RedLoader Docs",
    "keywords": "Class SdkEvents Inheritance object SdkEvents Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: SonsSdk Assembly: SonsSdk.dll Syntax public static class SdkEvents Fields OnArmorEquipped Called when the player equips some armor Declaration public static readonly MelonEvent OnArmorEquipped Field Value Type Description MelonEvent OnCameraRender Called by HDRP at the end of rendering a frame Declaration public static readonly MelonEvent<ScriptableRenderContext, List<Camera>> OnCameraRender Field Value Type Description MelonEvent<ScriptableRenderContext, List<Camera>> OnGameStart Called when the player spawns in the world and gains control Declaration public static readonly MelonEvent OnGameStart Field Value Type Description MelonEvent OnInWorldUpdate Called on update when the player is in the world Declaration public static readonly MelonEvent OnInWorldUpdate Field Value Type Description MelonEvent OnItemConsumed Called when the player consumes an item Declaration public static readonly MelonEvent<ItemInstance> OnItemConsumed Field Value Type Description MelonEvent<ItemInstance> OnItemCrafted Called when the player crafts an item Declaration public static readonly MelonEvent<int> OnItemCrafted Field Value Type Description MelonEvent<int> OnItemPickup Called when the player picks up an item Declaration public static readonly MelonEvent<ItemInstance.ItemInstanceAndCount> OnItemPickup Field Value Type Description MelonEvent<ItemInstance.ItemInstanceAndCount> OnSdkInitialized Called when the sdk has been fully initialized Declaration public static readonly MelonEvent OnSdkInitialized Field Value Type Description MelonEvent OnSonsSceneInitialized Declaration public static readonly MelonEvent<SdkEvents.ESonsScene> OnSonsSceneInitialized Field Value Type Description MelonEvent<SdkEvents.ESonsScene>"
  },
  "api/SonsSdk.SonsMod.html": {
    "href": "api/SonsSdk.SonsMod.html",
    "title": "Class SonsMod | RedLoader Docs",
    "keywords": "Class SonsMod Inheritance object ModBase ModTypeBase<SonsMod> SonsMod Inherited Members ModTypeBase<SonsMod>.ExecuteAll(LemonAction<SonsMod>, bool, string) ModTypeBase<SonsMod>.RegisteredMods ModTypeBase<SonsMod>.TypeName ModTypeBase<SonsMod>.MelonTypeName ModBase.OnMelonRegistered ModBase.OnMelonUnregistered ModBase.OnMelonInitializing ModBase.OnRegister ModBase.OnUnregister ModBase.CreateWrapper<T>(string, string, string, MelonGameAttribute[], MelonProcessAttribute[], int, Color?, Color?, string) ModBase.RegisterSorted<T>(IEnumerable<T>) ModBase.OnPreSupportModule() ModBase.OnUpdate() ModBase.OnFixedUpdate() ModBase.OnLateUpdate() ModBase.OnGUI() ModBase.OnApplicationQuit() ModBase.OnPreferencesSaved() ModBase.OnPreferencesSaved(string) ModBase.OnPreferencesLoaded() ModBase.OnPreferencesLoaded(string) ModBase.OnEarlyInitializeMelon() ModBase.OnInitializeMod() ModBase.OnLateInitializeMod() ModBase.OnDeinitializeMod() ModBase.FindIncompatiblities(MelonGameAttribute, string, string, string, string, MelonPlatformAttribute.CompatiblePlatforms, MelonPlatformDomainAttribute.CompatibleDomains) ModBase.FindIncompatiblitiesFromContext() ModBase.PrintIncompatibilities(ModBase.Incompatibility[], ModBase) ModBase.Register() ModBase.FindMelon(string, string) ModBase.Unregister(string, bool) ModBase.ExecuteAll(LemonAction<ModBase>, bool, string) ModBase.ExecuteList<T>(LemonAction<T>, List<T>, bool, string) ModBase.SendMessageAll(string, params object[]) ModBase.SendMessage(string, params object[]) ModBase.RegisteredMelons ModBase.MelonAssembly ModBase.Priority ModBase.ConsoleColor ModBase.AuthorConsoleColor ModBase.AdditionalCredits ModBase.SupportedGameVersion ModBase.OptionalDependencies ModBase.HarmonyInstance ModBase.LoggerInstance ModBase.ID ModBase.Description ModBase.Registered object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: SonsSdk Assembly: SonsSdk.dll Syntax public abstract class SonsMod : ModTypeBase<SonsMod> Constructors SonsMod() Declaration protected SonsMod() Properties Manifest Declaration public ManifestData Manifest { get; } Property Value Type Description ManifestData Methods Configure(ModConfigurator) Configure mod settings and subscribe to events. Declaration public virtual void Configure(SonsMod.ModConfigurator config) Parameters Type Name Description SonsMod.ModConfigurator config Log(Color, object) Declaration protected void Log(Color color, object obj) Parameters Type Name Description Color color object obj Log(object) Declaration protected void Log(object obj) Parameters Type Name Description object obj Log(object, Color?) Declaration protected void Log(object msg, Color? color = null) Parameters Type Name Description object msg Color? color OnGameStart() Runs when the game scene is loaded (right before the player gains control). Declaration protected virtual void OnGameStart() OnSceneWasInitialized(int, string) Runs once a Scene is initialized. Declaration public virtual void OnSceneWasInitialized(int buildIndex, string sceneName) Parameters Type Name Description int buildIndex string sceneName OnSceneWasLoaded(int, string) Runs when a new Scene is loaded. Declaration public virtual void OnSceneWasLoaded(int buildIndex, string sceneName) Parameters Type Name Description int buildIndex string sceneName OnSceneWasUnloaded(int, string) Runs once a Scene unloads. Declaration public virtual void OnSceneWasUnloaded(int buildIndex, string sceneName) Parameters Type Name Description int buildIndex string sceneName OnSdkInitialized() Runs when the SDK is fully initialized. SDK usage like creation of custom UI should be done here. Declaration protected virtual void OnSdkInitialized() OnSonsSceneInitialized(ESonsScene) Runs when a scene is initialized. But with an enum parameter to check for sons scenes. Declaration protected virtual void OnSonsSceneInitialized(SdkEvents.ESonsScene sonsScene) Parameters Type Name Description SdkEvents.ESonsScene sonsScene RegisterCommand(string, Func<string, bool>) Declaration protected void RegisterCommand(string command, Func<string, bool> callback) Parameters Type Name Description string command Func<string, bool> callback StartPropDebugging() Declaration protected void StartPropDebugging() StopDebugging() Declaration protected void StopDebugging()"
  },
  "api/SonsSdk.SonsMod.ModConfigurator.html": {
    "href": "api/SonsSdk.SonsMod.ModConfigurator.html",
    "title": "Class SonsMod.ModConfigurator | RedLoader Docs",
    "keywords": "Class SonsMod.ModConfigurator Inheritance object SonsMod.ModConfigurator Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: SonsSdk Assembly: SonsSdk.dll Syntax public class SonsMod.ModConfigurator Constructors ModConfigurator() Declaration public ModConfigurator() Methods SubscribeOnWorldUpdate(LemonAction) Declaration public SonsMod.ModConfigurator SubscribeOnWorldUpdate(LemonAction action) Parameters Type Name Description LemonAction action Returns Type Description SonsMod.ModConfigurator"
  },
  "api/SonsSdk.SonsTools.html": {
    "href": "api/SonsSdk.SonsTools.html",
    "title": "Class SonsTools | RedLoader Docs",
    "keywords": "Class SonsTools Inheritance object SonsTools Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: SonsSdk Assembly: SonsSdk.dll Syntax public static class SonsTools Methods GetPositionInFrontOfPlayer(float) Get a vector3 position in from of the player Declaration public static Vector3 GetPositionInFrontOfPlayer(float distance) Parameters Type Name Description float distance Returns Type Description Vector3 GetPositionInFrontOfPlayer(float, float) Get a vector3 position in from of the player Declaration public static Vector3 GetPositionInFrontOfPlayer(float distance, float height) Parameters Type Name Description float distance float height Returns Type Description Vector3 MenuMode(bool) Toggle menu mode. Stops all keyboard inputs and shows the cursor. Declaration public static void MenuMode(bool enable) Parameters Type Name Description bool enable ShowMessage(string, float) Show a message in the bottom left corner of the screen for a certain duration. Declaration public static void ShowMessage(string message, float duration = 3) Parameters Type Name Description string message float duration"
  },
  "api/SonsSdk.SoundPlayer.html": {
    "href": "api/SonsSdk.SoundPlayer.html",
    "title": "Class SoundPlayer | RedLoader Docs",
    "keywords": "Class SoundPlayer Inheritance object SoundPlayer Namespace: SonsSdk Assembly: SonsSdk.dll Syntax public class SoundPlayer : MonoBehaviour Constructors SoundPlayer() Declaration public SoundPlayer() Fields MaxDistance Declaration public float? MaxDistance Field Value Type Description float? Sound Declaration public Sound Sound Field Value Type Description Sound Properties Channel Declaration public Channel Channel { get; } Property Value Type Description Channel ChannelDistance Declaration public (float min, float max) ChannelDistance { get; set; } Property Value Type Description (float min, float max) IsPlaying Declaration public bool IsPlaying { get; } Property Value Type Description bool Methods Play() Declaration public Channel Play() Returns Type Description Channel Stop() Declaration public void Stop()"
  },
  "api/SonsSdk.SoundTools.Debugging.html": {
    "href": "api/SonsSdk.SoundTools.Debugging.html",
    "title": "Class SoundTools.Debugging | RedLoader Docs",
    "keywords": "Class SoundTools.Debugging Inheritance object SoundTools.Debugging Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: SonsSdk Assembly: SonsSdk.dll Syntax public static class SoundTools.Debugging Methods GetBusId() Declaration public static Guid GetBusId() Returns Type Description Guid GetBusList(Bank) Declaration public static List<Bus> GetBusList(Bank bank) Parameters Type Name Description Bank bank Returns Type Description List<Bus> GetLoadedBanks() Declaration public static List<Bank> GetLoadedBanks() Returns Type Description List<Bank> PrintLoadedBanks() Declaration public static void PrintLoadedBanks()"
  },
  "api/SonsSdk.SoundTools.html": {
    "href": "api/SonsSdk.SoundTools.html",
    "title": "Class SoundTools | RedLoader Docs",
    "keywords": "Class SoundTools Inheritance object SoundTools Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: SonsSdk Assembly: SonsSdk.dll Syntax public static class SoundTools Fields CoreSystem Declaration public static Lazy<System> CoreSystem Field Value Type Description Lazy<System> Properties MasterBus Declaration public static Bus MasterBus { get; } Property Value Type Description Bus MasterVolume The master volume in the game settings. Declaration public static float MasterVolume { get; } Property Value Type Description float MusicVolume The music volume in the game settings. Multiplied by the master volume. Declaration public static float MusicVolume { get; } Property Value Type Description float SfxVolume The sfx volume in the game settings. Multiplied by the master volume. Declaration public static float SfxVolume { get; } Property Value Type Description float VoiceVolume The voice volume in the game settings. Multiplied by the master volume. Declaration public static float VoiceVolume { get; } Property Value Type Description float Methods BindSound(GameObject, string) Bind a sound to a gameobject. The sound will be played at the position of the gameobject. Declaration public static SoundPlayer BindSound(GameObject go, string id) Parameters Type Name Description GameObject go The gameobject to bind the sound to string id The id of the sound to play Returns Type Description SoundPlayer GetSound(string) Declaration public static Sound GetSound(string id) Parameters Type Name Description string id Returns Type Description Sound LoadBank(byte[], byte[], LOAD_BANK_FLAGS) Loads and registeres a bank from a byte buffer Declaration public static Bank? LoadBank(byte[] data, byte[] stringsData = null, LOAD_BANK_FLAGS flags = 0) Parameters Type Name Description byte[] data The .bank data byte[] stringsData The .strings.bank data LOAD_BANK_FLAGS flags Returns Type Description Bank? LoadBank(string, bool, LOAD_BANK_FLAGS) Loads and registeres a bank file Declaration public static Bank? LoadBank(string path, bool loadStringsFile = true, LOAD_BANK_FLAGS flags = 0) Parameters Type Name Description string path The path of the bank file (Make sure the {name}.strings.bank file is also present at that location) bool loadStringsFile If the .strings.bank file should also be loaded. If true make sure it exists beside the .bank file LOAD_BANK_FLAGS flags Returns Type Description Bank? PlaySound(Sound, float, float?) Gets the sound by id. Declaration public static Channel PlaySound(Sound sound, float volume, float? pitch = null) Parameters Type Name Description Sound sound float volume float? pitch Returns Type Description Channel PlaySound(Sound, Vector3, float?, float?, float?) Declaration public static Channel PlaySound(Sound sound, Vector3 pos, float? maxDist = null, float? volume = null, float? pitch = null) Parameters Type Name Description Sound sound Vector3 pos float? maxDist float? volume float? pitch Returns Type Description Channel PlaySound(string, float?, float?) Play a registered sound Declaration public static Channel PlaySound(string id, float? volume = null, float? pitch = null) Parameters Type Name Description string id The id you specified in RegisterSound(string, string, bool) float? volume The volume of the sound. If nothing is specified the settings music volume is used float? pitch The pitch of the sound. 1 is normal pitch Returns Type Description Channel A channel which let's you control and stop the sound again PlaySound(string, Vector3, float?, float?, float?) Play a registered sound Declaration public static Channel PlaySound(string id, Vector3 pos, float? maxDist = null, float? volume = null, float? pitch = null) Parameters Type Name Description string id The id you specified in RegisterSound(string, string, bool) Vector3 pos The position at which to play the sound float? maxDist The maximum distance at which the sound is still audible float? volume The volume of the sound. If nothing is specified the settings music volume is used float? pitch The pitch of the sound. 1 is normal pitch Returns Type Description Channel A channel which let's you control and stop the sound again RegisterSound(string, byte[], bool) Register a sound to the fmod system from memory. You can play it with PlaySound(string, float?, float?). Declaration public static void RegisterSound(string id, byte[] data, bool use3d = false) Parameters Type Name Description string id The id of the sound by which you can play it later byte[] data the data of the sound file bool use3d RegisterSound(string, string, bool) Register a sound to the fmod system from a file. You can play it with PlaySound(string, float?, float?). Declaration public static Sound RegisterSound(string id, string filepath, bool use3d = false) Parameters Type Name Description string id The id of the sound by which you can play it later string filepath The file path of the sound bool use3d Returns Type Description Sound SetPosition(ref Channel, float, float, float) Declaration public static void SetPosition(ref Channel channel, float x, float y, float z) Parameters Type Name Description Channel channel float x float y float z SetupRedirect(string, string) Redirects a registered fmod event to another event Declaration public static void SetupRedirect(string srcEvent, string dstEvent) Parameters Type Name Description string srcEvent The original event string dstEvent The event that should be played instead"
  },
  "api/SonsSdk.UnityUtils.html": {
    "href": "api/SonsSdk.UnityUtils.html",
    "title": "Class UnityUtils | RedLoader Docs",
    "keywords": "Class UnityUtils Inheritance object UnityUtils Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: SonsSdk Assembly: SonsSdk.dll Syntax public static class UnityUtils Methods AddOrGet<T>(GameObject) Get a component or adds it to the gameobject if it doesn't exist Declaration public static T AddOrGet<T>(this GameObject go) where T : Component Parameters Type Name Description GameObject go Returns Type Description T Type Parameters Name Description T ToSprite(Texture2D) Convert a texture to a sprite. This is a slow operation. Make sure to cache the result. Declaration public static Sprite ToSprite(this Texture2D tex) Parameters Type Name Description Texture2D tex Returns Type Description Sprite"
  },
  "api/SUI.AnchorType.html": {
    "href": "api/SUI.AnchorType.html",
    "title": "Enum AnchorType | RedLoader Docs",
    "keywords": "Enum AnchorType Namespace: SUI Assembly: SonsSdk.dll Syntax public enum AnchorType Fields Name Description BottomCenter BottomLeft BottomRight Fill FillHorizontal FillVertical MiddleCenter MiddleLeft MiddleRight TopCenter TopLeft TopRight"
  },
  "api/SUI.AutoSizeType.html": {
    "href": "api/SUI.AutoSizeType.html",
    "title": "Enum AutoSizeType | RedLoader Docs",
    "keywords": "Enum AutoSizeType Namespace: SUI Assembly: SonsSdk.dll Syntax public enum AutoSizeType Fields Name Description Fit FitHeight FitWidth None"
  },
  "api/SUI.EBackground.html": {
    "href": "api/SUI.EBackground.html",
    "title": "Enum EBackground | RedLoader Docs",
    "keywords": "Enum EBackground Namespace: SUI Assembly: SonsSdk.dll Syntax public enum EBackground Fields Name Description None Round10 Round28 Round8 RoundNormal RoundOutline RoundOutline10 RoundSmall RoundedStandard Sons"
  },
  "api/SUI.EDockType.html": {
    "href": "api/SUI.EDockType.html",
    "title": "Enum EDockType | RedLoader Docs",
    "keywords": "Enum EDockType Namespace: SUI Assembly: SonsSdk.dll Syntax public enum EDockType Fields Name Description Bottom Center Fill Left Right Top"
  },
  "api/SUI.EObservableMode.html": {
    "href": "api/SUI.EObservableMode.html",
    "title": "Enum EObservableMode | RedLoader Docs",
    "keywords": "Enum EObservableMode Namespace: SUI Assembly: RedLoader.dll Syntax public enum EObservableMode Fields Name Description Read ReadWrite Write Extension Methods EnumExtensions.HasFlag(Enum, Enum)"
  },
  "api/SUI.FlexStyle.html": {
    "href": "api/SUI.FlexStyle.html",
    "title": "Enum FlexStyle | RedLoader Docs",
    "keywords": "Enum FlexStyle Namespace: SUI Assembly: SonsSdk.dll Syntax public enum FlexStyle Fields Name Description Flex FlexShrink Grow None"
  },
  "api/SUI.html": {
    "href": "api/SUI.html",
    "title": "Namespace SUI | RedLoader Docs",
    "keywords": "Namespace SUI Classes Observable Observable<T> SBgButtonOptions SButtonOptions SContainerOptions SImageOptions SLabelDividerOptions SLabelOptions SMaskedImageOptions SMenuButtonOptions SOptionsOptions SPanelOptions SScrollContainerOptions SSliderOptions SSpriteOptions STabControllerOptions STextboxOptions SToggleOptions SUI SUiElement SUiElement<T> SUiElement<T, TData> Structs STabControllerOptions.TabDefinition SUI.BackgroundDefinition Enums AnchorType AutoSizeType EBackground EDockType EObservableMode FlexStyle SSliderOptions.VisibilityMask SUI.EFont"
  },
  "api/SUI.Observable-1.html": {
    "href": "api/SUI.Observable-1.html",
    "title": "Class Observable<T> | RedLoader Docs",
    "keywords": "Class Observable<T> Inheritance object Observable Observable<T> Inherited Members Observable.GetModeFromString(string) object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: SUI Assembly: RedLoader.dll Syntax public class Observable<T> : Observable Type Parameters Name Description T Constructors Observable(T) Declaration public Observable(T value) Parameters Type Name Description T value Properties Value Declaration public T Value { get; set; } Property Value Type Description T Methods Set(T) Declaration public void Set(T value) Parameters Type Name Description T value SetNoNotify(T) Declaration public void SetNoNotify(T value) Parameters Type Name Description T value Events OnValueChanged Declaration public event Action<T> OnValueChanged Event Type Type Description Action<T>"
  },
  "api/SUI.Observable.html": {
    "href": "api/SUI.Observable.html",
    "title": "Class Observable | RedLoader Docs",
    "keywords": "Class Observable Inheritance object Observable Observable<T> Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: SUI Assembly: RedLoader.dll Syntax public class Observable Constructors Observable() Declaration public Observable() Methods GetModeFromString(string) Declaration public static EObservableMode GetModeFromString(string mode) Parameters Type Name Description string mode Returns Type Description EObservableMode"
  },
  "api/SUI.SBgButtonOptions.html": {
    "href": "api/SUI.SBgButtonOptions.html",
    "title": "Class SBgButtonOptions | RedLoader Docs",
    "keywords": "Class SBgButtonOptions Inheritance object SUiElement SUiElement<SBgButtonOptions> SBgButtonOptions Inherited Members SUiElement<SBgButtonOptions>.TextObject SUiElement<SBgButtonOptions>.VisibilityObservable SUiElement<SBgButtonOptions>.VisibilityObservalbleChanged(bool) SUiElement<SBgButtonOptions>.BindVisibility(Observable<bool>) SUiElement<SBgButtonOptions>.UnbindVisibility() SUiElement<SBgButtonOptions>.Name(string) SUiElement<SBgButtonOptions>.Id(string) SUiElement<SBgButtonOptions>.Class(string) SUiElement<SBgButtonOptions>.Text(string) SUiElement<SBgButtonOptions>.RichText(string) SUiElement<SBgButtonOptions>.FontSize(int) SUiElement<SBgButtonOptions>.FontAutoSize(bool) SUiElement<SBgButtonOptions>.FontColor(Color) SUiElement<SBgButtonOptions>.FontColor(string) SUiElement<SBgButtonOptions>.Find<TObj>(string) SUiElement<SBgButtonOptions>.MinOffset(int?, int?) SUiElement<SBgButtonOptions>.MaxOffset(int?, int?) SUiElement<SBgButtonOptions>.Size(float?, float?) SUiElement<SBgButtonOptions>.Size(Vector2) SUiElement<SBgButtonOptions>.Position(float?, float?) SUiElement<SBgButtonOptions>.Width(float) SUiElement<SBgButtonOptions>.Height(float) SUiElement<SBgButtonOptions>.PHeight(float) SUiElement<SBgButtonOptions>.PWidth(float) SUiElement<SBgButtonOptions>.MHeight(float) SUiElement<SBgButtonOptions>.MWidth(float) SUiElement<SBgButtonOptions>.FlexHeight(float) SUiElement<SBgButtonOptions>.FlexWidth(float) SUiElement<SBgButtonOptions>.RectPadding(float, float, float, float) SUiElement<SBgButtonOptions>.RectPadding(float, float) SUiElement<SBgButtonOptions>.RectPadding(float) SUiElement<SBgButtonOptions>.HFill() SUiElement<SBgButtonOptions>.VFill() SUiElement<SBgButtonOptions>.VOffset(float, float) SUiElement<SBgButtonOptions>.HOffset(float, float) SUiElement<SBgButtonOptions>.Pivot(float?, float?) SUiElement<SBgButtonOptions>.AspectRatio(AspectRatioFitter.AspectMode) SUiElement<SBgButtonOptions>.Anchor(AnchorType) SUiElement<SBgButtonOptions>.Dock(EDockType) SUiElement<SBgButtonOptions>.Ppu(float) SUiElement<SBgButtonOptions>.Visible(bool) SUiElement<SBgButtonOptions>.Active(bool) SUiElement<SBgButtonOptions>.Toggle() SUiElement<SBgButtonOptions>.OnClick(Action) SUiElement<SBgButtonOptions>.Add(SUiElement) SUiElement<SBgButtonOptions>.this[string] SUiElement.RectTransform SUiElement.Root SUiElement.Parent SUiElement._id SUiElement._classes SUiElement.SetParent(Transform) SUiElement.SetParent(SUiElement) SUiElement.Remove() SUiElement.As<T>() SUiElement.GetClass(string) SUiElement.GetOrAdd<T>() object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: SUI Assembly: SonsSdk.dll Syntax public class SBgButtonOptions : SUiElement<SBgButtonOptions> Constructors SBgButtonOptions(GameObject) Declaration public SBgButtonOptions(GameObject root) Parameters Type Name Description GameObject root Fields ButtonObject Declaration public Button ButtonObject Field Value Type Description Button ImageObject Declaration public Image ImageObject Field Value Type Description Image Methods AutoSize() Declaration public SBgButtonOptions AutoSize() Returns Type Description SBgButtonOptions Background(EBackground) Declaration public SBgButtonOptions Background(EBackground type) Parameters Type Name Description EBackground type Returns Type Description SBgButtonOptions Background(BackgroundDefinition) Declaration public SBgButtonOptions Background(SUI.BackgroundDefinition backgroundDefinition) Parameters Type Name Description SUI.BackgroundDefinition backgroundDefinition Returns Type Description SBgButtonOptions Background(bool) Declaration public SBgButtonOptions Background(bool show) Parameters Type Name Description bool show Returns Type Description SBgButtonOptions Background(string) Declaration public SBgButtonOptions Background(string color) Parameters Type Name Description string color Returns Type Description SBgButtonOptions Background(Sprite, Type) Declaration public SBgButtonOptions Background(Sprite sprite, Image.Type type = 0) Parameters Type Name Description Sprite sprite Type type Returns Type Description SBgButtonOptions Color(string) Declaration public SBgButtonOptions Color(string colorString) Parameters Type Name Description string colorString Returns Type Description SBgButtonOptions Color(Color) Declaration public SBgButtonOptions Color(Color color) Parameters Type Name Description Color color Returns Type Description SBgButtonOptions Notify(Action) Declaration public SBgButtonOptions Notify(Action action) Parameters Type Name Description Action action Returns Type Description SBgButtonOptions"
  },
  "api/SUI.SButtonOptions.html": {
    "href": "api/SUI.SButtonOptions.html",
    "title": "Class SButtonOptions | RedLoader Docs",
    "keywords": "Class SButtonOptions Inheritance object SUiElement SUiElement<SButtonOptions> SButtonOptions Inherited Members SUiElement<SButtonOptions>.TextObject SUiElement<SButtonOptions>.VisibilityObservable SUiElement<SButtonOptions>.VisibilityObservalbleChanged(bool) SUiElement<SButtonOptions>.BindVisibility(Observable<bool>) SUiElement<SButtonOptions>.UnbindVisibility() SUiElement<SButtonOptions>.Name(string) SUiElement<SButtonOptions>.Id(string) SUiElement<SButtonOptions>.Class(string) SUiElement<SButtonOptions>.Text(string) SUiElement<SButtonOptions>.RichText(string) SUiElement<SButtonOptions>.FontSize(int) SUiElement<SButtonOptions>.FontAutoSize(bool) SUiElement<SButtonOptions>.FontColor(Color) SUiElement<SButtonOptions>.FontColor(string) SUiElement<SButtonOptions>.Find<TObj>(string) SUiElement<SButtonOptions>.MinOffset(int?, int?) SUiElement<SButtonOptions>.MaxOffset(int?, int?) SUiElement<SButtonOptions>.Size(float?, float?) SUiElement<SButtonOptions>.Size(Vector2) SUiElement<SButtonOptions>.Position(float?, float?) SUiElement<SButtonOptions>.Width(float) SUiElement<SButtonOptions>.Height(float) SUiElement<SButtonOptions>.PHeight(float) SUiElement<SButtonOptions>.PWidth(float) SUiElement<SButtonOptions>.MHeight(float) SUiElement<SButtonOptions>.MWidth(float) SUiElement<SButtonOptions>.FlexHeight(float) SUiElement<SButtonOptions>.FlexWidth(float) SUiElement<SButtonOptions>.RectPadding(float, float, float, float) SUiElement<SButtonOptions>.RectPadding(float, float) SUiElement<SButtonOptions>.RectPadding(float) SUiElement<SButtonOptions>.HFill() SUiElement<SButtonOptions>.VFill() SUiElement<SButtonOptions>.VOffset(float, float) SUiElement<SButtonOptions>.HOffset(float, float) SUiElement<SButtonOptions>.Pivot(float?, float?) SUiElement<SButtonOptions>.AspectRatio(AspectRatioFitter.AspectMode) SUiElement<SButtonOptions>.Anchor(AnchorType) SUiElement<SButtonOptions>.Dock(EDockType) SUiElement<SButtonOptions>.Ppu(float) SUiElement<SButtonOptions>.Visible(bool) SUiElement<SButtonOptions>.Active(bool) SUiElement<SButtonOptions>.Toggle() SUiElement<SButtonOptions>.OnClick(Action) SUiElement<SButtonOptions>.Add(SUiElement) SUiElement<SButtonOptions>.this[string] SUiElement.RectTransform SUiElement.Root SUiElement.Parent SUiElement._id SUiElement._classes SUiElement.SetParent(Transform) SUiElement.SetParent(SUiElement) SUiElement.Remove() SUiElement.As<T>() SUiElement.GetClass(string) SUiElement.GetOrAdd<T>() object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: SUI Assembly: SonsSdk.dll Syntax public class SButtonOptions : SUiElement<SButtonOptions> Constructors SButtonOptions(GameObject) Declaration public SButtonOptions(GameObject root) Parameters Type Name Description GameObject root Fields ButtonObject Declaration public Button ButtonObject Field Value Type Description Button Methods Notify(Action) Declaration public SButtonOptions Notify(Action action) Parameters Type Name Description Action action Returns Type Description SButtonOptions"
  },
  "api/SUI.SContainerOptions.html": {
    "href": "api/SUI.SContainerOptions.html",
    "title": "Class SContainerOptions | RedLoader Docs",
    "keywords": "Class SContainerOptions Inheritance object SUiElement SUiElement<SContainerOptions> SContainerOptions SPanelOptions SScrollContainerOptions STabControllerOptions Inherited Members SUiElement<SContainerOptions>.TextObject SUiElement<SContainerOptions>.VisibilityObservable SUiElement<SContainerOptions>.BindVisibility(Observable<bool>) SUiElement<SContainerOptions>.UnbindVisibility() SUiElement<SContainerOptions>.Name(string) SUiElement<SContainerOptions>.Id(string) SUiElement<SContainerOptions>.Class(string) SUiElement<SContainerOptions>.Text(string) SUiElement<SContainerOptions>.RichText(string) SUiElement<SContainerOptions>.FontSize(int) SUiElement<SContainerOptions>.FontAutoSize(bool) SUiElement<SContainerOptions>.FontColor(Color) SUiElement<SContainerOptions>.FontColor(string) SUiElement<SContainerOptions>.Find<TObj>(string) SUiElement<SContainerOptions>.MinOffset(int?, int?) SUiElement<SContainerOptions>.MaxOffset(int?, int?) SUiElement<SContainerOptions>.Size(float?, float?) SUiElement<SContainerOptions>.Size(Vector2) SUiElement<SContainerOptions>.Position(float?, float?) SUiElement<SContainerOptions>.Width(float) SUiElement<SContainerOptions>.Height(float) SUiElement<SContainerOptions>.PHeight(float) SUiElement<SContainerOptions>.PWidth(float) SUiElement<SContainerOptions>.MHeight(float) SUiElement<SContainerOptions>.MWidth(float) SUiElement<SContainerOptions>.FlexHeight(float) SUiElement<SContainerOptions>.FlexWidth(float) SUiElement<SContainerOptions>.RectPadding(float, float, float, float) SUiElement<SContainerOptions>.RectPadding(float, float) SUiElement<SContainerOptions>.RectPadding(float) SUiElement<SContainerOptions>.HFill() SUiElement<SContainerOptions>.VFill() SUiElement<SContainerOptions>.VOffset(float, float) SUiElement<SContainerOptions>.HOffset(float, float) SUiElement<SContainerOptions>.Pivot(float?, float?) SUiElement<SContainerOptions>.AspectRatio(AspectRatioFitter.AspectMode) SUiElement<SContainerOptions>.Anchor(AnchorType) SUiElement<SContainerOptions>.Dock(EDockType) SUiElement<SContainerOptions>.Ppu(float) SUiElement<SContainerOptions>.Visible(bool) SUiElement<SContainerOptions>.Active(bool) SUiElement<SContainerOptions>.Toggle() SUiElement<SContainerOptions>.OnClick(Action) SUiElement<SContainerOptions>.Add(SUiElement) SUiElement<SContainerOptions>.this[string] SUiElement.RectTransform SUiElement.Root SUiElement.Parent SUiElement._id SUiElement._classes SUiElement.SetParent(Transform) SUiElement.SetParent(SUiElement) SUiElement.Remove() SUiElement.As<T>() SUiElement.GetClass(string) SUiElement.GetOrAdd<T>() object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: SUI Assembly: SonsSdk.dll Syntax public class SContainerOptions : SUiElement<SContainerOptions> Constructors SContainerOptions(GameObject) Declaration public SContainerOptions(GameObject root) Parameters Type Name Description GameObject root Properties this[SUiElement] Declaration public SContainerOptions this[SUiElement element] { get; } Parameters Type Name Description SUiElement element Property Value Type Description SContainerOptions Methods AutoSize(string) M = MinSize, P = PreferredSize. First letter is width, second is height Declaration public SContainerOptions AutoSize(string mode = \"XX\") Parameters Type Name Description string mode Returns Type Description SContainerOptions Exceptions Type Condition Exception AutoSize(FitMode, FitMode) Configures automatic sizing for the container using ContentSizeFitter. Declaration public SContainerOptions AutoSize(ContentSizeFitter.FitMode horizontal, ContentSizeFitter.FitMode vertical) Parameters Type Name Description FitMode horizontal The horizontal fitting mode for content. FitMode vertical The vertical fitting mode for content. Returns Type Description SContainerOptions Background(BackgroundDefinition) Declaration public SContainerOptions Background(SUI.BackgroundDefinition backgroundDefinition) Parameters Type Name Description SUI.BackgroundDefinition backgroundDefinition Returns Type Description SContainerOptions Background(bool) Declaration public SContainerOptions Background(bool show) Parameters Type Name Description bool show Returns Type Description SContainerOptions Background(string, bool) Declaration public SContainerOptions Background(string color, bool clean = false) Parameters Type Name Description string color bool clean Returns Type Description SContainerOptions Background(Color, EBackground, Type?) Sets the background appearance of the container using a solid color and an optional background sprite. Declaration public SContainerOptions Background(Color color, EBackground type = EBackground.Sons, Image.Type? spriteType = null) Parameters Type Name Description Color color The desired background color. EBackground type Image.Type? spriteType Returns Type Description SContainerOptions Background(Sprite, Color?, Type) Sets the background appearance of the container using a solid color and an optional background sprite. Declaration public SContainerOptions Background(Sprite sprite, Color? color, Image.Type type = 0) Parameters Type Name Description Sprite sprite Color? color The desired background color. Type type Returns Type Description SContainerOptions BindVisibility(Observable<bool>, bool) Binds the visibility of the container to an observable boolean value. Declaration public SContainerOptions BindVisibility(Observable<bool> observable, bool toggleGameObject) Parameters Type Name Description Observable<bool> observable The observable boolean value to bind to. bool toggleGameObject Whether to toggle the GameObject's active state based on the observable value or the canvasgroup alpha. Returns Type Description SContainerOptions CanvasGroup(float, bool) Declaration public SContainerOptions CanvasGroup(float alpha = 1, bool interactable = true) Parameters Type Name Description float alpha bool interactable Returns Type Description SContainerOptions CellSize(float, float) Sets the cell size of the GridLayoutGroup attached to the root object. Declaration public SContainerOptions CellSize(float width, float height) Parameters Type Name Description float width Width of the cell. float height Height of the cell. Returns Type Description SContainerOptions ChildControl(bool?, bool?) Configures whether child elements in the container's horizontal or vertical layout should control their width and/or height. Declaration public SContainerOptions ChildControl(bool? width = null, bool? height = null) Parameters Type Name Description bool? width Optional. Set to true to enable child width control, false to disable. Set to null to keep the current setting. bool? height Optional. Set to true to enable child height control, false to disable. Set to null to keep the current setting. Returns Type Description SContainerOptions ChildExpand(bool?, bool?) Configures whether child elements in the container's horizontal or vertical layout should expand to fill available space. Declaration public SContainerOptions ChildExpand(bool? width = null, bool? height = null) Parameters Type Name Description bool? width Optional. Set to true to enable child width expansion, false to disable. Set to null to keep the current setting. bool? height Optional. Set to true to enable child height expansion, false to disable. Set to null to keep the current setting. Returns Type Description SContainerOptions Grid(int, float) Creates a grid layout with the given constraint count and spacing. Declaration public SContainerOptions Grid(int constraintCount, float spacing = 0) Parameters Type Name Description int constraintCount Number of the fixed rows or columns float spacing Returns Type Description SContainerOptions Horizontal(float, string) Configures the container's layout as horizontal with optional spacing and layout mode. Declaration public SContainerOptions Horizontal(float spacing = 0, string mode = null) Parameters Type Name Description float spacing Optional. The amount of spacing between elements. string mode Optional. The layout mode to apply (e.g., flexible, fixed, etc.). Returns Type Description SContainerOptions LayoutChildAlignment(TextAnchor) Sets the alignment of child elements within the container's horizontal or vertical layout. Declaration public SContainerOptions LayoutChildAlignment(TextAnchor alignment) Parameters Type Name Description TextAnchor alignment The alignment for child elements. Returns Type Description SContainerOptions LayoutMode(string) E = Expand, C = Control. First letter is width, second is height Declaration public SContainerOptions LayoutMode(string mode = \"ee\") Parameters Type Name Description string mode Returns Type Description SContainerOptions LayoutUseChildScale(bool?, bool?) Configures whether child elements in the container's horizontal or vertical layout should use child scale settings. Declaration public SContainerOptions LayoutUseChildScale(bool? width = null, bool? height = null) Parameters Type Name Description bool? width Optional. Set to true to enable child width scaling, false to disable. Set to null to keep the current setting. bool? height Optional. Set to true to enable child height scaling, false to disable. Set to null to keep the current setting. Returns Type Description SContainerOptions Opacity(float) Declaration public SContainerOptions Opacity(float alpha) Parameters Type Name Description float alpha Returns Type Description SContainerOptions OverrideSorting(int) Gets or adds a canvas and overrides the sorting order of the parent canvas. Declaration public SContainerOptions OverrideSorting(int sortingOrder) Parameters Type Name Description int sortingOrder Returns Type Description SContainerOptions Padding(float) Sets equal padding for all sides of the container's layout. Declaration public SContainerOptions Padding(float padding) Parameters Type Name Description float padding The amount of padding to apply on all sides. Returns Type Description SContainerOptions Padding(float, float, float, float) Sets padding for the container's layout on all sides individually. Declaration public SContainerOptions Padding(float left, float right, float top, float bottom) Parameters Type Name Description float left The amount of padding for the left side. float right The amount of padding for the right side. float top The amount of padding for the top side. float bottom The amount of padding for the bottom side. Returns Type Description SContainerOptions PaddingHorizontal(float) Sets horizontal padding for the container's layout. Declaration public SContainerOptions PaddingHorizontal(float padding) Parameters Type Name Description float padding The amount of horizontal padding to apply. Returns Type Description SContainerOptions PaddingVertical(float) Sets vertical padding for the container's layout. Declaration public SContainerOptions PaddingVertical(float padding) Parameters Type Name Description float padding The amount of vertical padding to apply. Returns Type Description SContainerOptions Spacing(float) Sets the spacing between elements in the container's horizontal or vertical layout. Declaration public virtual SContainerOptions Spacing(float spacing) Parameters Type Name Description float spacing The amount of spacing between elements. Returns Type Description SContainerOptions Spacing(float, float) Sets the spacing between rows and columns in the container's grid layout. Declaration public virtual SContainerOptions Spacing(float spacingRow, float spacingCol) Parameters Type Name Description float spacingRow The amount of spacing between rows. float spacingCol The amount of spacing between columns. Returns Type Description SContainerOptions Vertical(float, string) Configures the container's layout as vertical with optional spacing and layout mode. Declaration public SContainerOptions Vertical(float spacing = 0, string mode = null) Parameters Type Name Description float spacing Optional. The amount of spacing between elements. string mode Optional. The layout mode to apply (e.g., flexible, fixed, etc.). Returns Type Description SContainerOptions VisibilityObservalbleChanged(bool) Declaration protected override void VisibilityObservalbleChanged(bool value) Parameters Type Name Description bool value Overrides SUiElement<SContainerOptions>.VisibilityObservalbleChanged(bool) Operators operator -(SContainerOptions, SUiElement) Declaration public static SContainerOptions operator -(SContainerOptions container, SUiElement element) Parameters Type Name Description SContainerOptions container SUiElement element Returns Type Description SContainerOptions"
  },
  "api/SUI.SImageOptions.html": {
    "href": "api/SUI.SImageOptions.html",
    "title": "Class SImageOptions | RedLoader Docs",
    "keywords": "Class SImageOptions Inheritance object SUiElement SUiElement<SImageOptions> SUiElement<SImageOptions, Texture> SImageOptions Inherited Members SUiElement<SImageOptions, Texture>.Observable SUiElement<SImageOptions, Texture>.Bind(Observable<Texture>) SUiElement<SImageOptions, Texture>.Unbind() SUiElement<SImageOptions, Texture>.RegisterObservable(Observable<Texture>) SUiElement<SImageOptions, Texture>.UnregisterObservable(Observable<Texture>) SUiElement<SImageOptions, Texture>.OnObservaleChanged(Texture) SUiElement<SImageOptions>.TextObject SUiElement<SImageOptions>.VisibilityObservable SUiElement<SImageOptions>.VisibilityObservalbleChanged(bool) SUiElement<SImageOptions>.BindVisibility(Observable<bool>) SUiElement<SImageOptions>.UnbindVisibility() SUiElement<SImageOptions>.Name(string) SUiElement<SImageOptions>.Id(string) SUiElement<SImageOptions>.Class(string) SUiElement<SImageOptions>.Text(string) SUiElement<SImageOptions>.RichText(string) SUiElement<SImageOptions>.FontSize(int) SUiElement<SImageOptions>.FontAutoSize(bool) SUiElement<SImageOptions>.FontColor(Color) SUiElement<SImageOptions>.FontColor(string) SUiElement<SImageOptions>.Find<TObj>(string) SUiElement<SImageOptions>.MinOffset(int?, int?) SUiElement<SImageOptions>.MaxOffset(int?, int?) SUiElement<SImageOptions>.Size(float?, float?) SUiElement<SImageOptions>.Size(Vector2) SUiElement<SImageOptions>.Position(float?, float?) SUiElement<SImageOptions>.Width(float) SUiElement<SImageOptions>.Height(float) SUiElement<SImageOptions>.PHeight(float) SUiElement<SImageOptions>.PWidth(float) SUiElement<SImageOptions>.MHeight(float) SUiElement<SImageOptions>.MWidth(float) SUiElement<SImageOptions>.FlexHeight(float) SUiElement<SImageOptions>.FlexWidth(float) SUiElement<SImageOptions>.RectPadding(float, float, float, float) SUiElement<SImageOptions>.RectPadding(float, float) SUiElement<SImageOptions>.RectPadding(float) SUiElement<SImageOptions>.HFill() SUiElement<SImageOptions>.VFill() SUiElement<SImageOptions>.VOffset(float, float) SUiElement<SImageOptions>.HOffset(float, float) SUiElement<SImageOptions>.Pivot(float?, float?) SUiElement<SImageOptions>.AspectRatio(AspectRatioFitter.AspectMode) SUiElement<SImageOptions>.Anchor(AnchorType) SUiElement<SImageOptions>.Dock(EDockType) SUiElement<SImageOptions>.Ppu(float) SUiElement<SImageOptions>.Visible(bool) SUiElement<SImageOptions>.Active(bool) SUiElement<SImageOptions>.Toggle() SUiElement<SImageOptions>.OnClick(Action) SUiElement<SImageOptions>.Add(SUiElement) SUiElement<SImageOptions>.this[string] SUiElement.RectTransform SUiElement.Root SUiElement.Parent SUiElement._id SUiElement._classes SUiElement.SetParent(Transform) SUiElement.SetParent(SUiElement) SUiElement.Remove() SUiElement.As<T>() SUiElement.GetClass(string) SUiElement.GetOrAdd<T>() object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: SUI Assembly: SonsSdk.dll Syntax public class SImageOptions : SUiElement<SImageOptions, Texture> Constructors SImageOptions(GameObject) Declaration public SImageOptions(GameObject root) Parameters Type Name Description GameObject root Fields ImageObject Declaration public RawImage ImageObject Field Value Type Description RawImage Methods OnObservaleChanged(Texture) Declaration protected override void OnObservaleChanged(Texture value) Parameters Type Name Description Texture value Overrides SUiElement<SImageOptions, Texture>.OnObservaleChanged(Texture) Texture(Texture) Declaration public SImageOptions Texture(Texture texture) Parameters Type Name Description Texture texture Returns Type Description SImageOptions"
  },
  "api/SUI.SLabelDividerOptions.html": {
    "href": "api/SUI.SLabelDividerOptions.html",
    "title": "Class SLabelDividerOptions | RedLoader Docs",
    "keywords": "Class SLabelDividerOptions Inheritance object SUiElement SUiElement<SLabelDividerOptions> SLabelDividerOptions Inherited Members SUiElement<SLabelDividerOptions>.TextObject SUiElement<SLabelDividerOptions>.VisibilityObservable SUiElement<SLabelDividerOptions>.VisibilityObservalbleChanged(bool) SUiElement<SLabelDividerOptions>.BindVisibility(Observable<bool>) SUiElement<SLabelDividerOptions>.UnbindVisibility() SUiElement<SLabelDividerOptions>.Name(string) SUiElement<SLabelDividerOptions>.Id(string) SUiElement<SLabelDividerOptions>.Class(string) SUiElement<SLabelDividerOptions>.Text(string) SUiElement<SLabelDividerOptions>.RichText(string) SUiElement<SLabelDividerOptions>.FontSize(int) SUiElement<SLabelDividerOptions>.FontAutoSize(bool) SUiElement<SLabelDividerOptions>.FontColor(Color) SUiElement<SLabelDividerOptions>.FontColor(string) SUiElement<SLabelDividerOptions>.Find<TObj>(string) SUiElement<SLabelDividerOptions>.MinOffset(int?, int?) SUiElement<SLabelDividerOptions>.MaxOffset(int?, int?) SUiElement<SLabelDividerOptions>.Size(float?, float?) SUiElement<SLabelDividerOptions>.Size(Vector2) SUiElement<SLabelDividerOptions>.Position(float?, float?) SUiElement<SLabelDividerOptions>.Width(float) SUiElement<SLabelDividerOptions>.Height(float) SUiElement<SLabelDividerOptions>.PHeight(float) SUiElement<SLabelDividerOptions>.PWidth(float) SUiElement<SLabelDividerOptions>.MHeight(float) SUiElement<SLabelDividerOptions>.MWidth(float) SUiElement<SLabelDividerOptions>.FlexHeight(float) SUiElement<SLabelDividerOptions>.FlexWidth(float) SUiElement<SLabelDividerOptions>.RectPadding(float, float, float, float) SUiElement<SLabelDividerOptions>.RectPadding(float, float) SUiElement<SLabelDividerOptions>.RectPadding(float) SUiElement<SLabelDividerOptions>.HFill() SUiElement<SLabelDividerOptions>.VFill() SUiElement<SLabelDividerOptions>.VOffset(float, float) SUiElement<SLabelDividerOptions>.HOffset(float, float) SUiElement<SLabelDividerOptions>.Pivot(float?, float?) SUiElement<SLabelDividerOptions>.AspectRatio(AspectRatioFitter.AspectMode) SUiElement<SLabelDividerOptions>.Anchor(AnchorType) SUiElement<SLabelDividerOptions>.Dock(EDockType) SUiElement<SLabelDividerOptions>.Ppu(float) SUiElement<SLabelDividerOptions>.Visible(bool) SUiElement<SLabelDividerOptions>.Active(bool) SUiElement<SLabelDividerOptions>.Toggle() SUiElement<SLabelDividerOptions>.OnClick(Action) SUiElement<SLabelDividerOptions>.Add(SUiElement) SUiElement<SLabelDividerOptions>.this[string] SUiElement.RectTransform SUiElement.Root SUiElement.Parent SUiElement._id SUiElement._classes SUiElement.SetParent(Transform) SUiElement.SetParent(SUiElement) SUiElement.Remove() SUiElement.As<T>() SUiElement.GetClass(string) SUiElement.GetOrAdd<T>() object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: SUI Assembly: SonsSdk.dll Syntax public class SLabelDividerOptions : SUiElement<SLabelDividerOptions> Constructors SLabelDividerOptions(GameObject) Declaration public SLabelDividerOptions(GameObject root) Parameters Type Name Description GameObject root Fields ImageObject Declaration public RawImage ImageObject Field Value Type Description RawImage Methods Spacing(float) Declaration public SLabelDividerOptions Spacing(float spacing) Parameters Type Name Description float spacing Returns Type Description SLabelDividerOptions Texture(Texture2D) Declaration public SLabelDividerOptions Texture(Texture2D tex) Parameters Type Name Description Texture2D tex Returns Type Description SLabelDividerOptions"
  },
  "api/SUI.SLabelOptions.html": {
    "href": "api/SUI.SLabelOptions.html",
    "title": "Class SLabelOptions | RedLoader Docs",
    "keywords": "Class SLabelOptions Inheritance object SUiElement SUiElement<SLabelOptions> SUiElement<SLabelOptions, string> SLabelOptions Inherited Members SUiElement<SLabelOptions, string>.Observable SUiElement<SLabelOptions, string>.Bind(Observable<string>) SUiElement<SLabelOptions, string>.Unbind() SUiElement<SLabelOptions, string>.RegisterObservable(Observable<string>) SUiElement<SLabelOptions, string>.UnregisterObservable(Observable<string>) SUiElement<SLabelOptions, string>.OnObservaleChanged(string) SUiElement<SLabelOptions>.TextObject SUiElement<SLabelOptions>.VisibilityObservable SUiElement<SLabelOptions>.VisibilityObservalbleChanged(bool) SUiElement<SLabelOptions>.BindVisibility(Observable<bool>) SUiElement<SLabelOptions>.UnbindVisibility() SUiElement<SLabelOptions>.Name(string) SUiElement<SLabelOptions>.Id(string) SUiElement<SLabelOptions>.Class(string) SUiElement<SLabelOptions>.Text(string) SUiElement<SLabelOptions>.RichText(string) SUiElement<SLabelOptions>.FontSize(int) SUiElement<SLabelOptions>.FontAutoSize(bool) SUiElement<SLabelOptions>.FontColor(Color) SUiElement<SLabelOptions>.FontColor(string) SUiElement<SLabelOptions>.Find<TObj>(string) SUiElement<SLabelOptions>.MinOffset(int?, int?) SUiElement<SLabelOptions>.MaxOffset(int?, int?) SUiElement<SLabelOptions>.Size(float?, float?) SUiElement<SLabelOptions>.Size(Vector2) SUiElement<SLabelOptions>.Position(float?, float?) SUiElement<SLabelOptions>.Width(float) SUiElement<SLabelOptions>.Height(float) SUiElement<SLabelOptions>.PHeight(float) SUiElement<SLabelOptions>.PWidth(float) SUiElement<SLabelOptions>.MHeight(float) SUiElement<SLabelOptions>.MWidth(float) SUiElement<SLabelOptions>.FlexHeight(float) SUiElement<SLabelOptions>.FlexWidth(float) SUiElement<SLabelOptions>.RectPadding(float, float, float, float) SUiElement<SLabelOptions>.RectPadding(float, float) SUiElement<SLabelOptions>.RectPadding(float) SUiElement<SLabelOptions>.HFill() SUiElement<SLabelOptions>.VFill() SUiElement<SLabelOptions>.VOffset(float, float) SUiElement<SLabelOptions>.HOffset(float, float) SUiElement<SLabelOptions>.Pivot(float?, float?) SUiElement<SLabelOptions>.AspectRatio(AspectRatioFitter.AspectMode) SUiElement<SLabelOptions>.Anchor(AnchorType) SUiElement<SLabelOptions>.Dock(EDockType) SUiElement<SLabelOptions>.Ppu(float) SUiElement<SLabelOptions>.Visible(bool) SUiElement<SLabelOptions>.Active(bool) SUiElement<SLabelOptions>.Toggle() SUiElement<SLabelOptions>.OnClick(Action) SUiElement<SLabelOptions>.Add(SUiElement) SUiElement<SLabelOptions>.this[string] SUiElement.RectTransform SUiElement.Root SUiElement.Parent SUiElement._id SUiElement._classes SUiElement.SetParent(Transform) SUiElement.SetParent(SUiElement) SUiElement.Remove() SUiElement.As<T>() SUiElement.GetClass(string) SUiElement.GetOrAdd<T>() object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: SUI Assembly: SonsSdk.dll Syntax public class SLabelOptions : SUiElement<SLabelOptions, string> Constructors SLabelOptions(GameObject) Declaration public SLabelOptions(GameObject root) Parameters Type Name Description GameObject root Methods Alignment(TextAlignmentOptions) Declaration public SLabelOptions Alignment(TextAlignmentOptions alignment) Parameters Type Name Description TextAlignmentOptions alignment Returns Type Description SLabelOptions AutoSizeContainer(bool) Declaration public SLabelOptions AutoSizeContainer(bool enable = true) Parameters Type Name Description bool enable Returns Type Description SLabelOptions Font(EFont) Declaration public SLabelOptions Font(SUI.EFont font) Parameters Type Name Description SUI.EFont font Returns Type Description SLabelOptions Font(TMP_FontAsset) Declaration public SLabelOptions Font(TMP_FontAsset font) Parameters Type Name Description TMP_FontAsset font Returns Type Description SLabelOptions FontSpacing(float) Declaration public SLabelOptions FontSpacing(float spacing) Parameters Type Name Description float spacing Returns Type Description SLabelOptions LineSpacing(float) Declaration public SLabelOptions LineSpacing(float spacing) Parameters Type Name Description float spacing Returns Type Description SLabelOptions Margin(int) Declaration public SLabelOptions Margin(int margin) Parameters Type Name Description int margin Returns Type Description SLabelOptions Margin(int, int) Declaration public SLabelOptions Margin(int leftRight, int topBottom) Parameters Type Name Description int leftRight int topBottom Returns Type Description SLabelOptions Margin(int, int, int, int) Declaration public SLabelOptions Margin(int left, int right, int top, int bottom) Parameters Type Name Description int left int right int top int bottom Returns Type Description SLabelOptions OnObservaleChanged(string) Declaration protected override void OnObservaleChanged(string value) Parameters Type Name Description string value Overrides SUiElement<SLabelOptions, string>.OnObservaleChanged(string) RegisterObservable(Observable<string>) Declaration protected override void RegisterObservable(Observable<string> observable) Parameters Type Name Description Observable<string> observable Overrides SUiElement<SLabelOptions, string>.RegisterObservable(Observable<string>) Wrap(bool) Declaration public SLabelOptions Wrap(bool wrap) Parameters Type Name Description bool wrap Returns Type Description SLabelOptions"
  },
  "api/SUI.SMaskedImageOptions.html": {
    "href": "api/SUI.SMaskedImageOptions.html",
    "title": "Class SMaskedImageOptions | RedLoader Docs",
    "keywords": "Class SMaskedImageOptions Inheritance object SUiElement SUiElement<SMaskedImageOptions> SMaskedImageOptions Inherited Members SUiElement<SMaskedImageOptions>.TextObject SUiElement<SMaskedImageOptions>.VisibilityObservable SUiElement<SMaskedImageOptions>.VisibilityObservalbleChanged(bool) SUiElement<SMaskedImageOptions>.BindVisibility(Observable<bool>) SUiElement<SMaskedImageOptions>.UnbindVisibility() SUiElement<SMaskedImageOptions>.Name(string) SUiElement<SMaskedImageOptions>.Id(string) SUiElement<SMaskedImageOptions>.Class(string) SUiElement<SMaskedImageOptions>.Text(string) SUiElement<SMaskedImageOptions>.RichText(string) SUiElement<SMaskedImageOptions>.FontSize(int) SUiElement<SMaskedImageOptions>.FontAutoSize(bool) SUiElement<SMaskedImageOptions>.FontColor(Color) SUiElement<SMaskedImageOptions>.FontColor(string) SUiElement<SMaskedImageOptions>.Find<TObj>(string) SUiElement<SMaskedImageOptions>.MinOffset(int?, int?) SUiElement<SMaskedImageOptions>.MaxOffset(int?, int?) SUiElement<SMaskedImageOptions>.Size(float?, float?) SUiElement<SMaskedImageOptions>.Size(Vector2) SUiElement<SMaskedImageOptions>.Position(float?, float?) SUiElement<SMaskedImageOptions>.Width(float) SUiElement<SMaskedImageOptions>.Height(float) SUiElement<SMaskedImageOptions>.PHeight(float) SUiElement<SMaskedImageOptions>.PWidth(float) SUiElement<SMaskedImageOptions>.MHeight(float) SUiElement<SMaskedImageOptions>.MWidth(float) SUiElement<SMaskedImageOptions>.FlexHeight(float) SUiElement<SMaskedImageOptions>.FlexWidth(float) SUiElement<SMaskedImageOptions>.RectPadding(float, float, float, float) SUiElement<SMaskedImageOptions>.RectPadding(float, float) SUiElement<SMaskedImageOptions>.RectPadding(float) SUiElement<SMaskedImageOptions>.HFill() SUiElement<SMaskedImageOptions>.VFill() SUiElement<SMaskedImageOptions>.VOffset(float, float) SUiElement<SMaskedImageOptions>.HOffset(float, float) SUiElement<SMaskedImageOptions>.Pivot(float?, float?) SUiElement<SMaskedImageOptions>.AspectRatio(AspectRatioFitter.AspectMode) SUiElement<SMaskedImageOptions>.Anchor(AnchorType) SUiElement<SMaskedImageOptions>.Dock(EDockType) SUiElement<SMaskedImageOptions>.Ppu(float) SUiElement<SMaskedImageOptions>.Visible(bool) SUiElement<SMaskedImageOptions>.Active(bool) SUiElement<SMaskedImageOptions>.Toggle() SUiElement<SMaskedImageOptions>.OnClick(Action) SUiElement<SMaskedImageOptions>.Add(SUiElement) SUiElement<SMaskedImageOptions>.this[string] SUiElement.RectTransform SUiElement.Root SUiElement.Parent SUiElement._id SUiElement._classes SUiElement.SetParent(Transform) SUiElement.SetParent(SUiElement) SUiElement.Remove() SUiElement.As<T>() SUiElement.GetClass(string) SUiElement.GetOrAdd<T>() object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: SUI Assembly: SonsSdk.dll Syntax public class SMaskedImageOptions : SUiElement<SMaskedImageOptions> Constructors SMaskedImageOptions(GameObject) Declaration public SMaskedImageOptions(GameObject root) Parameters Type Name Description GameObject root Fields ImageObject Declaration public RawImage ImageObject Field Value Type Description RawImage Methods Texture(Texture2D) Declaration public SMaskedImageOptions Texture(Texture2D texture) Parameters Type Name Description Texture2D texture Returns Type Description SMaskedImageOptions"
  },
  "api/SUI.SMenuButtonOptions.html": {
    "href": "api/SUI.SMenuButtonOptions.html",
    "title": "Class SMenuButtonOptions | RedLoader Docs",
    "keywords": "Class SMenuButtonOptions Inheritance object SUiElement SUiElement<SMenuButtonOptions> SMenuButtonOptions Inherited Members SUiElement<SMenuButtonOptions>.TextObject SUiElement<SMenuButtonOptions>.VisibilityObservable SUiElement<SMenuButtonOptions>.VisibilityObservalbleChanged(bool) SUiElement<SMenuButtonOptions>.BindVisibility(Observable<bool>) SUiElement<SMenuButtonOptions>.UnbindVisibility() SUiElement<SMenuButtonOptions>.Name(string) SUiElement<SMenuButtonOptions>.Id(string) SUiElement<SMenuButtonOptions>.Class(string) SUiElement<SMenuButtonOptions>.RichText(string) SUiElement<SMenuButtonOptions>.FontAutoSize(bool) SUiElement<SMenuButtonOptions>.FontColor(Color) SUiElement<SMenuButtonOptions>.FontColor(string) SUiElement<SMenuButtonOptions>.Find<TObj>(string) SUiElement<SMenuButtonOptions>.MinOffset(int?, int?) SUiElement<SMenuButtonOptions>.MaxOffset(int?, int?) SUiElement<SMenuButtonOptions>.Size(float?, float?) SUiElement<SMenuButtonOptions>.Size(Vector2) SUiElement<SMenuButtonOptions>.Position(float?, float?) SUiElement<SMenuButtonOptions>.Width(float) SUiElement<SMenuButtonOptions>.Height(float) SUiElement<SMenuButtonOptions>.PHeight(float) SUiElement<SMenuButtonOptions>.PWidth(float) SUiElement<SMenuButtonOptions>.MHeight(float) SUiElement<SMenuButtonOptions>.MWidth(float) SUiElement<SMenuButtonOptions>.FlexHeight(float) SUiElement<SMenuButtonOptions>.FlexWidth(float) SUiElement<SMenuButtonOptions>.RectPadding(float, float, float, float) SUiElement<SMenuButtonOptions>.RectPadding(float, float) SUiElement<SMenuButtonOptions>.RectPadding(float) SUiElement<SMenuButtonOptions>.HFill() SUiElement<SMenuButtonOptions>.VFill() SUiElement<SMenuButtonOptions>.VOffset(float, float) SUiElement<SMenuButtonOptions>.HOffset(float, float) SUiElement<SMenuButtonOptions>.Pivot(float?, float?) SUiElement<SMenuButtonOptions>.AspectRatio(AspectRatioFitter.AspectMode) SUiElement<SMenuButtonOptions>.Anchor(AnchorType) SUiElement<SMenuButtonOptions>.Dock(EDockType) SUiElement<SMenuButtonOptions>.Ppu(float) SUiElement<SMenuButtonOptions>.Visible(bool) SUiElement<SMenuButtonOptions>.Active(bool) SUiElement<SMenuButtonOptions>.Toggle() SUiElement<SMenuButtonOptions>.OnClick(Action) SUiElement<SMenuButtonOptions>.Add(SUiElement) SUiElement<SMenuButtonOptions>.this[string] SUiElement.RectTransform SUiElement.Root SUiElement.Parent SUiElement._id SUiElement._classes SUiElement.SetParent(Transform) SUiElement.SetParent(SUiElement) SUiElement.Remove() SUiElement.As<T>() SUiElement.GetClass(string) SUiElement.GetOrAdd<T>() object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: SUI Assembly: SonsSdk.dll Syntax public class SMenuButtonOptions : SUiElement<SMenuButtonOptions> Constructors SMenuButtonOptions(GameObject) Declaration public SMenuButtonOptions(GameObject root) Parameters Type Name Description GameObject root Fields ButtonObject Declaration public Button ButtonObject Field Value Type Description Button Methods FontSize(int) Set the font size of the main text object Declaration public override SMenuButtonOptions FontSize(int size) Parameters Type Name Description int size Returns Type Description SMenuButtonOptions Overrides SUiElement<SMenuButtonOptions>.FontSize(int) Notify(Action) Declaration public SMenuButtonOptions Notify(Action action) Parameters Type Name Description Action action Returns Type Description SMenuButtonOptions Text(string) Set the text of the main text object Declaration public override SMenuButtonOptions Text(string text) Parameters Type Name Description string text Returns Type Description SMenuButtonOptions Overrides SUiElement<SMenuButtonOptions>.Text(string)"
  },
  "api/SUI.SOptionsOptions.html": {
    "href": "api/SUI.SOptionsOptions.html",
    "title": "Class SOptionsOptions | RedLoader Docs",
    "keywords": "Class SOptionsOptions Inheritance object SUiElement SUiElement<SOptionsOptions> SUiElement<SOptionsOptions, string> SOptionsOptions Inherited Members SUiElement<SOptionsOptions, string>.Observable SUiElement<SOptionsOptions, string>.Bind(Observable<string>) SUiElement<SOptionsOptions, string>.Unbind() SUiElement<SOptionsOptions, string>.RegisterObservable(Observable<string>) SUiElement<SOptionsOptions, string>.UnregisterObservable(Observable<string>) SUiElement<SOptionsOptions, string>.OnObservaleChanged(string) SUiElement<SOptionsOptions>.TextObject SUiElement<SOptionsOptions>.VisibilityObservable SUiElement<SOptionsOptions>.VisibilityObservalbleChanged(bool) SUiElement<SOptionsOptions>.BindVisibility(Observable<bool>) SUiElement<SOptionsOptions>.UnbindVisibility() SUiElement<SOptionsOptions>.Name(string) SUiElement<SOptionsOptions>.Id(string) SUiElement<SOptionsOptions>.Class(string) SUiElement<SOptionsOptions>.Text(string) SUiElement<SOptionsOptions>.RichText(string) SUiElement<SOptionsOptions>.FontSize(int) SUiElement<SOptionsOptions>.FontAutoSize(bool) SUiElement<SOptionsOptions>.FontColor(Color) SUiElement<SOptionsOptions>.FontColor(string) SUiElement<SOptionsOptions>.Find<TObj>(string) SUiElement<SOptionsOptions>.MinOffset(int?, int?) SUiElement<SOptionsOptions>.MaxOffset(int?, int?) SUiElement<SOptionsOptions>.Size(float?, float?) SUiElement<SOptionsOptions>.Size(Vector2) SUiElement<SOptionsOptions>.Position(float?, float?) SUiElement<SOptionsOptions>.Width(float) SUiElement<SOptionsOptions>.Height(float) SUiElement<SOptionsOptions>.PHeight(float) SUiElement<SOptionsOptions>.PWidth(float) SUiElement<SOptionsOptions>.MHeight(float) SUiElement<SOptionsOptions>.MWidth(float) SUiElement<SOptionsOptions>.FlexHeight(float) SUiElement<SOptionsOptions>.FlexWidth(float) SUiElement<SOptionsOptions>.RectPadding(float, float, float, float) SUiElement<SOptionsOptions>.RectPadding(float, float) SUiElement<SOptionsOptions>.RectPadding(float) SUiElement<SOptionsOptions>.HFill() SUiElement<SOptionsOptions>.VFill() SUiElement<SOptionsOptions>.VOffset(float, float) SUiElement<SOptionsOptions>.HOffset(float, float) SUiElement<SOptionsOptions>.Pivot(float?, float?) SUiElement<SOptionsOptions>.AspectRatio(AspectRatioFitter.AspectMode) SUiElement<SOptionsOptions>.Anchor(AnchorType) SUiElement<SOptionsOptions>.Dock(EDockType) SUiElement<SOptionsOptions>.Ppu(float) SUiElement<SOptionsOptions>.Visible(bool) SUiElement<SOptionsOptions>.Active(bool) SUiElement<SOptionsOptions>.Toggle() SUiElement<SOptionsOptions>.OnClick(Action) SUiElement<SOptionsOptions>.Add(SUiElement) SUiElement<SOptionsOptions>.this[string] SUiElement.RectTransform SUiElement.Root SUiElement.Parent SUiElement._id SUiElement._classes SUiElement.SetParent(Transform) SUiElement.SetParent(SUiElement) SUiElement.Remove() SUiElement.As<T>() SUiElement.GetClass(string) SUiElement.GetOrAdd<T>() object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: SUI Assembly: SonsSdk.dll Syntax public class SOptionsOptions : SUiElement<SOptionsOptions, string> Constructors SOptionsOptions(GameObject) Declaration public SOptionsOptions(GameObject root) Parameters Type Name Description GameObject root Fields DropdownObject Declaration public SonsDropdown DropdownObject Field Value Type Description SonsDropdown Methods Background(EBackground) Declaration public SOptionsOptions Background(EBackground background) Parameters Type Name Description EBackground background Returns Type Description SOptionsOptions Background(bool) Declaration public SOptionsOptions Background(bool hasBackground) Parameters Type Name Description bool hasBackground Returns Type Description SOptionsOptions Background(Sprite) Declaration public SOptionsOptions Background(Sprite sprite) Parameters Type Name Description Sprite sprite Returns Type Description SOptionsOptions HideLabel(bool) Declaration public SOptionsOptions HideLabel(bool hide = true) Parameters Type Name Description bool hide Returns Type Description SOptionsOptions LabelWidth(float) Declaration public SOptionsOptions LabelWidth(float width) Parameters Type Name Description float width Returns Type Description SOptionsOptions Notify(Action<int>) Declaration public SOptionsOptions Notify(Action<int> action) Parameters Type Name Description Action<int> action Returns Type Description SOptionsOptions Notify(Action<string>) Declaration public SOptionsOptions Notify(Action<string> action) Parameters Type Name Description Action<string> action Returns Type Description SOptionsOptions OnObservaleChanged(string) Declaration protected override void OnObservaleChanged(string value) Parameters Type Name Description string value Overrides SUiElement<SOptionsOptions, string>.OnObservaleChanged(string) Options(params string[]) Declaration public SOptionsOptions Options(params string[] options) Parameters Type Name Description string[] options Returns Type Description SOptionsOptions RegisterObservable(Observable<string>) Declaration protected override void RegisterObservable(Observable<string> observable) Parameters Type Name Description Observable<string> observable Overrides SUiElement<SOptionsOptions, string>.RegisterObservable(Observable<string>) UnregisterObservable(Observable<string>) Declaration protected override void UnregisterObservable(Observable<string> observable) Parameters Type Name Description Observable<string> observable Overrides SUiElement<SOptionsOptions, string>.UnregisterObservable(Observable<string>) Value(int) Declaration public SOptionsOptions Value(int value) Parameters Type Name Description int value Returns Type Description SOptionsOptions Value(string) Declaration public SOptionsOptions Value(string value) Parameters Type Name Description string value Returns Type Description SOptionsOptions"
  },
  "api/SUI.SPanelOptions.html": {
    "href": "api/SUI.SPanelOptions.html",
    "title": "Class SPanelOptions | RedLoader Docs",
    "keywords": "Class SPanelOptions Inheritance object SUiElement SUiElement<SContainerOptions> SContainerOptions SPanelOptions Inherited Members SContainerOptions.VisibilityObservalbleChanged(bool) SContainerOptions.BindVisibility(Observable<bool>, bool) SContainerOptions.Horizontal(float, string) SContainerOptions.Vertical(float, string) SContainerOptions.LayoutChildAlignment(TextAnchor) SContainerOptions.ChildControl(bool?, bool?) SContainerOptions.ChildExpand(bool?, bool?) SContainerOptions.LayoutUseChildScale(bool?, bool?) SContainerOptions.LayoutMode(string) SContainerOptions.Spacing(float) SContainerOptions.Spacing(float, float) SContainerOptions.Padding(float) SContainerOptions.Padding(float, float, float, float) SContainerOptions.PaddingHorizontal(float) SContainerOptions.PaddingVertical(float) SContainerOptions.Grid(int, float) SContainerOptions.CellSize(float, float) SContainerOptions.AutoSize(ContentSizeFitter.FitMode, ContentSizeFitter.FitMode) SContainerOptions.AutoSize(string) SContainerOptions.CanvasGroup(float, bool) SContainerOptions.Opacity(float) SContainerOptions.Background(Color, EBackground, Image.Type?) SContainerOptions.Background(SUI.BackgroundDefinition) SContainerOptions.Background(string, bool) SContainerOptions.Background(bool) SContainerOptions.Background(Sprite, Color?, Image.Type) SContainerOptions.OverrideSorting(int) SContainerOptions.this[SUiElement] SUiElement<SContainerOptions>.TextObject SUiElement<SContainerOptions>.VisibilityObservable SUiElement<SContainerOptions>.BindVisibility(Observable<bool>) SUiElement<SContainerOptions>.UnbindVisibility() SUiElement<SContainerOptions>.Name(string) SUiElement<SContainerOptions>.Id(string) SUiElement<SContainerOptions>.Class(string) SUiElement<SContainerOptions>.Text(string) SUiElement<SContainerOptions>.RichText(string) SUiElement<SContainerOptions>.FontSize(int) SUiElement<SContainerOptions>.FontAutoSize(bool) SUiElement<SContainerOptions>.FontColor(Color) SUiElement<SContainerOptions>.FontColor(string) SUiElement<SContainerOptions>.Find<TObj>(string) SUiElement<SContainerOptions>.MinOffset(int?, int?) SUiElement<SContainerOptions>.MaxOffset(int?, int?) SUiElement<SContainerOptions>.Size(float?, float?) SUiElement<SContainerOptions>.Size(Vector2) SUiElement<SContainerOptions>.Position(float?, float?) SUiElement<SContainerOptions>.Width(float) SUiElement<SContainerOptions>.Height(float) SUiElement<SContainerOptions>.PHeight(float) SUiElement<SContainerOptions>.PWidth(float) SUiElement<SContainerOptions>.MHeight(float) SUiElement<SContainerOptions>.MWidth(float) SUiElement<SContainerOptions>.FlexHeight(float) SUiElement<SContainerOptions>.FlexWidth(float) SUiElement<SContainerOptions>.RectPadding(float, float, float, float) SUiElement<SContainerOptions>.RectPadding(float, float) SUiElement<SContainerOptions>.RectPadding(float) SUiElement<SContainerOptions>.HFill() SUiElement<SContainerOptions>.VFill() SUiElement<SContainerOptions>.VOffset(float, float) SUiElement<SContainerOptions>.HOffset(float, float) SUiElement<SContainerOptions>.Pivot(float?, float?) SUiElement<SContainerOptions>.AspectRatio(AspectRatioFitter.AspectMode) SUiElement<SContainerOptions>.Anchor(AnchorType) SUiElement<SContainerOptions>.Dock(EDockType) SUiElement<SContainerOptions>.Ppu(float) SUiElement<SContainerOptions>.Visible(bool) SUiElement<SContainerOptions>.Active(bool) SUiElement<SContainerOptions>.Toggle() SUiElement<SContainerOptions>.OnClick(Action) SUiElement<SContainerOptions>.Add(SUiElement) SUiElement<SContainerOptions>.this[string] SUiElement.RectTransform SUiElement.Root SUiElement.Parent SUiElement._id SUiElement._classes SUiElement.SetParent(Transform) SUiElement.SetParent(SUiElement) SUiElement.Remove() SUiElement.As<T>() SUiElement.GetClass(string) SUiElement.GetOrAdd<T>() object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: SUI Assembly: SonsSdk.dll Syntax public class SPanelOptions : SContainerOptions Constructors SPanelOptions(GameObject) Declaration public SPanelOptions(GameObject root) Parameters Type Name Description GameObject root Properties Id Declaration public string Id { get; } Property Value Type Description string"
  },
  "api/SUI.SScrollContainerOptions.html": {
    "href": "api/SUI.SScrollContainerOptions.html",
    "title": "Class SScrollContainerOptions | RedLoader Docs",
    "keywords": "Class SScrollContainerOptions Inheritance object SUiElement SUiElement<SContainerOptions> SContainerOptions SScrollContainerOptions Inherited Members SContainerOptions.VisibilityObservalbleChanged(bool) SContainerOptions.BindVisibility(Observable<bool>, bool) SContainerOptions.Horizontal(float, string) SContainerOptions.Vertical(float, string) SContainerOptions.LayoutChildAlignment(TextAnchor) SContainerOptions.ChildControl(bool?, bool?) SContainerOptions.ChildExpand(bool?, bool?) SContainerOptions.LayoutUseChildScale(bool?, bool?) SContainerOptions.LayoutMode(string) SContainerOptions.Spacing(float) SContainerOptions.Spacing(float, float) SContainerOptions.Padding(float) SContainerOptions.Padding(float, float, float, float) SContainerOptions.PaddingHorizontal(float) SContainerOptions.PaddingVertical(float) SContainerOptions.Grid(int, float) SContainerOptions.CellSize(float, float) SContainerOptions.AutoSize(ContentSizeFitter.FitMode, ContentSizeFitter.FitMode) SContainerOptions.AutoSize(string) SContainerOptions.CanvasGroup(float, bool) SContainerOptions.Opacity(float) SContainerOptions.Background(Color, EBackground, Image.Type?) SContainerOptions.Background(SUI.BackgroundDefinition) SContainerOptions.Background(string, bool) SContainerOptions.Background(bool) SContainerOptions.Background(Sprite, Color?, Image.Type) SContainerOptions.OverrideSorting(int) SContainerOptions.this[SUiElement] SUiElement<SContainerOptions>.TextObject SUiElement<SContainerOptions>.VisibilityObservable SUiElement<SContainerOptions>.BindVisibility(Observable<bool>) SUiElement<SContainerOptions>.UnbindVisibility() SUiElement<SContainerOptions>.Name(string) SUiElement<SContainerOptions>.Id(string) SUiElement<SContainerOptions>.Class(string) SUiElement<SContainerOptions>.Text(string) SUiElement<SContainerOptions>.RichText(string) SUiElement<SContainerOptions>.FontSize(int) SUiElement<SContainerOptions>.FontAutoSize(bool) SUiElement<SContainerOptions>.FontColor(Color) SUiElement<SContainerOptions>.FontColor(string) SUiElement<SContainerOptions>.Find<TObj>(string) SUiElement<SContainerOptions>.MinOffset(int?, int?) SUiElement<SContainerOptions>.MaxOffset(int?, int?) SUiElement<SContainerOptions>.Size(float?, float?) SUiElement<SContainerOptions>.Size(Vector2) SUiElement<SContainerOptions>.Position(float?, float?) SUiElement<SContainerOptions>.Width(float) SUiElement<SContainerOptions>.Height(float) SUiElement<SContainerOptions>.PHeight(float) SUiElement<SContainerOptions>.PWidth(float) SUiElement<SContainerOptions>.MHeight(float) SUiElement<SContainerOptions>.MWidth(float) SUiElement<SContainerOptions>.FlexHeight(float) SUiElement<SContainerOptions>.FlexWidth(float) SUiElement<SContainerOptions>.RectPadding(float, float, float, float) SUiElement<SContainerOptions>.RectPadding(float, float) SUiElement<SContainerOptions>.RectPadding(float) SUiElement<SContainerOptions>.HFill() SUiElement<SContainerOptions>.VFill() SUiElement<SContainerOptions>.VOffset(float, float) SUiElement<SContainerOptions>.HOffset(float, float) SUiElement<SContainerOptions>.Pivot(float?, float?) SUiElement<SContainerOptions>.AspectRatio(AspectRatioFitter.AspectMode) SUiElement<SContainerOptions>.Anchor(AnchorType) SUiElement<SContainerOptions>.Dock(EDockType) SUiElement<SContainerOptions>.Ppu(float) SUiElement<SContainerOptions>.Visible(bool) SUiElement<SContainerOptions>.Active(bool) SUiElement<SContainerOptions>.Toggle() SUiElement<SContainerOptions>.OnClick(Action) SUiElement<SContainerOptions>.this[string] SUiElement.RectTransform SUiElement.Root SUiElement.Parent SUiElement._id SUiElement._classes SUiElement.SetParent(Transform) SUiElement.SetParent(SUiElement) SUiElement.Remove() SUiElement.As<T>() SUiElement.GetClass(string) SUiElement.GetOrAdd<T>() object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: SUI Assembly: SonsSdk.dll Syntax public class SScrollContainerOptions : SContainerOptions Constructors SScrollContainerOptions(GameObject) Declaration public SScrollContainerOptions(GameObject root) Parameters Type Name Description GameObject root Fields ContainerObject Declaration public SContainerOptions ContainerObject Field Value Type Description SContainerOptions Methods Add(SUiElement) Declaration public override SScrollContainerOptions Add(SUiElement element) Parameters Type Name Description SUiElement element Returns Type Description SScrollContainerOptions Overrides SUiElement<SContainerOptions>.Add(SUiElement) ContainerPadding(int) Declaration public SScrollContainerOptions ContainerPadding(int padding) Parameters Type Name Description int padding Returns Type Description SScrollContainerOptions ContainerPadding(int, int, int, int) Declaration public SScrollContainerOptions ContainerPadding(int left, int right, int top, int bottom) Parameters Type Name Description int left int right int top int bottom Returns Type Description SScrollContainerOptions"
  },
  "api/SUI.SSliderOptions.html": {
    "href": "api/SUI.SSliderOptions.html",
    "title": "Class SSliderOptions | RedLoader Docs",
    "keywords": "Class SSliderOptions Inheritance object SUiElement SUiElement<SSliderOptions> SUiElement<SSliderOptions, float> SSliderOptions Inherited Members SUiElement<SSliderOptions, float>.Observable SUiElement<SSliderOptions, float>.Bind(Observable<float>) SUiElement<SSliderOptions, float>.Unbind() SUiElement<SSliderOptions, float>.RegisterObservable(Observable<float>) SUiElement<SSliderOptions, float>.UnregisterObservable(Observable<float>) SUiElement<SSliderOptions, float>.OnObservaleChanged(float) SUiElement<SSliderOptions>.TextObject SUiElement<SSliderOptions>.VisibilityObservable SUiElement<SSliderOptions>.VisibilityObservalbleChanged(bool) SUiElement<SSliderOptions>.BindVisibility(Observable<bool>) SUiElement<SSliderOptions>.UnbindVisibility() SUiElement<SSliderOptions>.Name(string) SUiElement<SSliderOptions>.Id(string) SUiElement<SSliderOptions>.Class(string) SUiElement<SSliderOptions>.Text(string) SUiElement<SSliderOptions>.RichText(string) SUiElement<SSliderOptions>.FontSize(int) SUiElement<SSliderOptions>.FontAutoSize(bool) SUiElement<SSliderOptions>.FontColor(Color) SUiElement<SSliderOptions>.FontColor(string) SUiElement<SSliderOptions>.Find<TObj>(string) SUiElement<SSliderOptions>.MinOffset(int?, int?) SUiElement<SSliderOptions>.MaxOffset(int?, int?) SUiElement<SSliderOptions>.Size(float?, float?) SUiElement<SSliderOptions>.Size(Vector2) SUiElement<SSliderOptions>.Position(float?, float?) SUiElement<SSliderOptions>.Width(float) SUiElement<SSliderOptions>.Height(float) SUiElement<SSliderOptions>.PHeight(float) SUiElement<SSliderOptions>.PWidth(float) SUiElement<SSliderOptions>.MHeight(float) SUiElement<SSliderOptions>.MWidth(float) SUiElement<SSliderOptions>.FlexHeight(float) SUiElement<SSliderOptions>.FlexWidth(float) SUiElement<SSliderOptions>.RectPadding(float, float, float, float) SUiElement<SSliderOptions>.RectPadding(float, float) SUiElement<SSliderOptions>.RectPadding(float) SUiElement<SSliderOptions>.HFill() SUiElement<SSliderOptions>.VFill() SUiElement<SSliderOptions>.VOffset(float, float) SUiElement<SSliderOptions>.HOffset(float, float) SUiElement<SSliderOptions>.Pivot(float?, float?) SUiElement<SSliderOptions>.AspectRatio(AspectRatioFitter.AspectMode) SUiElement<SSliderOptions>.Anchor(AnchorType) SUiElement<SSliderOptions>.Dock(EDockType) SUiElement<SSliderOptions>.Ppu(float) SUiElement<SSliderOptions>.Visible(bool) SUiElement<SSliderOptions>.Active(bool) SUiElement<SSliderOptions>.Toggle() SUiElement<SSliderOptions>.OnClick(Action) SUiElement<SSliderOptions>.Add(SUiElement) SUiElement<SSliderOptions>.this[string] SUiElement.RectTransform SUiElement.Root SUiElement.Parent SUiElement._id SUiElement._classes SUiElement.SetParent(Transform) SUiElement.SetParent(SUiElement) SUiElement.Remove() SUiElement.As<T>() SUiElement.GetClass(string) SUiElement.GetOrAdd<T>() object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: SUI Assembly: SonsSdk.dll Syntax public class SSliderOptions : SUiElement<SSliderOptions, float> Constructors SSliderOptions(GameObject) Declaration public SSliderOptions(GameObject root) Parameters Type Name Description GameObject root Fields SliderObject Declaration public SonsSlider SliderObject Field Value Type Description SonsSlider Methods Background(EBackground) Declaration public SSliderOptions Background(EBackground background) Parameters Type Name Description EBackground background Returns Type Description SSliderOptions Background(bool) Declaration public SSliderOptions Background(bool hasBackground) Parameters Type Name Description bool hasBackground Returns Type Description SSliderOptions Background(Sprite) Declaration public SSliderOptions Background(Sprite sprite) Parameters Type Name Description Sprite sprite Returns Type Description SSliderOptions Format(string) Declaration public SSliderOptions Format(string format) Parameters Type Name Description string format Returns Type Description SSliderOptions InputFlexWidth(float) Declaration public SSliderOptions InputFlexWidth(float width) Parameters Type Name Description float width Returns Type Description SSliderOptions IntStep() Declaration public SSliderOptions IntStep() Returns Type Description SSliderOptions LabelWidth(float) Declaration public SSliderOptions LabelWidth(float width) Parameters Type Name Description float width Returns Type Description SSliderOptions Max(float) Declaration public SSliderOptions Max(float max) Parameters Type Name Description float max Returns Type Description SSliderOptions Min(float) Declaration public SSliderOptions Min(float min) Parameters Type Name Description float min Returns Type Description SSliderOptions Notify(Action<float>) Declaration public SSliderOptions Notify(Action<float> action) Parameters Type Name Description Action<float> action Returns Type Description SSliderOptions OnObservaleChanged(float) Declaration protected override void OnObservaleChanged(float value) Parameters Type Name Description float value Overrides SUiElement<SSliderOptions, float>.OnObservaleChanged(float) Options(VisibilityMask) Declaration public SSliderOptions Options(SSliderOptions.VisibilityMask mask) Parameters Type Name Description SSliderOptions.VisibilityMask mask Returns Type Description SSliderOptions Range(float, float) Declaration public SSliderOptions Range(float min, float max) Parameters Type Name Description float min float max Returns Type Description SSliderOptions RegisterObservable(Observable<float>) Declaration protected override void RegisterObservable(Observable<float> observable) Parameters Type Name Description Observable<float> observable Overrides SUiElement<SSliderOptions, float>.RegisterObservable(Observable<float>) Step(float) Declaration public SSliderOptions Step(float step) Parameters Type Name Description float step Returns Type Description SSliderOptions UnregisterObservable(Observable<float>) Declaration protected override void UnregisterObservable(Observable<float> observable) Parameters Type Name Description Observable<float> observable Overrides SUiElement<SSliderOptions, float>.UnregisterObservable(Observable<float>) Value(float) Declaration public SSliderOptions Value(float value) Parameters Type Name Description float value Returns Type Description SSliderOptions"
  },
  "api/SUI.SSliderOptions.VisibilityMask.html": {
    "href": "api/SUI.SSliderOptions.VisibilityMask.html",
    "title": "Enum SSliderOptions.VisibilityMask | RedLoader Docs",
    "keywords": "Enum SSliderOptions.VisibilityMask Namespace: SUI Assembly: SonsSdk.dll Syntax [Flags] public enum SSliderOptions.VisibilityMask Fields Name Description Buttons Label None Readout"
  },
  "api/SUI.SSpriteOptions.html": {
    "href": "api/SUI.SSpriteOptions.html",
    "title": "Class SSpriteOptions | RedLoader Docs",
    "keywords": "Class SSpriteOptions Inheritance object SUiElement SUiElement<SSpriteOptions> SUiElement<SSpriteOptions, Sprite> SSpriteOptions Inherited Members SUiElement<SSpriteOptions, Sprite>.Observable SUiElement<SSpriteOptions, Sprite>.Bind(Observable<Sprite>) SUiElement<SSpriteOptions, Sprite>.Unbind() SUiElement<SSpriteOptions, Sprite>.RegisterObservable(Observable<Sprite>) SUiElement<SSpriteOptions, Sprite>.UnregisterObservable(Observable<Sprite>) SUiElement<SSpriteOptions, Sprite>.OnObservaleChanged(Sprite) SUiElement<SSpriteOptions>.TextObject SUiElement<SSpriteOptions>.VisibilityObservable SUiElement<SSpriteOptions>.VisibilityObservalbleChanged(bool) SUiElement<SSpriteOptions>.BindVisibility(Observable<bool>) SUiElement<SSpriteOptions>.UnbindVisibility() SUiElement<SSpriteOptions>.Name(string) SUiElement<SSpriteOptions>.Id(string) SUiElement<SSpriteOptions>.Class(string) SUiElement<SSpriteOptions>.Text(string) SUiElement<SSpriteOptions>.RichText(string) SUiElement<SSpriteOptions>.FontSize(int) SUiElement<SSpriteOptions>.FontAutoSize(bool) SUiElement<SSpriteOptions>.FontColor(Color) SUiElement<SSpriteOptions>.FontColor(string) SUiElement<SSpriteOptions>.Find<TObj>(string) SUiElement<SSpriteOptions>.MinOffset(int?, int?) SUiElement<SSpriteOptions>.MaxOffset(int?, int?) SUiElement<SSpriteOptions>.Size(float?, float?) SUiElement<SSpriteOptions>.Size(Vector2) SUiElement<SSpriteOptions>.Position(float?, float?) SUiElement<SSpriteOptions>.Width(float) SUiElement<SSpriteOptions>.Height(float) SUiElement<SSpriteOptions>.PHeight(float) SUiElement<SSpriteOptions>.PWidth(float) SUiElement<SSpriteOptions>.MHeight(float) SUiElement<SSpriteOptions>.MWidth(float) SUiElement<SSpriteOptions>.FlexHeight(float) SUiElement<SSpriteOptions>.FlexWidth(float) SUiElement<SSpriteOptions>.RectPadding(float, float, float, float) SUiElement<SSpriteOptions>.RectPadding(float, float) SUiElement<SSpriteOptions>.RectPadding(float) SUiElement<SSpriteOptions>.HFill() SUiElement<SSpriteOptions>.VFill() SUiElement<SSpriteOptions>.VOffset(float, float) SUiElement<SSpriteOptions>.HOffset(float, float) SUiElement<SSpriteOptions>.Pivot(float?, float?) SUiElement<SSpriteOptions>.AspectRatio(AspectRatioFitter.AspectMode) SUiElement<SSpriteOptions>.Anchor(AnchorType) SUiElement<SSpriteOptions>.Dock(EDockType) SUiElement<SSpriteOptions>.Ppu(float) SUiElement<SSpriteOptions>.Visible(bool) SUiElement<SSpriteOptions>.Active(bool) SUiElement<SSpriteOptions>.Toggle() SUiElement<SSpriteOptions>.OnClick(Action) SUiElement<SSpriteOptions>.Add(SUiElement) SUiElement<SSpriteOptions>.this[string] SUiElement.RectTransform SUiElement.Root SUiElement.Parent SUiElement._id SUiElement._classes SUiElement.SetParent(Transform) SUiElement.SetParent(SUiElement) SUiElement.Remove() SUiElement.As<T>() SUiElement.GetClass(string) SUiElement.GetOrAdd<T>() object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: SUI Assembly: SonsSdk.dll Syntax public class SSpriteOptions : SUiElement<SSpriteOptions, Sprite> Constructors SSpriteOptions(GameObject) Declaration public SSpriteOptions(GameObject root) Parameters Type Name Description GameObject root Fields ImageObject Declaration public Image ImageObject Field Value Type Description Image Methods Color(Color) Declaration public SSpriteOptions Color(Color color) Parameters Type Name Description Color color Returns Type Description SSpriteOptions OnObservaleChanged(Sprite) Declaration protected override void OnObservaleChanged(Sprite value) Parameters Type Name Description Sprite value Overrides SUiElement<SSpriteOptions, Sprite>.OnObservaleChanged(Sprite) Sprite(Sprite) Declaration public SSpriteOptions Sprite(Sprite sprite) Parameters Type Name Description Sprite sprite Returns Type Description SSpriteOptions"
  },
  "api/SUI.STabControllerOptions.html": {
    "href": "api/SUI.STabControllerOptions.html",
    "title": "Class STabControllerOptions | RedLoader Docs",
    "keywords": "Class STabControllerOptions Inheritance object SUiElement SUiElement<SContainerOptions> SContainerOptions STabControllerOptions Inherited Members SContainerOptions.VisibilityObservalbleChanged(bool) SContainerOptions.BindVisibility(Observable<bool>, bool) SContainerOptions.Horizontal(float, string) SContainerOptions.Vertical(float, string) SContainerOptions.LayoutChildAlignment(TextAnchor) SContainerOptions.ChildControl(bool?, bool?) SContainerOptions.ChildExpand(bool?, bool?) SContainerOptions.LayoutUseChildScale(bool?, bool?) SContainerOptions.LayoutMode(string) SContainerOptions.Spacing(float) SContainerOptions.Spacing(float, float) SContainerOptions.Padding(float) SContainerOptions.Padding(float, float, float, float) SContainerOptions.PaddingHorizontal(float) SContainerOptions.PaddingVertical(float) SContainerOptions.Grid(int, float) SContainerOptions.CellSize(float, float) SContainerOptions.AutoSize(ContentSizeFitter.FitMode, ContentSizeFitter.FitMode) SContainerOptions.AutoSize(string) SContainerOptions.CanvasGroup(float, bool) SContainerOptions.Opacity(float) SContainerOptions.Background(Color, EBackground, Image.Type?) SContainerOptions.Background(SUI.BackgroundDefinition) SContainerOptions.Background(string, bool) SContainerOptions.Background(bool) SContainerOptions.Background(Sprite, Color?, Image.Type) SContainerOptions.OverrideSorting(int) SContainerOptions.this[SUiElement] SUiElement<SContainerOptions>.TextObject SUiElement<SContainerOptions>.VisibilityObservable SUiElement<SContainerOptions>.BindVisibility(Observable<bool>) SUiElement<SContainerOptions>.UnbindVisibility() SUiElement<SContainerOptions>.Name(string) SUiElement<SContainerOptions>.Id(string) SUiElement<SContainerOptions>.Class(string) SUiElement<SContainerOptions>.Text(string) SUiElement<SContainerOptions>.RichText(string) SUiElement<SContainerOptions>.FontSize(int) SUiElement<SContainerOptions>.FontAutoSize(bool) SUiElement<SContainerOptions>.FontColor(Color) SUiElement<SContainerOptions>.FontColor(string) SUiElement<SContainerOptions>.Find<TObj>(string) SUiElement<SContainerOptions>.MinOffset(int?, int?) SUiElement<SContainerOptions>.MaxOffset(int?, int?) SUiElement<SContainerOptions>.Size(float?, float?) SUiElement<SContainerOptions>.Size(Vector2) SUiElement<SContainerOptions>.Position(float?, float?) SUiElement<SContainerOptions>.Width(float) SUiElement<SContainerOptions>.Height(float) SUiElement<SContainerOptions>.PHeight(float) SUiElement<SContainerOptions>.PWidth(float) SUiElement<SContainerOptions>.MHeight(float) SUiElement<SContainerOptions>.MWidth(float) SUiElement<SContainerOptions>.FlexHeight(float) SUiElement<SContainerOptions>.FlexWidth(float) SUiElement<SContainerOptions>.RectPadding(float, float, float, float) SUiElement<SContainerOptions>.RectPadding(float, float) SUiElement<SContainerOptions>.RectPadding(float) SUiElement<SContainerOptions>.HFill() SUiElement<SContainerOptions>.VFill() SUiElement<SContainerOptions>.VOffset(float, float) SUiElement<SContainerOptions>.HOffset(float, float) SUiElement<SContainerOptions>.Pivot(float?, float?) SUiElement<SContainerOptions>.AspectRatio(AspectRatioFitter.AspectMode) SUiElement<SContainerOptions>.Anchor(AnchorType) SUiElement<SContainerOptions>.Dock(EDockType) SUiElement<SContainerOptions>.Ppu(float) SUiElement<SContainerOptions>.Visible(bool) SUiElement<SContainerOptions>.Active(bool) SUiElement<SContainerOptions>.Toggle() SUiElement<SContainerOptions>.OnClick(Action) SUiElement<SContainerOptions>.Add(SUiElement) SUiElement<SContainerOptions>.this[string] SUiElement.RectTransform SUiElement.Root SUiElement.Parent SUiElement._id SUiElement._classes SUiElement.SetParent(Transform) SUiElement.SetParent(SUiElement) SUiElement.Remove() SUiElement.As<T>() SUiElement.GetClass(string) SUiElement.GetOrAdd<T>() object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: SUI Assembly: SonsSdk.dll Syntax public class STabControllerOptions : SContainerOptions Constructors STabControllerOptions(GameObject) Declaration public STabControllerOptions(GameObject root) Parameters Type Name Description GameObject root Fields TabContainer Declaration public SContainerOptions TabContainer Field Value Type Description SContainerOptions TabDivider Declaration public SContainerOptions TabDivider Field Value Type Description SContainerOptions TabHeader Declaration public SContainerOptions TabHeader Field Value Type Description SContainerOptions Tabs Declaration public Dictionary<string, STabControllerOptions.TabDefinition> Tabs Field Value Type Description Dictionary<string, STabControllerOptions.TabDefinition> Methods AddTab(TabDefinition) Declaration public STabControllerOptions AddTab(STabControllerOptions.TabDefinition tab) Parameters Type Name Description STabControllerOptions.TabDefinition tab Returns Type Description STabControllerOptions HideDivider(bool) Declaration public STabControllerOptions HideDivider(bool hide = true) Parameters Type Name Description bool hide Returns Type Description STabControllerOptions ShowTab(string) Declaration public STabControllerOptions ShowTab(string id) Parameters Type Name Description string id Returns Type Description STabControllerOptions"
  },
  "api/SUI.STabControllerOptions.TabDefinition.html": {
    "href": "api/SUI.STabControllerOptions.TabDefinition.html",
    "title": "Struct STabControllerOptions.TabDefinition | RedLoader Docs",
    "keywords": "Struct STabControllerOptions.TabDefinition Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) Namespace: SUI Assembly: SonsSdk.dll Syntax public struct STabControllerOptions.TabDefinition Constructors TabDefinition(string, string, SContainerOptions) Declaration public TabDefinition(string id, string name, SContainerOptions tabContent) Parameters Type Name Description string id string name SContainerOptions tabContent TabDefinition(string, string, SUiElement, SContainerOptions) Declaration public TabDefinition(string id, string name, SUiElement tab, SContainerOptions tabContent) Parameters Type Name Description string id string name SUiElement tab SContainerOptions tabContent Fields Id Declaration public string Id Field Value Type Description string Name Declaration public string Name Field Value Type Description string Tab Declaration public SUiElement Tab Field Value Type Description SUiElement TabContent Declaration public SContainerOptions TabContent Field Value Type Description SContainerOptions"
  },
  "api/SUI.STextboxOptions.html": {
    "href": "api/SUI.STextboxOptions.html",
    "title": "Class STextboxOptions | RedLoader Docs",
    "keywords": "Class STextboxOptions Inheritance object SUiElement SUiElement<STextboxOptions> SUiElement<STextboxOptions, string> STextboxOptions Inherited Members SUiElement<STextboxOptions, string>.Observable SUiElement<STextboxOptions, string>.Bind(Observable<string>) SUiElement<STextboxOptions, string>.Unbind() SUiElement<STextboxOptions, string>.RegisterObservable(Observable<string>) SUiElement<STextboxOptions, string>.UnregisterObservable(Observable<string>) SUiElement<STextboxOptions, string>.OnObservaleChanged(string) SUiElement<STextboxOptions>.TextObject SUiElement<STextboxOptions>.VisibilityObservable SUiElement<STextboxOptions>.VisibilityObservalbleChanged(bool) SUiElement<STextboxOptions>.BindVisibility(Observable<bool>) SUiElement<STextboxOptions>.UnbindVisibility() SUiElement<STextboxOptions>.Name(string) SUiElement<STextboxOptions>.Id(string) SUiElement<STextboxOptions>.Class(string) SUiElement<STextboxOptions>.Text(string) SUiElement<STextboxOptions>.RichText(string) SUiElement<STextboxOptions>.FontSize(int) SUiElement<STextboxOptions>.FontAutoSize(bool) SUiElement<STextboxOptions>.FontColor(Color) SUiElement<STextboxOptions>.FontColor(string) SUiElement<STextboxOptions>.Find<TObj>(string) SUiElement<STextboxOptions>.MinOffset(int?, int?) SUiElement<STextboxOptions>.MaxOffset(int?, int?) SUiElement<STextboxOptions>.Size(float?, float?) SUiElement<STextboxOptions>.Size(Vector2) SUiElement<STextboxOptions>.Position(float?, float?) SUiElement<STextboxOptions>.Width(float) SUiElement<STextboxOptions>.Height(float) SUiElement<STextboxOptions>.PHeight(float) SUiElement<STextboxOptions>.PWidth(float) SUiElement<STextboxOptions>.MHeight(float) SUiElement<STextboxOptions>.MWidth(float) SUiElement<STextboxOptions>.FlexHeight(float) SUiElement<STextboxOptions>.FlexWidth(float) SUiElement<STextboxOptions>.RectPadding(float, float, float, float) SUiElement<STextboxOptions>.RectPadding(float, float) SUiElement<STextboxOptions>.RectPadding(float) SUiElement<STextboxOptions>.HFill() SUiElement<STextboxOptions>.VFill() SUiElement<STextboxOptions>.VOffset(float, float) SUiElement<STextboxOptions>.HOffset(float, float) SUiElement<STextboxOptions>.Pivot(float?, float?) SUiElement<STextboxOptions>.AspectRatio(AspectRatioFitter.AspectMode) SUiElement<STextboxOptions>.Anchor(AnchorType) SUiElement<STextboxOptions>.Dock(EDockType) SUiElement<STextboxOptions>.Ppu(float) SUiElement<STextboxOptions>.Visible(bool) SUiElement<STextboxOptions>.Active(bool) SUiElement<STextboxOptions>.Toggle() SUiElement<STextboxOptions>.OnClick(Action) SUiElement<STextboxOptions>.Add(SUiElement) SUiElement<STextboxOptions>.this[string] SUiElement.RectTransform SUiElement.Root SUiElement.Parent SUiElement._id SUiElement._classes SUiElement.SetParent(Transform) SUiElement.SetParent(SUiElement) SUiElement.Remove() SUiElement.As<T>() SUiElement.GetClass(string) SUiElement.GetOrAdd<T>() object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: SUI Assembly: SonsSdk.dll Syntax public class STextboxOptions : SUiElement<STextboxOptions, string> Constructors STextboxOptions(GameObject) Declaration public STextboxOptions(GameObject root) Parameters Type Name Description GameObject root Fields InputFieldObject Declaration public TMP_InputField InputFieldObject Field Value Type Description TMP_InputField PlaceholderObject Declaration public TextMeshProUGUI PlaceholderObject Field Value Type Description TextMeshProUGUI Properties InputTextObject Declaration public TMP_Text InputTextObject { get; } Property Value Type Description TMP_Text Methods Background(EBackground) Declaration public STextboxOptions Background(EBackground background) Parameters Type Name Description EBackground background Returns Type Description STextboxOptions Background(Sprite) Declaration public STextboxOptions Background(Sprite sprite) Parameters Type Name Description Sprite sprite Returns Type Description STextboxOptions CuddleLabel(bool, float) Declaration public STextboxOptions CuddleLabel(bool enable = true, float spacing = 10) Parameters Type Name Description bool enable float spacing Returns Type Description STextboxOptions HideLabel(bool) Declaration public STextboxOptions HideLabel(bool hide = true) Parameters Type Name Description bool hide Returns Type Description STextboxOptions InputFlexWidth(float) Declaration public STextboxOptions InputFlexWidth(float width) Parameters Type Name Description float width Returns Type Description STextboxOptions Notify(Action<string>) Declaration public STextboxOptions Notify(Action<string> action) Parameters Type Name Description Action<string> action Returns Type Description STextboxOptions OnObservaleChanged(string) Declaration protected override void OnObservaleChanged(string value) Parameters Type Name Description string value Overrides SUiElement<STextboxOptions, string>.OnObservaleChanged(string) Placeholder(string) Declaration public STextboxOptions Placeholder(string value) Parameters Type Name Description string value Returns Type Description STextboxOptions RegisterObservable(Observable<string>) Declaration protected override void RegisterObservable(Observable<string> observable) Parameters Type Name Description Observable<string> observable Overrides SUiElement<STextboxOptions, string>.RegisterObservable(Observable<string>) UnregisterObservable(Observable<string>) Declaration protected override void UnregisterObservable(Observable<string> observable) Parameters Type Name Description Observable<string> observable Overrides SUiElement<STextboxOptions, string>.UnregisterObservable(Observable<string>) Value(string) Declaration public STextboxOptions Value(string value) Parameters Type Name Description string value Returns Type Description STextboxOptions"
  },
  "api/SUI.SToggleOptions.html": {
    "href": "api/SUI.SToggleOptions.html",
    "title": "Class SToggleOptions | RedLoader Docs",
    "keywords": "Class SToggleOptions Inheritance object SUiElement SUiElement<SToggleOptions> SUiElement<SToggleOptions, bool> SToggleOptions Inherited Members SUiElement<SToggleOptions, bool>.Observable SUiElement<SToggleOptions, bool>.Bind(Observable<bool>) SUiElement<SToggleOptions, bool>.Unbind() SUiElement<SToggleOptions, bool>.RegisterObservable(Observable<bool>) SUiElement<SToggleOptions, bool>.UnregisterObservable(Observable<bool>) SUiElement<SToggleOptions, bool>.OnObservaleChanged(bool) SUiElement<SToggleOptions>.TextObject SUiElement<SToggleOptions>.VisibilityObservable SUiElement<SToggleOptions>.VisibilityObservalbleChanged(bool) SUiElement<SToggleOptions>.BindVisibility(Observable<bool>) SUiElement<SToggleOptions>.UnbindVisibility() SUiElement<SToggleOptions>.Name(string) SUiElement<SToggleOptions>.Id(string) SUiElement<SToggleOptions>.Class(string) SUiElement<SToggleOptions>.Text(string) SUiElement<SToggleOptions>.RichText(string) SUiElement<SToggleOptions>.FontSize(int) SUiElement<SToggleOptions>.FontAutoSize(bool) SUiElement<SToggleOptions>.FontColor(Color) SUiElement<SToggleOptions>.FontColor(string) SUiElement<SToggleOptions>.Find<TObj>(string) SUiElement<SToggleOptions>.MinOffset(int?, int?) SUiElement<SToggleOptions>.MaxOffset(int?, int?) SUiElement<SToggleOptions>.Size(float?, float?) SUiElement<SToggleOptions>.Size(Vector2) SUiElement<SToggleOptions>.Position(float?, float?) SUiElement<SToggleOptions>.Width(float) SUiElement<SToggleOptions>.Height(float) SUiElement<SToggleOptions>.PHeight(float) SUiElement<SToggleOptions>.PWidth(float) SUiElement<SToggleOptions>.MHeight(float) SUiElement<SToggleOptions>.MWidth(float) SUiElement<SToggleOptions>.FlexHeight(float) SUiElement<SToggleOptions>.FlexWidth(float) SUiElement<SToggleOptions>.RectPadding(float, float, float, float) SUiElement<SToggleOptions>.RectPadding(float, float) SUiElement<SToggleOptions>.RectPadding(float) SUiElement<SToggleOptions>.HFill() SUiElement<SToggleOptions>.VFill() SUiElement<SToggleOptions>.VOffset(float, float) SUiElement<SToggleOptions>.HOffset(float, float) SUiElement<SToggleOptions>.Pivot(float?, float?) SUiElement<SToggleOptions>.AspectRatio(AspectRatioFitter.AspectMode) SUiElement<SToggleOptions>.Anchor(AnchorType) SUiElement<SToggleOptions>.Dock(EDockType) SUiElement<SToggleOptions>.Ppu(float) SUiElement<SToggleOptions>.Visible(bool) SUiElement<SToggleOptions>.Active(bool) SUiElement<SToggleOptions>.Toggle() SUiElement<SToggleOptions>.OnClick(Action) SUiElement<SToggleOptions>.Add(SUiElement) SUiElement<SToggleOptions>.this[string] SUiElement.RectTransform SUiElement.Root SUiElement.Parent SUiElement._id SUiElement._classes SUiElement.SetParent(Transform) SUiElement.SetParent(SUiElement) SUiElement.Remove() SUiElement.As<T>() SUiElement.GetClass(string) SUiElement.GetOrAdd<T>() object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: SUI Assembly: SonsSdk.dll Syntax public class SToggleOptions : SUiElement<SToggleOptions, bool> Constructors SToggleOptions(GameObject) Declaration public SToggleOptions(GameObject root) Parameters Type Name Description GameObject root Fields ToggleObject Declaration public Toggle ToggleObject Field Value Type Description Toggle Methods Notify(Action<bool>) Declaration public SToggleOptions Notify(Action<bool> action) Parameters Type Name Description Action<bool> action Returns Type Description SToggleOptions OnObservaleChanged(bool) Declaration protected override void OnObservaleChanged(bool value) Parameters Type Name Description bool value Overrides SUiElement<SToggleOptions, bool>.OnObservaleChanged(bool) RegisterObservable(Observable<bool>) Declaration protected override void RegisterObservable(Observable<bool> observable) Parameters Type Name Description Observable<bool> observable Overrides SUiElement<SToggleOptions, bool>.RegisterObservable(Observable<bool>) UnregisterObservable(Observable<bool>) Declaration protected override void UnregisterObservable(Observable<bool> observable) Parameters Type Name Description Observable<bool> observable Overrides SUiElement<SToggleOptions, bool>.UnregisterObservable(Observable<bool>) Value(bool) Declaration public SToggleOptions Value(bool value) Parameters Type Name Description bool value Returns Type Description SToggleOptions"
  },
  "api/SUI.SUI.BackgroundDefinition.html": {
    "href": "api/SUI.SUI.BackgroundDefinition.html",
    "title": "Struct SUI.BackgroundDefinition | RedLoader Docs",
    "keywords": "Struct SUI.BackgroundDefinition Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) Namespace: SUI Assembly: SonsSdk.dll Syntax public struct SUI.BackgroundDefinition Constructors BackgroundDefinition(Color, Sprite, Type) Declaration public BackgroundDefinition(Color color, Sprite sprite, Image.Type type) Parameters Type Name Description Color color Sprite sprite Type type Fields Color Declaration public Color Color Field Value Type Description Color Sprite Declaration public Sprite Sprite Field Value Type Description Sprite Type Declaration public Image.Type Type Field Value Type Description Type Methods ApplyTo(Image) Declaration public void ApplyTo(Image image) Parameters Type Name Description Image image"
  },
  "api/SUI.SUI.EFont.html": {
    "href": "api/SUI.SUI.EFont.html",
    "title": "Enum SUI.EFont | RedLoader Docs",
    "keywords": "Enum SUI.EFont Namespace: SUI Assembly: SonsSdk.dll Syntax public enum SUI.EFont Fields Name Description FatDebug Montserrat NotoSans RobotoBlur RobotoBold RobotoDefault RobotoLight RobotoRegular"
  },
  "api/SUI.SUI.html": {
    "href": "api/SUI.SUI.html",
    "title": "Class SUI | RedLoader Docs",
    "keywords": "Class SUI Inheritance object SUI Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: SUI Assembly: SonsSdk.dll Syntax public class SUI Constructors SUI() Declaration public SUI() Fields BG_CYAN Declaration public static readonly Color BG_CYAN Field Value Type Description Color _panels Declaration public static Dictionary<string, SPanelOptions> _panels Field Value Type Description Dictionary<string, SPanelOptions> Properties AssetBundle Declaration public static AssetBundle AssetBundle { get; } Property Value Type Description AssetBundle BlurBackground Declaration public static Sprite BlurBackground { get; } Property Value Type Description Sprite Fonts Declaration public static IReadOnlyList<TMP_FontAsset> Fonts { get; } Property Value Type Description IReadOnlyList<TMP_FontAsset> IsInitialized Declaration public static bool IsInitialized { get; } Property Value Type Description bool SBackground Declaration public static SContainerOptions SBackground { get; } Property Value Type Description SContainerOptions SBgButton Declaration public static SBgButtonOptions SBgButton { get; } Property Value Type Description SBgButtonOptions SButton Declaration public static SButtonOptions SButton { get; } Property Value Type Description SButtonOptions SContainer Declaration public static SContainerOptions SContainer { get; } Property Value Type Description SContainerOptions SDiv Declaration public static SContainerOptions SDiv { get; } Property Value Type Description SContainerOptions SHorizontal Declaration public static SContainerOptions SHorizontal { get; } Property Value Type Description SContainerOptions SImage Declaration public static SImageOptions SImage { get; } Property Value Type Description SImageOptions SLabel Declaration public static SLabelOptions SLabel { get; } Property Value Type Description SLabelOptions SLabelDivider Declaration public static SLabelDividerOptions SLabelDivider { get; } Property Value Type Description SLabelDividerOptions SMaskedImage Declaration public static SMaskedImageOptions SMaskedImage { get; } Property Value Type Description SMaskedImageOptions SMenuButton Declaration public static SMenuButtonOptions SMenuButton { get; } Property Value Type Description SMenuButtonOptions SOptions Declaration public static SOptionsOptions SOptions { get; } Property Value Type Description SOptionsOptions SScrollContainer Declaration public static SScrollContainerOptions SScrollContainer { get; } Property Value Type Description SScrollContainerOptions SSlider Declaration public static SSliderOptions SSlider { get; } Property Value Type Description SSliderOptions SSprite Declaration public static SSpriteOptions SSprite { get; } Property Value Type Description SSpriteOptions STabController Declaration public static STabControllerOptions STabController { get; } Property Value Type Description STabControllerOptions STextbox Declaration public static STextboxOptions STextbox { get; } Property Value Type Description STextboxOptions SToggle Declaration public static SToggleOptions SToggle { get; } Property Value Type Description SToggleOptions SUIViewport Declaration public static Canvas SUIViewport { get; } Property Value Type Description Canvas SVertical Declaration public static SContainerOptions SVertical { get; } Property Value Type Description SContainerOptions SpriteBackground Declaration public static Sprite SpriteBackground { get; } Property Value Type Description Sprite SpriteBackground400ppu Declaration public static Sprite SpriteBackground400ppu { get; } Property Value Type Description Sprite Sprites Declaration public static IReadOnlyList<Sprite> Sprites { get; } Property Value Type Description IReadOnlyList<Sprite> Methods ColorFromString(string) Declaration public static Color ColorFromString(string color) Parameters Type Name Description string color Returns Type Description Color CreatePanel(Transform) Declaration public static SPanelOptions CreatePanel(Transform parent = null) Parameters Type Name Description Transform parent Returns Type Description SPanelOptions GetBackgroundSprite(EBackground) Declaration public static Sprite GetBackgroundSprite(EBackground type) Parameters Type Name Description EBackground type Returns Type Description Sprite GetFont(EFont) Declaration public static TMP_FontAsset GetFont(SUI.EFont font) Parameters Type Name Description SUI.EFont font Returns Type Description TMP_FontAsset GetPanel(string) Declaration public static SPanelOptions GetPanel(string id) Parameters Type Name Description string id Returns Type Description SPanelOptions GetSprite(string) Declaration public static Sprite GetSprite(string name) Parameters Type Name Description string name Returns Type Description Sprite RegisterNewPanel(string, bool, KeyCode?) Creates a new panel and registers it to the sui system. Declaration public static SPanelOptions RegisterNewPanel(string id, bool enableInput = false, KeyCode? toggleKey = null) Parameters Type Name Description string id The id by which you can manage the panel later. Needs to be unique bool enableInput If true enables the mouse and disables game keyboard input once the panel is showing KeyCode? toggleKey Optional key by which you can toggle the panel Returns Type Description SPanelOptions ToggleMenuPanel(string) Declaration public static bool ToggleMenuPanel(string id) Parameters Type Name Description string id Returns Type Description bool ToggleMenuPanel(string, bool) Declaration public static SPanelOptions ToggleMenuPanel(string id, bool show) Parameters Type Name Description string id bool show Returns Type Description SPanelOptions TogglePanel(string) Declaration public static bool TogglePanel(string id) Parameters Type Name Description string id Returns Type Description bool TogglePanel(string, bool) Declaration public static SPanelOptions TogglePanel(string id, bool show) Parameters Type Name Description string id bool show Returns Type Description SPanelOptions"
  },
  "api/SUI.SUiElement-1.html": {
    "href": "api/SUI.SUiElement-1.html",
    "title": "Class SUiElement<T> | RedLoader Docs",
    "keywords": "Class SUiElement<T> Inheritance object SUiElement SUiElement<T> SBgButtonOptions SButtonOptions SContainerOptions SLabelDividerOptions SMaskedImageOptions SMenuButtonOptions SUiElement<T, TData> Inherited Members SUiElement.RectTransform SUiElement.Root SUiElement.Parent SUiElement._id SUiElement._classes SUiElement.SetParent(Transform) SUiElement.SetParent(SUiElement) SUiElement.Remove() SUiElement.As<T>() SUiElement.GetClass(string) SUiElement.GetOrAdd<T>() object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: SUI Assembly: SonsSdk.dll Syntax public class SUiElement<T> : SUiElement Type Parameters Name Description T Constructors SUiElement(GameObject) Declaration public SUiElement(GameObject root) Parameters Type Name Description GameObject root Fields TextObject Declaration protected TMP_Text TextObject Field Value Type Description TMP_Text VisibilityObservable Declaration protected Observable<bool> VisibilityObservable Field Value Type Description Observable<bool> Properties this[string] Declaration public SUiElement this[string id] { get; } Parameters Type Name Description string id Property Value Type Description SUiElement Methods Active(bool) Set the root gameobject to active or inactive Declaration public T Active(bool active) Parameters Type Name Description bool active Returns Type Description T Add(SUiElement) Declaration public virtual T Add(SUiElement element) Parameters Type Name Description SUiElement element Returns Type Description T Anchor(AnchorType) Set the rect anchor Declaration public T Anchor(AnchorType anchorType) Parameters Type Name Description AnchorType anchorType Returns Type Description T AspectRatio(AspectMode) Sets the aspect ratio mode for the objects's aspect ratio fitter. Declaration public T AspectRatio(AspectRatioFitter.AspectMode mode) Parameters Type Name Description AspectMode mode The aspect ratio mode to apply. Returns Type Description T BindVisibility(Observable<bool>) Binds the visibility of the container to an observable boolean value. Declaration public T BindVisibility(Observable<bool> observable) Parameters Type Name Description Observable<bool> observable The observable boolean value to bind to. Returns Type Description T Class(string) Declaration public T Class(string classes) Parameters Type Name Description string classes Returns Type Description T Dock(EDockType) An abstraction of the anchor and offset settings Declaration public T Dock(EDockType type) Parameters Type Name Description EDockType type Returns Type Description T Find<TObj>(string) Finds a child object and returns it as a SUiElement Declaration public TObj Find<TObj>(string path) where TObj : SUiElement Parameters Type Name Description string path Returns Type Description TObj Type Parameters Name Description TObj FlexHeight(float) Declaration public T FlexHeight(float height) Parameters Type Name Description float height Returns Type Description T FlexWidth(float) Declaration public T FlexWidth(float width) Parameters Type Name Description float width Returns Type Description T FontAutoSize(bool) Toggle auto sizing of the main text object Declaration public T FontAutoSize(bool enabled) Parameters Type Name Description bool enabled Returns Type Description T FontColor(string) Declaration public T FontColor(string color) Parameters Type Name Description string color Returns Type Description T FontColor(Color) Set the font color of the main text object Declaration public T FontColor(Color color) Parameters Type Name Description Color color Returns Type Description T FontSize(int) Set the font size of the main text object Declaration public virtual T FontSize(int size) Parameters Type Name Description int size Returns Type Description T HFill() Sets the anchor and offsets to fill horizontally Declaration public T HFill() Returns Type Description T HOffset(float, float) Set the vertical rect offset Declaration public T HOffset(float left, float right) Parameters Type Name Description float left float right Returns Type Description T Height(float) Set the size delta height of the rect transform Declaration public T Height(float height) Parameters Type Name Description float height Returns Type Description T Id(string) Declaration public T Id(string id) Parameters Type Name Description string id Returns Type Description T MHeight(float) Set the minimum height of the layout element Declaration public T MHeight(float height) Parameters Type Name Description float height Returns Type Description T MWidth(float) Set the minimum width of the layout element Declaration public T MWidth(float width) Parameters Type Name Description float width Returns Type Description T MaxOffset(int?, int?) Set the maximum offset of the rect transform Declaration public T MaxOffset(int? x = null, int? y = null) Parameters Type Name Description int? x int? y Returns Type Description T MinOffset(int?, int?) Set the minimum offset of the rect transform Declaration public T MinOffset(int? x = null, int? y = null) Parameters Type Name Description int? x int? y Returns Type Description T Name(string) Declaration public T Name(string name) Parameters Type Name Description string name Returns Type Description T OnClick(Action) Fire an action when the container is clicked (FOR BUTTONS USE .Notify() INSTEAD) Declaration public T OnClick(Action action) Parameters Type Name Description Action action Returns Type Description T PHeight(float) Set the preferred height of the layout element Declaration public T PHeight(float height) Parameters Type Name Description float height Returns Type Description T PWidth(float) Set the preferred width of the layout element Declaration public T PWidth(float width) Parameters Type Name Description float width Returns Type Description T Pivot(float?, float?) Set the rect pivot Declaration public T Pivot(float? x = null, float? y = null) Parameters Type Name Description float? x float? y Returns Type Description T Position(float?, float?) Set the anchor position of the rect transform Declaration public T Position(float? x, float? y = null) Parameters Type Name Description float? x float? y Returns Type Description T Ppu(float) Sets the pixels per unit multiplier for the object's image. Declaration public T Ppu(float ppu) Parameters Type Name Description float ppu Returns Type Description T RectPadding(float) Set the offsets of the rect transform Declaration public T RectPadding(float padding) Parameters Type Name Description float padding Returns Type Description T RectPadding(float, float) Set the offsets of the rect transform Declaration public T RectPadding(float rightLeft, float topBottom) Parameters Type Name Description float rightLeft float topBottom Returns Type Description T RectPadding(float, float, float, float) Set the offsets of the rect transform Declaration public T RectPadding(float left, float right, float top, float bottom) Parameters Type Name Description float left float right float top float bottom Returns Type Description T RichText(string) Set the text of the main text object as rich text Declaration public virtual T RichText(string text) Parameters Type Name Description string text Returns Type Description T Size(float?, float?) Set the size delta of the rect transform Declaration public T Size(float? width = null, float? height = null) Parameters Type Name Description float? width float? height Returns Type Description T Size(Vector2) Set the size delta of the rect transform Declaration public T Size(Vector2 size) Parameters Type Name Description Vector2 size Returns Type Description T Text(string) Set the text of the main text object Declaration public virtual T Text(string text) Parameters Type Name Description string text Returns Type Description T Toggle() Toggle the root gameobject Declaration public T Toggle() Returns Type Description T UnbindVisibility() Unbinds the visibility of the container from any previously bound observable. Declaration public T UnbindVisibility() Returns Type Description T VFill() Sets the anchor and offsets to fill vertically Declaration public T VFill() Returns Type Description T VOffset(float, float) Set the horizontal rect offset Declaration public T VOffset(float top, float bottom) Parameters Type Name Description float top float bottom Returns Type Description T VisibilityObservalbleChanged(bool) Declaration protected virtual void VisibilityObservalbleChanged(bool value) Parameters Type Name Description bool value Visible(bool) Set the visibility of the element (by setting the alpha and blocking raycasts) Declaration public T Visible(bool visible) Parameters Type Name Description bool visible Returns Type Description T Width(float) Set the size delta width of the rect transform Declaration public T Width(float width) Parameters Type Name Description float width Returns Type Description T"
  },
  "api/SUI.SUiElement-2.html": {
    "href": "api/SUI.SUiElement-2.html",
    "title": "Class SUiElement<T, TData> | RedLoader Docs",
    "keywords": "Class SUiElement<T, TData> Inheritance object SUiElement SUiElement<T> SUiElement<T, TData> SImageOptions SLabelOptions SOptionsOptions SSliderOptions SSpriteOptions STextboxOptions SToggleOptions Inherited Members SUiElement<T>.TextObject SUiElement<T>.VisibilityObservable SUiElement<T>.VisibilityObservalbleChanged(bool) SUiElement<T>.BindVisibility(Observable<bool>) SUiElement<T>.UnbindVisibility() SUiElement<T>.Name(string) SUiElement<T>.Id(string) SUiElement<T>.Class(string) SUiElement<T>.Text(string) SUiElement<T>.RichText(string) SUiElement<T>.FontSize(int) SUiElement<T>.FontAutoSize(bool) SUiElement<T>.FontColor(Color) SUiElement<T>.FontColor(string) SUiElement<T>.Find<TObj>(string) SUiElement<T>.MinOffset(int?, int?) SUiElement<T>.MaxOffset(int?, int?) SUiElement<T>.Size(float?, float?) SUiElement<T>.Size(Vector2) SUiElement<T>.Position(float?, float?) SUiElement<T>.Width(float) SUiElement<T>.Height(float) SUiElement<T>.PHeight(float) SUiElement<T>.PWidth(float) SUiElement<T>.MHeight(float) SUiElement<T>.MWidth(float) SUiElement<T>.FlexHeight(float) SUiElement<T>.FlexWidth(float) SUiElement<T>.RectPadding(float, float, float, float) SUiElement<T>.RectPadding(float, float) SUiElement<T>.RectPadding(float) SUiElement<T>.HFill() SUiElement<T>.VFill() SUiElement<T>.VOffset(float, float) SUiElement<T>.HOffset(float, float) SUiElement<T>.Pivot(float?, float?) SUiElement<T>.AspectRatio(AspectRatioFitter.AspectMode) SUiElement<T>.Anchor(AnchorType) SUiElement<T>.Dock(EDockType) SUiElement<T>.Ppu(float) SUiElement<T>.Visible(bool) SUiElement<T>.Active(bool) SUiElement<T>.Toggle() SUiElement<T>.OnClick(Action) SUiElement<T>.Add(SUiElement) SUiElement<T>.this[string] SUiElement.RectTransform SUiElement.Root SUiElement.Parent SUiElement._id SUiElement._classes SUiElement.SetParent(Transform) SUiElement.SetParent(SUiElement) SUiElement.Remove() SUiElement.As<T>() SUiElement.GetClass(string) SUiElement.GetOrAdd<T>() object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: SUI Assembly: SonsSdk.dll Syntax public class SUiElement<T, TData> : SUiElement<T> Type Parameters Name Description T TData Constructors SUiElement(GameObject) Declaration public SUiElement(GameObject root) Parameters Type Name Description GameObject root Fields Observable Declaration protected Observable<TData> Observable Field Value Type Description Observable<TData> Methods Bind(Observable<TData>) Bind an observable to the element value Declaration public T Bind(Observable<TData> observable) Parameters Type Name Description Observable<TData> observable Returns Type Description T OnObservaleChanged(TData) Declaration protected virtual void OnObservaleChanged(TData value) Parameters Type Name Description TData value RegisterObservable(Observable<TData>) Declaration protected virtual void RegisterObservable(Observable<TData> observable) Parameters Type Name Description Observable<TData> observable Unbind() Unbind the current observable from the element value Declaration public T Unbind() Returns Type Description T UnregisterObservable(Observable<TData>) Declaration protected virtual void UnregisterObservable(Observable<TData> observable) Parameters Type Name Description Observable<TData> observable"
  },
  "api/SUI.SUiElement.html": {
    "href": "api/SUI.SUiElement.html",
    "title": "Class SUiElement | RedLoader Docs",
    "keywords": "Class SUiElement Inheritance object SUiElement SUiElement<T> Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: SUI Assembly: SonsSdk.dll Syntax public class SUiElement Constructors SUiElement(GameObject) Declaration public SUiElement(GameObject root) Parameters Type Name Description GameObject root Fields Parent Declaration public SUiElement Parent Field Value Type Description SUiElement RectTransform Declaration public RectTransform RectTransform Field Value Type Description RectTransform Root Declaration public GameObject Root Field Value Type Description GameObject _classes Declaration public List<string> _classes Field Value Type Description List<string> _id Declaration public string _id Field Value Type Description string Methods As<T>() Declaration public T As<T>() where T : SUiElement Returns Type Description T Type Parameters Name Description T GetClass(string) Declaration public List<SUiElement> GetClass(string className) Parameters Type Name Description string className Returns Type Description List<SUiElement> GetOrAdd<T>() Declaration protected T GetOrAdd<T>() where T : Component Returns Type Description T Type Parameters Name Description T Remove() Declaration public void Remove() SetParent(SUiElement) Declaration public void SetParent(SUiElement parent) Parameters Type Name Description SUiElement parent SetParent(Transform) Declaration public void SetParent(Transform parent) Parameters Type Name Description Transform parent"
  },
  "articles/bundles.html": {
    "href": "articles/bundles.html",
    "title": "Asset Bundles | RedLoader Docs",
    "keywords": "Asset Bundles Asset bundles and Addressables allow you to load your own assets into the game. For more info see here. Redloader can load and map asset bundles automatically. For it to work do the following: Put your asset bundle into the Mods/<ModName>/ folder Add a static class like the following to your mod: [AssetBundle(\"Bundle\")] public static class AssetBundleTest { [AssetReference(\"Asset\")] public static GameObject Asset { get; set; } } The [AssetBundle] attribute is the name of your asset bundle. In this example the bundle is at this location Mods/<ModName>/Bundle. The [AssetReference] attribute is the name of the asset in the bundle. Make sure the attribute is on a property that has a getter and a setter. Addressables Addressables also allow you to load your own assets into the game. See here. To load in your addressables put the catalog and the bundle into the Mods/<ModName>/ folder. RedLoader will automatically register the catalog. After that you can load your asset like this: AssetLoaders.LoadAsset<Sprite>(\"MyAsset\"); AssetLoaders.LoadPrefab(\"MyAsset\"); // same as AssetLoaders.LoadAsset<GameObject>(\"\"); AssetLoaders.InstantiatePrefab(\"MyAsset\"); // same as Object.Instantiate(AssetLoaders.LoadAsset<GameObject>(\"\")); Important: Make sure to use a relative path for the bundle load path in the catalog. This will load the bundle relative to the Sons of the Forest executable. So the path should be something like Mods/<ModName>/. More info on addressables will follow soon"
  },
  "articles/configuration.html": {
    "href": "articles/configuration.html",
    "title": "Configuration | RedLoader Docs",
    "keywords": "Configuration To allow users to configure parameters of your mod you can add config entries to your mod. To do so take a look at the following example: public static class Config { public static ConfigCategory Category { get; private set; } public static ConfigEntry<float> SomeValue { get; private set; } public static void Init() { Category = ConfigSystem.CreateFileCategory(\"Zippy\", \"Zippy\", \"Zippy.cfg\"); SomeValue = Category.CreateEntry( \"display_depth\", 0.0692f, \"Display Depth\", \"Position of the display on the barrel axis.\"); DisplayDepth.SetRange(-0.03f,0.2f); } } First you need to create a category for your config. You can do so with ConfigSystem.CreateFileCategory(id, displayName, fileName);. Once you have a category you can add entries to it. To do so use Category.CreateEntry(id, defaultValue, displayName, description);. Optionally you can set a range for numeric entries and options for enum entries. You would then call Init() in the OnSdkInitialized() method of your mod. Input config entries Redloader comes with a custom configuration system for the new input system. The configuration class will look almost the same. public static class Config { public static ConfigCategory Category { get; private set; } public static KeybindConfigEntry SomeKey { get; private set; } public static void Init() { Category = ConfigSystem.CreateFileCategory(\"Zippy\", \"Zippy\", \"Zippy.cfg\"); SomeKey = Category.CreateKeybindEntry(\"key\", \"g\", \"Key\", \"Some key\"); } } You can then register action for your key anywhere with Config.SomeKey.Notify(MyAction, MyOptionalReleaseAction); If you want the Input to only trigger in specific scenarios (like only when the player is in the game but the console isn't open), you can use SetScope SomeKey.SetScope(needsPlayerControllable:true); // only when player is in game and console, book, cutscene etc. isn't open. SomeKey.SetScope(needsInGame:true); // only when player is in game. SomeKey.SetScope(needsInGame:true, ignoreInConsole:true); // only when player is in game and console isn't open."
  },
  "articles/creating-mods.html": {
    "href": "articles/creating-mods.html",
    "title": "Creating Mods | RedLoader Docs",
    "keywords": "Creating Mods This article will cover how to setup a mod project using the RedManager as it's the easiest way. If you want to use the template directory you can see it here. Creating the project (RedManager) Start up the RedManager If you path isn't correctly set, adjust it Head over to the Modders tab Click on Install template if you haven't installed the template yet Put in your mod name and click Create Project Select the target folder for your mod (a subfolder with your mod name will be created in the target folder) Creating the project (CLI) If you want to use the command line to create your project look at the readme here. IMPORTANT The RedManager can't update the template once a new one comes out. If you want to update the template open up the console and execute dotnet new install RedLoader.Templates. Project description The project includes several features out of the box: The mod will automatically be copied to the game on build If you use Rider you can press Ctrl+F5 to automatically copy the mod and run the game If you set the mode to release it will: Automatically create a folder with the correct mod structure Automatically create a zip with the created folder The template also sets up a basic mod for you. You should be able to just build the mod and see the mod being loaded. Adjusting the mod info The first thing you should do is adjust your mod info (like author, mod name etc.) in the manifest.json file. The file is linked to a valid json schema, so if you are ever unsure what you can write in there just press Ctrl+Space to open autocomplete. Tips If you want to automatically apply harmony patches for your assembly add HarmonyPatchAll = true; to your constructor (or uncomment it). If you want to subscribe to unity's OnUpdate, OnFixedUpdate, OnGUI and OnLateUpdate message queue you can register it in the constructor by for example using OnUpdateCallback = MyMethod. To reference additional assemblies, add them from the _RedLoader/Game folder. Non game assemblies like harmony can be referenced from the _RedLoader/net6 folder."
  },
  "articles/custom-save-data.html": {
    "href": "articles/custom-save-data.html",
    "title": "Adding custom data to a save file | RedLoader Docs",
    "keywords": "Adding custom data to a save file Red Loader has utilities if you want your mod to persist data in save games. This is useful if you want to save settings or other data that you want to persist between game sessions for a particular save. Serializer class Your mod needs some kind of class to serialize and deserialize your data. A common way is to have some kind of \"manager\" class that holds all the data you want to save. public class MyModManager : ICustomSaveable<MyModManager.MyModSaveData> { public string Name => \"MyModManager\"; // Used to determine if the data should also be saved in multiplayer saves public bool IncludeInPlayerSave => true; public MyModSaveData Save() { // Serialize your data from game state here return new MyModSaveData(); } public void Load(MyModSaveData obj) { // Apply game state from your data here } public class MyModSaveData { public Color SomeColor; public Vector3 SomeVector; } } The important parts here are the ICustomSaveable interface that MyModManager implements, and the MyModSaveData class that is used to serialize and deserialize the data. The Save and Load methods from the ICustomSaveable interface are used to serialize and deserialize the data. Red Loader will call them when a save game gets loaded or the user requests a save. Registering your serializer Registering the serializer is as easy as calling the following in OnSdkInitialized: var manager = new MyModManager(); SonsSaveTools.Register(manager);"
  },
  "articles/freecam.html": {
    "href": "articles/freecam.html",
    "title": "Freecam | RedLoader Docs",
    "keywords": "Freecam RedLoader ships with it's own configurable freecam mode that also adds smoothing. How to enable it Press F1 to open the console and type xfreecam. To exit the freecam mode, press F1 and type xfreecam again. Configuration You can configure various parameters of the freecam mode in the UserData/_RedLoader.cfg file. Parameter Default Value Description look_sensitivity 0.2 The mouse sensitivity multiplier when looking around positional_smoothing 0.5 The amount of smoothing applied to the camera's position rotational_smoothing 0.01 The amount of smoothing applied to the camera's rotation mouse_y_ratio 0.7 The ratio of the mouse's Y speed to the X axis Controls WASD to move around Space to move up Right mouse to move down Mouse to look around Mouse Wheel to change positional speed Ctrl + Mouse Wheel to change rotational speed"
  },
  "articles/installing-mods.html": {
    "href": "articles/installing-mods.html",
    "title": "Installing Mods | RedLoader Docs",
    "keywords": "Installing Mods To install mods you can use the Mod Manager found here. If you instead want to manually install mods do the following: Download the mod zip. Extract the the contents of the zip into your Sons Of The Forest folder. After that you should have a .dll file and a folder with the same name inside your Mods directory."
  },
  "articles/loader-features.html": {
    "href": "articles/loader-features.html",
    "title": "Misc Loader Features | RedLoader Docs",
    "keywords": "Misc Loader Features Quick Loading LoadIntoMain Load straight into a world for testing purposes by adding --sdk.loadintomain to your launch options. You can configure what gets loaded in the UserData/_RedLoader.cfg file. LoadSave You can directly load into a save game with the --savegame <id> launch option. You can find the ids of your save games in the C:\\Users\\<user>\\AppData\\LocalLow\\Endnight\\SonsOfTheForest\\Saves\\<userid>\\SinglePlayer directory. Boot.txt You can create a boot.txt in your game directory with a command on each line to be executed on game start. Debug commands Dump info There are several things the loader allows you to dump from the game. To do so you can use the dump console command. The dump will be written to the game folder in a file called <type>.txt (do for dump items it will be items.txt). The following thing can be dumped currently: dump items: Lists all items dump characters: Lists all characters and their variations dump prefabs Lists all prefabs"
  },
  "articles/sounds.html": {
    "href": "articles/sounds.html",
    "title": "Custom Sounds | RedLoader Docs",
    "keywords": "Custom Sounds Loading directly via mp3/wav files To load a sound from a file: SoundTools.RegisterSound(\"mysound\", path); SoundTools.PlaySound(\"mysound\"); mysound is the id of the sound by which you can play it later. It needs to be unique. You can also pass in the volume and pitch to the PlaySound method. 3D Sounds To play a sound in 3D space you need to set the is3d parameter of the RegisterSound method to true. Then you can use the PlaySound method with the pos parameter to play the sound at a specific position. SoundTools.RegisterSound(\"mysound\", path, true); SoundTools.PlaySound(\"mysound\", new Vector3(0, 0, 0)); 3D Sound attached to a gameobject Manually setting the position might not really be what you want. If you rather want to attach a sound to a gameobject and have it follow the object automatically, there is a better way. var go = new GameObject(\"Sound Player\"); var player = go.AddComponent<SoundPlayer>(); player.Sound = SoundTools.GetSound(\"mysound\"); player.Play(); player.ChannelDistance = 10; // You can set the distance like this. Loading FMOD Banks RedLoader can also load events from FMOD Banks. It's important to note that the banks have to be made in the provided FMOD project. Once you have your master bank and optional other bank, you can load them in like this: SoundTools.LoadBank(@\"Absolute\\Path\\To\\My\\Banks\\master.bank\"); Keep in mind the .strings.bank file is automatically loaded if it's in the same folder as the master bank. To load banks from a buffer you can use the same method but with a byte array instead of a path. After that the events are available to use like any other game event. Replacing game sounds RedLoader can also replace sounds in the game with your own (or another sound from the game). SoundTools.SetupRedirect(\"event:/GameEvent\", \"event:/MyEvent\");"
  },
  "index.html": {
    "href": "index.html",
    "title": "Welcome to the RedLoader wiki! | RedLoader Docs",
    "keywords": "Welcome to the RedLoader wiki! Useful links RedLoader: https://github.com/ToniMacaroni/RedLoader RedManager: https://github.com/ToniMacaroni/RedManager RedLoader mod templates: https://github.com/ToniMacaroni/RedLoader.Templates Start by reading the articles"
  }
}